
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.15.1
 * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
 */
Prisma.prismaVersion = {
  client: "5.15.1",
  engine: "5675a3182f972f1a8f31d16eee6abf4fd54910e3"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  username: 'username',
  password: 'password',
  name: 'name',
  email: 'email',
  blockchainAddress: 'blockchainAddress',
  isAdmin: 'isAdmin',
  newsletter: 'newsletter',
  categoryId: 'categoryId',
  phoneNumber: 'phoneNumber',
  totalPoint: 'totalPoint',
  KYCStatusId: 'KYCStatusId',
  isActive: 'isActive',
  usedReferralCodeId: 'usedReferralCodeId',
  ownedReferralCodeId: 'ownedReferralCodeId'
};

exports.Prisma.StatusScalarFieldEnum = {
  id: 'id',
  type: 'type'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  type: 'type'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  title: 'title',
  transitFee: 'transitFee',
  address: 'address',
  timezone: 'timezone',
  hasLandingDeck: 'hasLandingDeck',
  hasChargingStation: 'hasChargingStation',
  hasStorageHub: 'hasStorageHub',
  isFixedTransitFee: 'isFixedTransitFee',
  isRentableAirspace: 'isRentableAirspace',
  ownerId: 'ownerId',
  noFlyZone: 'noFlyZone',
  latitude: 'latitude',
  longitude: 'longitude',
  propertyStatusId: 'propertyStatusId',
  isActive: 'isActive'
};

exports.Prisma.PropertyStatusScalarFieldEnum = {
  id: 'id',
  type: 'type'
};

exports.Prisma.LayerScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  tokenId: 'tokenId',
  propertyId: 'propertyId'
};

exports.Prisma.VertexesScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  latitude: 'latitude',
  longitude: 'longitude',
  propertyId: 'propertyId'
};

exports.Prisma.RentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  tokenId: 'tokenId',
  startTime: 'startTime',
  endTime: 'endTime',
  renterId: 'renterId',
  layerId: 'layerId',
  isActive: 'isActive'
};

exports.Prisma.NewsletterScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  title: 'title',
  text: 'text',
  link: 'link',
  date: 'date'
};

exports.Prisma.WeekDayRangeScalarFieldEnum = {
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  fromTime: 'fromTime',
  toTime: 'toTime',
  isAvailable: 'isAvailable',
  weekDayId: 'weekDayId',
  propertyId: 'propertyId'
};

exports.Prisma.WeekDayScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ReferralCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  codeChanged: 'codeChanged',
  usedByBonusEarned: 'usedByBonusEarned',
  ownedByBonusEarned: 'ownedByBonusEarned'
};

exports.Prisma.RentalTokenScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  startTime: 'startTime',
  endTime: 'endTime',
  landTokenId: 'landTokenId',
  rentalTokenId: 'rentalTokenId'
};

exports.Prisma.RewardScalarFieldEnum = {
  id: 'id',
  rewardId: 'rewardId',
  blockchainAddress: 'blockchainAddress',
  taskType: 'taskType',
  point: 'point',
  completed: 'completed',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TaskType = exports.$Enums.TaskType = {
  REFERRAL_REWARD: 'REFERRAL_REWARD'
};

exports.Prisma.ModelName = {
  User: 'User',
  Status: 'Status',
  Category: 'Category',
  Property: 'Property',
  PropertyStatus: 'PropertyStatus',
  Layer: 'Layer',
  Vertexes: 'Vertexes',
  Rent: 'Rent',
  Newsletter: 'Newsletter',
  WeekDayRange: 'WeekDayRange',
  WeekDay: 'WeekDay',
  ReferralCode: 'ReferralCode',
  RentalToken: 'RentalToken',
  Reward: 'Reward'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
