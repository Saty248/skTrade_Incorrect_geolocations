
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Status
 * 
 */
export type Status = $Result.DefaultSelection<Prisma.$StatusPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Property
 * 
 */
export type Property = $Result.DefaultSelection<Prisma.$PropertyPayload>
/**
 * Model PropertyStatus
 * 
 */
export type PropertyStatus = $Result.DefaultSelection<Prisma.$PropertyStatusPayload>
/**
 * Model Layer
 * 
 */
export type Layer = $Result.DefaultSelection<Prisma.$LayerPayload>
/**
 * Model Vertexes
 * 
 */
export type Vertexes = $Result.DefaultSelection<Prisma.$VertexesPayload>
/**
 * Model Rent
 * 
 */
export type Rent = $Result.DefaultSelection<Prisma.$RentPayload>
/**
 * Model Newsletter
 * 
 */
export type Newsletter = $Result.DefaultSelection<Prisma.$NewsletterPayload>
/**
 * Model WeekDayRange
 * 
 */
export type WeekDayRange = $Result.DefaultSelection<Prisma.$WeekDayRangePayload>
/**
 * Model WeekDay
 * 
 */
export type WeekDay = $Result.DefaultSelection<Prisma.$WeekDayPayload>
/**
 * Model ReferralCode
 * 
 */
export type ReferralCode = $Result.DefaultSelection<Prisma.$ReferralCodePayload>
/**
 * Model RentalToken
 * 
 */
export type RentalToken = $Result.DefaultSelection<Prisma.$RentalTokenPayload>
/**
 * Model Reward
 * 
 */
export type Reward = $Result.DefaultSelection<Prisma.$RewardPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TaskType: {
  REFERRAL_REWARD: 'REFERRAL_REWARD'
};

export type TaskType = (typeof TaskType)[keyof typeof TaskType]

}

export type TaskType = $Enums.TaskType

export const TaskType: typeof $Enums.TaskType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.property`: Exposes CRUD operations for the **Property** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Properties
    * const properties = await prisma.property.findMany()
    * ```
    */
  get property(): Prisma.PropertyDelegate<ExtArgs>;

  /**
   * `prisma.propertyStatus`: Exposes CRUD operations for the **PropertyStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PropertyStatuses
    * const propertyStatuses = await prisma.propertyStatus.findMany()
    * ```
    */
  get propertyStatus(): Prisma.PropertyStatusDelegate<ExtArgs>;

  /**
   * `prisma.layer`: Exposes CRUD operations for the **Layer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Layers
    * const layers = await prisma.layer.findMany()
    * ```
    */
  get layer(): Prisma.LayerDelegate<ExtArgs>;

  /**
   * `prisma.vertexes`: Exposes CRUD operations for the **Vertexes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vertexes
    * const vertexes = await prisma.vertexes.findMany()
    * ```
    */
  get vertexes(): Prisma.VertexesDelegate<ExtArgs>;

  /**
   * `prisma.rent`: Exposes CRUD operations for the **Rent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rents
    * const rents = await prisma.rent.findMany()
    * ```
    */
  get rent(): Prisma.RentDelegate<ExtArgs>;

  /**
   * `prisma.newsletter`: Exposes CRUD operations for the **Newsletter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Newsletters
    * const newsletters = await prisma.newsletter.findMany()
    * ```
    */
  get newsletter(): Prisma.NewsletterDelegate<ExtArgs>;

  /**
   * `prisma.weekDayRange`: Exposes CRUD operations for the **WeekDayRange** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeekDayRanges
    * const weekDayRanges = await prisma.weekDayRange.findMany()
    * ```
    */
  get weekDayRange(): Prisma.WeekDayRangeDelegate<ExtArgs>;

  /**
   * `prisma.weekDay`: Exposes CRUD operations for the **WeekDay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeekDays
    * const weekDays = await prisma.weekDay.findMany()
    * ```
    */
  get weekDay(): Prisma.WeekDayDelegate<ExtArgs>;

  /**
   * `prisma.referralCode`: Exposes CRUD operations for the **ReferralCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReferralCodes
    * const referralCodes = await prisma.referralCode.findMany()
    * ```
    */
  get referralCode(): Prisma.ReferralCodeDelegate<ExtArgs>;

  /**
   * `prisma.rentalToken`: Exposes CRUD operations for the **RentalToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RentalTokens
    * const rentalTokens = await prisma.rentalToken.findMany()
    * ```
    */
  get rentalToken(): Prisma.RentalTokenDelegate<ExtArgs>;

  /**
   * `prisma.reward`: Exposes CRUD operations for the **Reward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rewards
    * const rewards = await prisma.reward.findMany()
    * ```
    */
  get reward(): Prisma.RewardDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.1
   * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Status: 'Status',
    Category: 'Category',
    Property: 'Property',
    PropertyStatus: 'PropertyStatus',
    Layer: 'Layer',
    Vertexes: 'Vertexes',
    Rent: 'Rent',
    Newsletter: 'Newsletter',
    WeekDayRange: 'WeekDayRange',
    WeekDay: 'WeekDay',
    ReferralCode: 'ReferralCode',
    RentalToken: 'RentalToken',
    Reward: 'Reward'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'status' | 'category' | 'property' | 'propertyStatus' | 'layer' | 'vertexes' | 'rent' | 'newsletter' | 'weekDayRange' | 'weekDay' | 'referralCode' | 'rentalToken' | 'reward'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Status: {
        payload: Prisma.$StatusPayload<ExtArgs>
        fields: Prisma.StatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findFirst: {
            args: Prisma.StatusFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findMany: {
            args: Prisma.StatusFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          create: {
            args: Prisma.StatusCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          createMany: {
            args: Prisma.StatusCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StatusCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          delete: {
            args: Prisma.StatusDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          update: {
            args: Prisma.StatusUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          deleteMany: {
            args: Prisma.StatusDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatusUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatusUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          aggregate: {
            args: Prisma.StatusAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStatus>
          }
          groupBy: {
            args: Prisma.StatusGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusCountArgs<ExtArgs>,
            result: $Utils.Optional<StatusCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Property: {
        payload: Prisma.$PropertyPayload<ExtArgs>
        fields: Prisma.PropertyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PropertyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PropertyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          findFirst: {
            args: Prisma.PropertyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PropertyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          findMany: {
            args: Prisma.PropertyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>[]
          }
          create: {
            args: Prisma.PropertyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          createMany: {
            args: Prisma.PropertyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PropertyCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>[]
          }
          delete: {
            args: Prisma.PropertyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          update: {
            args: Prisma.PropertyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          deleteMany: {
            args: Prisma.PropertyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PropertyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PropertyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          aggregate: {
            args: Prisma.PropertyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProperty>
          }
          groupBy: {
            args: Prisma.PropertyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PropertyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PropertyCountArgs<ExtArgs>,
            result: $Utils.Optional<PropertyCountAggregateOutputType> | number
          }
        }
      }
      PropertyStatus: {
        payload: Prisma.$PropertyStatusPayload<ExtArgs>
        fields: Prisma.PropertyStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PropertyStatusFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PropertyStatusFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyStatusPayload>
          }
          findFirst: {
            args: Prisma.PropertyStatusFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PropertyStatusFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyStatusPayload>
          }
          findMany: {
            args: Prisma.PropertyStatusFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyStatusPayload>[]
          }
          create: {
            args: Prisma.PropertyStatusCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyStatusPayload>
          }
          createMany: {
            args: Prisma.PropertyStatusCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PropertyStatusCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyStatusPayload>[]
          }
          delete: {
            args: Prisma.PropertyStatusDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyStatusPayload>
          }
          update: {
            args: Prisma.PropertyStatusUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyStatusPayload>
          }
          deleteMany: {
            args: Prisma.PropertyStatusDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PropertyStatusUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PropertyStatusUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyStatusPayload>
          }
          aggregate: {
            args: Prisma.PropertyStatusAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePropertyStatus>
          }
          groupBy: {
            args: Prisma.PropertyStatusGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PropertyStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.PropertyStatusCountArgs<ExtArgs>,
            result: $Utils.Optional<PropertyStatusCountAggregateOutputType> | number
          }
        }
      }
      Layer: {
        payload: Prisma.$LayerPayload<ExtArgs>
        fields: Prisma.LayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LayerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LayerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayerPayload>
          }
          findFirst: {
            args: Prisma.LayerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LayerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayerPayload>
          }
          findMany: {
            args: Prisma.LayerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayerPayload>[]
          }
          create: {
            args: Prisma.LayerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayerPayload>
          }
          createMany: {
            args: Prisma.LayerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LayerCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayerPayload>[]
          }
          delete: {
            args: Prisma.LayerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayerPayload>
          }
          update: {
            args: Prisma.LayerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayerPayload>
          }
          deleteMany: {
            args: Prisma.LayerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LayerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LayerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayerPayload>
          }
          aggregate: {
            args: Prisma.LayerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLayer>
          }
          groupBy: {
            args: Prisma.LayerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.LayerCountArgs<ExtArgs>,
            result: $Utils.Optional<LayerCountAggregateOutputType> | number
          }
        }
      }
      Vertexes: {
        payload: Prisma.$VertexesPayload<ExtArgs>
        fields: Prisma.VertexesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VertexesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VertexesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VertexesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VertexesPayload>
          }
          findFirst: {
            args: Prisma.VertexesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VertexesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VertexesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VertexesPayload>
          }
          findMany: {
            args: Prisma.VertexesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VertexesPayload>[]
          }
          create: {
            args: Prisma.VertexesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VertexesPayload>
          }
          createMany: {
            args: Prisma.VertexesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VertexesCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VertexesPayload>[]
          }
          delete: {
            args: Prisma.VertexesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VertexesPayload>
          }
          update: {
            args: Prisma.VertexesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VertexesPayload>
          }
          deleteMany: {
            args: Prisma.VertexesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VertexesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VertexesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VertexesPayload>
          }
          aggregate: {
            args: Prisma.VertexesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVertexes>
          }
          groupBy: {
            args: Prisma.VertexesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VertexesGroupByOutputType>[]
          }
          count: {
            args: Prisma.VertexesCountArgs<ExtArgs>,
            result: $Utils.Optional<VertexesCountAggregateOutputType> | number
          }
        }
      }
      Rent: {
        payload: Prisma.$RentPayload<ExtArgs>
        fields: Prisma.RentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentPayload>
          }
          findFirst: {
            args: Prisma.RentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentPayload>
          }
          findMany: {
            args: Prisma.RentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentPayload>[]
          }
          create: {
            args: Prisma.RentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentPayload>
          }
          createMany: {
            args: Prisma.RentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RentCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentPayload>[]
          }
          delete: {
            args: Prisma.RentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentPayload>
          }
          update: {
            args: Prisma.RentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentPayload>
          }
          deleteMany: {
            args: Prisma.RentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentPayload>
          }
          aggregate: {
            args: Prisma.RentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRent>
          }
          groupBy: {
            args: Prisma.RentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RentGroupByOutputType>[]
          }
          count: {
            args: Prisma.RentCountArgs<ExtArgs>,
            result: $Utils.Optional<RentCountAggregateOutputType> | number
          }
        }
      }
      Newsletter: {
        payload: Prisma.$NewsletterPayload<ExtArgs>
        fields: Prisma.NewsletterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewsletterFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewsletterFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          findFirst: {
            args: Prisma.NewsletterFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewsletterFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          findMany: {
            args: Prisma.NewsletterFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>[]
          }
          create: {
            args: Prisma.NewsletterCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          createMany: {
            args: Prisma.NewsletterCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NewsletterCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>[]
          }
          delete: {
            args: Prisma.NewsletterDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          update: {
            args: Prisma.NewsletterUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          deleteMany: {
            args: Prisma.NewsletterDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NewsletterUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NewsletterUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          aggregate: {
            args: Prisma.NewsletterAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNewsletter>
          }
          groupBy: {
            args: Prisma.NewsletterGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NewsletterGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewsletterCountArgs<ExtArgs>,
            result: $Utils.Optional<NewsletterCountAggregateOutputType> | number
          }
        }
      }
      WeekDayRange: {
        payload: Prisma.$WeekDayRangePayload<ExtArgs>
        fields: Prisma.WeekDayRangeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeekDayRangeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayRangePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeekDayRangeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayRangePayload>
          }
          findFirst: {
            args: Prisma.WeekDayRangeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayRangePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeekDayRangeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayRangePayload>
          }
          findMany: {
            args: Prisma.WeekDayRangeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayRangePayload>[]
          }
          create: {
            args: Prisma.WeekDayRangeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayRangePayload>
          }
          createMany: {
            args: Prisma.WeekDayRangeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeekDayRangeCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayRangePayload>[]
          }
          delete: {
            args: Prisma.WeekDayRangeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayRangePayload>
          }
          update: {
            args: Prisma.WeekDayRangeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayRangePayload>
          }
          deleteMany: {
            args: Prisma.WeekDayRangeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WeekDayRangeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WeekDayRangeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayRangePayload>
          }
          aggregate: {
            args: Prisma.WeekDayRangeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWeekDayRange>
          }
          groupBy: {
            args: Prisma.WeekDayRangeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WeekDayRangeGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeekDayRangeCountArgs<ExtArgs>,
            result: $Utils.Optional<WeekDayRangeCountAggregateOutputType> | number
          }
        }
      }
      WeekDay: {
        payload: Prisma.$WeekDayPayload<ExtArgs>
        fields: Prisma.WeekDayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeekDayFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeekDayFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayPayload>
          }
          findFirst: {
            args: Prisma.WeekDayFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeekDayFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayPayload>
          }
          findMany: {
            args: Prisma.WeekDayFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayPayload>[]
          }
          create: {
            args: Prisma.WeekDayCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayPayload>
          }
          createMany: {
            args: Prisma.WeekDayCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeekDayCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayPayload>[]
          }
          delete: {
            args: Prisma.WeekDayDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayPayload>
          }
          update: {
            args: Prisma.WeekDayUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayPayload>
          }
          deleteMany: {
            args: Prisma.WeekDayDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WeekDayUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WeekDayUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeekDayPayload>
          }
          aggregate: {
            args: Prisma.WeekDayAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWeekDay>
          }
          groupBy: {
            args: Prisma.WeekDayGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WeekDayGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeekDayCountArgs<ExtArgs>,
            result: $Utils.Optional<WeekDayCountAggregateOutputType> | number
          }
        }
      }
      ReferralCode: {
        payload: Prisma.$ReferralCodePayload<ExtArgs>
        fields: Prisma.ReferralCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferralCodeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferralCodeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          findFirst: {
            args: Prisma.ReferralCodeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferralCodeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          findMany: {
            args: Prisma.ReferralCodeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>[]
          }
          create: {
            args: Prisma.ReferralCodeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          createMany: {
            args: Prisma.ReferralCodeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferralCodeCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>[]
          }
          delete: {
            args: Prisma.ReferralCodeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          update: {
            args: Prisma.ReferralCodeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          deleteMany: {
            args: Prisma.ReferralCodeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReferralCodeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReferralCodeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          aggregate: {
            args: Prisma.ReferralCodeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReferralCode>
          }
          groupBy: {
            args: Prisma.ReferralCodeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReferralCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferralCodeCountArgs<ExtArgs>,
            result: $Utils.Optional<ReferralCodeCountAggregateOutputType> | number
          }
        }
      }
      RentalToken: {
        payload: Prisma.$RentalTokenPayload<ExtArgs>
        fields: Prisma.RentalTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RentalTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RentalTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalTokenPayload>
          }
          findFirst: {
            args: Prisma.RentalTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RentalTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalTokenPayload>
          }
          findMany: {
            args: Prisma.RentalTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalTokenPayload>[]
          }
          create: {
            args: Prisma.RentalTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalTokenPayload>
          }
          createMany: {
            args: Prisma.RentalTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RentalTokenCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalTokenPayload>[]
          }
          delete: {
            args: Prisma.RentalTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalTokenPayload>
          }
          update: {
            args: Prisma.RentalTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalTokenPayload>
          }
          deleteMany: {
            args: Prisma.RentalTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RentalTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RentalTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalTokenPayload>
          }
          aggregate: {
            args: Prisma.RentalTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRentalToken>
          }
          groupBy: {
            args: Prisma.RentalTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RentalTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RentalTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<RentalTokenCountAggregateOutputType> | number
          }
        }
      }
      Reward: {
        payload: Prisma.$RewardPayload<ExtArgs>
        fields: Prisma.RewardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RewardFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RewardFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          findFirst: {
            args: Prisma.RewardFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RewardFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          findMany: {
            args: Prisma.RewardFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>[]
          }
          create: {
            args: Prisma.RewardCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          createMany: {
            args: Prisma.RewardCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RewardCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>[]
          }
          delete: {
            args: Prisma.RewardDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          update: {
            args: Prisma.RewardUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          deleteMany: {
            args: Prisma.RewardDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RewardUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RewardUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          aggregate: {
            args: Prisma.RewardAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReward>
          }
          groupBy: {
            args: Prisma.RewardGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RewardGroupByOutputType>[]
          }
          count: {
            args: Prisma.RewardCountArgs<ExtArgs>,
            result: $Utils.Optional<RewardCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    properties: number
    Rent: number
    Reward: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    properties?: boolean | UserCountOutputTypeCountPropertiesArgs
    Rent?: boolean | UserCountOutputTypeCountRentArgs
    Reward?: boolean | UserCountOutputTypeCountRewardArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPropertiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRewardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardWhereInput
  }


  /**
   * Count Type StatusCountOutputType
   */

  export type StatusCountOutputType = {
    users: number
  }

  export type StatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | StatusCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCountOutputType
     */
    select?: StatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    users: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | CategoryCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type PropertyCountOutputType
   */

  export type PropertyCountOutputType = {
    weekDayRanges: number
    layers: number
    vertexes: number
  }

  export type PropertyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weekDayRanges?: boolean | PropertyCountOutputTypeCountWeekDayRangesArgs
    layers?: boolean | PropertyCountOutputTypeCountLayersArgs
    vertexes?: boolean | PropertyCountOutputTypeCountVertexesArgs
  }

  // Custom InputTypes
  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyCountOutputType
     */
    select?: PropertyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountWeekDayRangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeekDayRangeWhereInput
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountLayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LayerWhereInput
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountVertexesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VertexesWhereInput
  }


  /**
   * Count Type PropertyStatusCountOutputType
   */

  export type PropertyStatusCountOutputType = {
    properties: number
  }

  export type PropertyStatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    properties?: boolean | PropertyStatusCountOutputTypeCountPropertiesArgs
  }

  // Custom InputTypes
  /**
   * PropertyStatusCountOutputType without action
   */
  export type PropertyStatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatusCountOutputType
     */
    select?: PropertyStatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PropertyStatusCountOutputType without action
   */
  export type PropertyStatusCountOutputTypeCountPropertiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyWhereInput
  }


  /**
   * Count Type LayerCountOutputType
   */

  export type LayerCountOutputType = {
    rents: number
  }

  export type LayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rents?: boolean | LayerCountOutputTypeCountRentsArgs
  }

  // Custom InputTypes
  /**
   * LayerCountOutputType without action
   */
  export type LayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayerCountOutputType
     */
    select?: LayerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LayerCountOutputType without action
   */
  export type LayerCountOutputTypeCountRentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentWhereInput
  }


  /**
   * Count Type WeekDayCountOutputType
   */

  export type WeekDayCountOutputType = {
    weekDayRanges: number
  }

  export type WeekDayCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weekDayRanges?: boolean | WeekDayCountOutputTypeCountWeekDayRangesArgs
  }

  // Custom InputTypes
  /**
   * WeekDayCountOutputType without action
   */
  export type WeekDayCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayCountOutputType
     */
    select?: WeekDayCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WeekDayCountOutputType without action
   */
  export type WeekDayCountOutputTypeCountWeekDayRangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeekDayRangeWhereInput
  }


  /**
   * Count Type ReferralCodeCountOutputType
   */

  export type ReferralCodeCountOutputType = {
    usedBy: number
  }

  export type ReferralCodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usedBy?: boolean | ReferralCodeCountOutputTypeCountUsedByArgs
  }

  // Custom InputTypes
  /**
   * ReferralCodeCountOutputType without action
   */
  export type ReferralCodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCodeCountOutputType
     */
    select?: ReferralCodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReferralCodeCountOutputType without action
   */
  export type ReferralCodeCountOutputTypeCountUsedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    totalPoint: number | null
    KYCStatusId: number | null
    usedReferralCodeId: number | null
    ownedReferralCodeId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    totalPoint: number | null
    KYCStatusId: number | null
    usedReferralCodeId: number | null
    ownedReferralCodeId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    username: string | null
    password: string | null
    name: string | null
    email: string | null
    blockchainAddress: string | null
    isAdmin: boolean | null
    newsletter: boolean | null
    categoryId: number | null
    phoneNumber: string | null
    totalPoint: number | null
    KYCStatusId: number | null
    isActive: boolean | null
    usedReferralCodeId: number | null
    ownedReferralCodeId: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    username: string | null
    password: string | null
    name: string | null
    email: string | null
    blockchainAddress: string | null
    isAdmin: boolean | null
    newsletter: boolean | null
    categoryId: number | null
    phoneNumber: string | null
    totalPoint: number | null
    KYCStatusId: number | null
    isActive: boolean | null
    usedReferralCodeId: number | null
    ownedReferralCodeId: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updateAt: number
    username: number
    password: number
    name: number
    email: number
    blockchainAddress: number
    isAdmin: number
    newsletter: number
    categoryId: number
    phoneNumber: number
    totalPoint: number
    KYCStatusId: number
    isActive: number
    usedReferralCodeId: number
    ownedReferralCodeId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    categoryId?: true
    totalPoint?: true
    KYCStatusId?: true
    usedReferralCodeId?: true
    ownedReferralCodeId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    categoryId?: true
    totalPoint?: true
    KYCStatusId?: true
    usedReferralCodeId?: true
    ownedReferralCodeId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    username?: true
    password?: true
    name?: true
    email?: true
    blockchainAddress?: true
    isAdmin?: true
    newsletter?: true
    categoryId?: true
    phoneNumber?: true
    totalPoint?: true
    KYCStatusId?: true
    isActive?: true
    usedReferralCodeId?: true
    ownedReferralCodeId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    username?: true
    password?: true
    name?: true
    email?: true
    blockchainAddress?: true
    isAdmin?: true
    newsletter?: true
    categoryId?: true
    phoneNumber?: true
    totalPoint?: true
    KYCStatusId?: true
    isActive?: true
    usedReferralCodeId?: true
    ownedReferralCodeId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    username?: true
    password?: true
    name?: true
    email?: true
    blockchainAddress?: true
    isAdmin?: true
    newsletter?: true
    categoryId?: true
    phoneNumber?: true
    totalPoint?: true
    KYCStatusId?: true
    isActive?: true
    usedReferralCodeId?: true
    ownedReferralCodeId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    updateAt: Date
    username: string | null
    password: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin: boolean
    newsletter: boolean
    categoryId: number
    phoneNumber: string
    totalPoint: number
    KYCStatusId: number
    isActive: boolean
    usedReferralCodeId: number | null
    ownedReferralCodeId: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    email?: boolean
    blockchainAddress?: boolean
    isAdmin?: boolean
    newsletter?: boolean
    categoryId?: boolean
    phoneNumber?: boolean
    totalPoint?: boolean
    KYCStatusId?: boolean
    isActive?: boolean
    usedReferralCodeId?: boolean
    ownedReferralCodeId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    KYCStatus?: boolean | StatusDefaultArgs<ExtArgs>
    properties?: boolean | User$propertiesArgs<ExtArgs>
    Rent?: boolean | User$RentArgs<ExtArgs>
    usedReferralCode?: boolean | User$usedReferralCodeArgs<ExtArgs>
    ownedReferralCode?: boolean | User$ownedReferralCodeArgs<ExtArgs>
    Reward?: boolean | User$RewardArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    email?: boolean
    blockchainAddress?: boolean
    isAdmin?: boolean
    newsletter?: boolean
    categoryId?: boolean
    phoneNumber?: boolean
    totalPoint?: boolean
    KYCStatusId?: boolean
    isActive?: boolean
    usedReferralCodeId?: boolean
    ownedReferralCodeId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    KYCStatus?: boolean | StatusDefaultArgs<ExtArgs>
    usedReferralCode?: boolean | User$usedReferralCodeArgs<ExtArgs>
    ownedReferralCode?: boolean | User$ownedReferralCodeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    email?: boolean
    blockchainAddress?: boolean
    isAdmin?: boolean
    newsletter?: boolean
    categoryId?: boolean
    phoneNumber?: boolean
    totalPoint?: boolean
    KYCStatusId?: boolean
    isActive?: boolean
    usedReferralCodeId?: boolean
    ownedReferralCodeId?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    KYCStatus?: boolean | StatusDefaultArgs<ExtArgs>
    properties?: boolean | User$propertiesArgs<ExtArgs>
    Rent?: boolean | User$RentArgs<ExtArgs>
    usedReferralCode?: boolean | User$usedReferralCodeArgs<ExtArgs>
    ownedReferralCode?: boolean | User$ownedReferralCodeArgs<ExtArgs>
    Reward?: boolean | User$RewardArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    KYCStatus?: boolean | StatusDefaultArgs<ExtArgs>
    usedReferralCode?: boolean | User$usedReferralCodeArgs<ExtArgs>
    ownedReferralCode?: boolean | User$ownedReferralCodeArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      KYCStatus: Prisma.$StatusPayload<ExtArgs>
      properties: Prisma.$PropertyPayload<ExtArgs>[]
      Rent: Prisma.$RentPayload<ExtArgs>[]
      usedReferralCode: Prisma.$ReferralCodePayload<ExtArgs> | null
      ownedReferralCode: Prisma.$ReferralCodePayload<ExtArgs> | null
      Reward: Prisma.$RewardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updateAt: Date
      username: string | null
      password: string | null
      name: string
      email: string
      blockchainAddress: string
      isAdmin: boolean
      newsletter: boolean
      categoryId: number
      phoneNumber: string
      totalPoint: number
      KYCStatusId: number
      isActive: boolean
      usedReferralCodeId: number | null
      ownedReferralCodeId: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    KYCStatus<T extends StatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusDefaultArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    properties<T extends User$propertiesArgs<ExtArgs> = {}>(args?: Subset<T, User$propertiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findMany'> | Null>;

    Rent<T extends User$RentArgs<ExtArgs> = {}>(args?: Subset<T, User$RentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'findMany'> | Null>;

    usedReferralCode<T extends User$usedReferralCodeArgs<ExtArgs> = {}>(args?: Subset<T, User$usedReferralCodeArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    ownedReferralCode<T extends User$ownedReferralCodeArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedReferralCodeArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Reward<T extends User$RewardArgs<ExtArgs> = {}>(args?: Subset<T, User$RewardArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updateAt: FieldRef<"User", 'DateTime'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly blockchainAddress: FieldRef<"User", 'String'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly newsletter: FieldRef<"User", 'Boolean'>
    readonly categoryId: FieldRef<"User", 'Int'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly totalPoint: FieldRef<"User", 'Float'>
    readonly KYCStatusId: FieldRef<"User", 'Int'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly usedReferralCodeId: FieldRef<"User", 'Int'>
    readonly ownedReferralCodeId: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.properties
   */
  export type User$propertiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    where?: PropertyWhereInput
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    cursor?: PropertyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * User.Rent
   */
  export type User$RentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
    where?: RentWhereInput
    orderBy?: RentOrderByWithRelationInput | RentOrderByWithRelationInput[]
    cursor?: RentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentScalarFieldEnum | RentScalarFieldEnum[]
  }

  /**
   * User.usedReferralCode
   */
  export type User$usedReferralCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    where?: ReferralCodeWhereInput
  }

  /**
   * User.ownedReferralCode
   */
  export type User$ownedReferralCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    where?: ReferralCodeWhereInput
  }

  /**
   * User.Reward
   */
  export type User$RewardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    where?: RewardWhereInput
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    cursor?: RewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Status
   */

  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    id: number | null
  }

  export type StatusSumAggregateOutputType = {
    id: number | null
  }

  export type StatusMinAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type StatusMaxAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type StatusCountAggregateOutputType = {
    id: number
    type: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    id?: true
  }

  export type StatusSumAggregateInputType = {
    id?: true
  }

  export type StatusMinAggregateInputType = {
    id?: true
    type?: true
  }

  export type StatusMaxAggregateInputType = {
    id?: true
    type?: true
  }

  export type StatusCountAggregateInputType = {
    id?: true
    type?: true
    _all?: true
  }

  export type StatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Status to aggregate.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusWhereInput
    orderBy?: StatusOrderByWithAggregationInput | StatusOrderByWithAggregationInput[]
    by: StatusScalarFieldEnum[] | StatusScalarFieldEnum
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }

  export type StatusGroupByOutputType = {
    id: number
    type: string
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    users?: boolean | Status$usersArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["status"]>

  export type StatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
  }, ExtArgs["result"]["status"]>

  export type StatusSelectScalar = {
    id?: boolean
    type?: boolean
  }

  export type StatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Status$usersArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StatusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Status"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
    }, ExtArgs["result"]["status"]>
    composites: {}
  }

  type StatusGetPayload<S extends boolean | null | undefined | StatusDefaultArgs> = $Result.GetResult<Prisma.$StatusPayload, S>

  type StatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatusFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StatusCountAggregateInputType | true
    }

  export interface StatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Status'], meta: { name: 'Status' } }
    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatusFindUniqueArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Status that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindFirstArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Status that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatusFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatusFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
    **/
    create<T extends StatusCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusCreateArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Statuses.
     * @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     * @example
     * // Create many Statuses
     * const status = await prisma.status.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends StatusCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Statuses and returns the data saved in the database.
     * @param {StatusCreateManyAndReturnArgs} args - Arguments to create many Statuses.
     * @example
     * // Create many Statuses
     * const status = await prisma.status.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Statuses and only return the `id`
     * const statusWithIdOnly = await prisma.status.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends StatusCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
    **/
    delete<T extends StatusDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatusDeleteArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpdateArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
    **/
    upsert<T extends StatusUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpsertArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Status model
   */
  readonly fields: StatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Status$usersArgs<ExtArgs> = {}>(args?: Subset<T, Status$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Status model
   */ 
  interface StatusFieldRefs {
    readonly id: FieldRef<"Status", 'Int'>
    readonly type: FieldRef<"Status", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Status findUnique
   */
  export type StatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status findUniqueOrThrow
   */
  export type StatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status findFirst
   */
  export type StatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status findFirstOrThrow
   */
  export type StatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status findMany
   */
  export type StatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Statuses to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status create
   */
  export type StatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to create a Status.
     */
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }

  /**
   * Status createMany
   */
  export type StatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statuses.
     */
    data: StatusCreateManyInput | StatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Status createManyAndReturn
   */
  export type StatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Statuses.
     */
    data: StatusCreateManyInput | StatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Status update
   */
  export type StatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to update a Status.
     */
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statuses.
     */
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     */
    where?: StatusWhereInput
  }

  /**
   * Status upsert
   */
  export type StatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The filter to search for the Status to update in case it exists.
     */
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     */
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }

  /**
   * Status delete
   */
  export type StatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter which Status to delete.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statuses to delete
     */
    where?: StatusWhereInput
  }

  /**
   * Status.users
   */
  export type Status$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Status without action
   */
  export type StatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    type: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    type?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    type?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    type?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    type: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    users?: boolean | Category$usersArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    type?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Category$usersArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Category$usersArgs<ExtArgs> = {}>(args?: Subset<T, Category$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly type: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.users
   */
  export type Category$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Property
   */

  export type AggregateProperty = {
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  export type PropertyAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
    latitude: number | null
    longitude: number | null
    propertyStatusId: number | null
  }

  export type PropertySumAggregateOutputType = {
    id: number | null
    ownerId: number | null
    latitude: number | null
    longitude: number | null
    propertyStatusId: number | null
  }

  export type PropertyMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    title: string | null
    transitFee: string | null
    address: string | null
    timezone: string | null
    hasLandingDeck: boolean | null
    hasChargingStation: boolean | null
    hasStorageHub: boolean | null
    isFixedTransitFee: boolean | null
    isRentableAirspace: boolean | null
    ownerId: number | null
    noFlyZone: boolean | null
    latitude: number | null
    longitude: number | null
    propertyStatusId: number | null
    isActive: boolean | null
  }

  export type PropertyMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    title: string | null
    transitFee: string | null
    address: string | null
    timezone: string | null
    hasLandingDeck: boolean | null
    hasChargingStation: boolean | null
    hasStorageHub: boolean | null
    isFixedTransitFee: boolean | null
    isRentableAirspace: boolean | null
    ownerId: number | null
    noFlyZone: boolean | null
    latitude: number | null
    longitude: number | null
    propertyStatusId: number | null
    isActive: boolean | null
  }

  export type PropertyCountAggregateOutputType = {
    id: number
    createdAt: number
    updateAt: number
    title: number
    transitFee: number
    address: number
    timezone: number
    hasLandingDeck: number
    hasChargingStation: number
    hasStorageHub: number
    isFixedTransitFee: number
    isRentableAirspace: number
    ownerId: number
    noFlyZone: number
    latitude: number
    longitude: number
    propertyStatusId: number
    isActive: number
    _all: number
  }


  export type PropertyAvgAggregateInputType = {
    id?: true
    ownerId?: true
    latitude?: true
    longitude?: true
    propertyStatusId?: true
  }

  export type PropertySumAggregateInputType = {
    id?: true
    ownerId?: true
    latitude?: true
    longitude?: true
    propertyStatusId?: true
  }

  export type PropertyMinAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    title?: true
    transitFee?: true
    address?: true
    timezone?: true
    hasLandingDeck?: true
    hasChargingStation?: true
    hasStorageHub?: true
    isFixedTransitFee?: true
    isRentableAirspace?: true
    ownerId?: true
    noFlyZone?: true
    latitude?: true
    longitude?: true
    propertyStatusId?: true
    isActive?: true
  }

  export type PropertyMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    title?: true
    transitFee?: true
    address?: true
    timezone?: true
    hasLandingDeck?: true
    hasChargingStation?: true
    hasStorageHub?: true
    isFixedTransitFee?: true
    isRentableAirspace?: true
    ownerId?: true
    noFlyZone?: true
    latitude?: true
    longitude?: true
    propertyStatusId?: true
    isActive?: true
  }

  export type PropertyCountAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    title?: true
    transitFee?: true
    address?: true
    timezone?: true
    hasLandingDeck?: true
    hasChargingStation?: true
    hasStorageHub?: true
    isFixedTransitFee?: true
    isRentableAirspace?: true
    ownerId?: true
    noFlyZone?: true
    latitude?: true
    longitude?: true
    propertyStatusId?: true
    isActive?: true
    _all?: true
  }

  export type PropertyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Property to aggregate.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Properties
    **/
    _count?: true | PropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyMaxAggregateInputType
  }

  export type GetPropertyAggregateType<T extends PropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProperty[P]>
      : GetScalarType<T[P], AggregateProperty[P]>
  }




  export type PropertyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyWhereInput
    orderBy?: PropertyOrderByWithAggregationInput | PropertyOrderByWithAggregationInput[]
    by: PropertyScalarFieldEnum[] | PropertyScalarFieldEnum
    having?: PropertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyCountAggregateInputType | true
    _avg?: PropertyAvgAggregateInputType
    _sum?: PropertySumAggregateInputType
    _min?: PropertyMinAggregateInputType
    _max?: PropertyMaxAggregateInputType
  }

  export type PropertyGroupByOutputType = {
    id: number
    createdAt: Date
    updateAt: Date
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    ownerId: number
    noFlyZone: boolean
    latitude: number
    longitude: number
    propertyStatusId: number
    isActive: boolean
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  type GetPropertyGroupByPayload<T extends PropertyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyGroupByOutputType[P]>
        }
      >
    >


  export type PropertySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    title?: boolean
    transitFee?: boolean
    address?: boolean
    timezone?: boolean
    hasLandingDeck?: boolean
    hasChargingStation?: boolean
    hasStorageHub?: boolean
    isFixedTransitFee?: boolean
    isRentableAirspace?: boolean
    ownerId?: boolean
    noFlyZone?: boolean
    latitude?: boolean
    longitude?: boolean
    propertyStatusId?: boolean
    isActive?: boolean
    weekDayRanges?: boolean | Property$weekDayRangesArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    layers?: boolean | Property$layersArgs<ExtArgs>
    vertexes?: boolean | Property$vertexesArgs<ExtArgs>
    propertyStatus?: boolean | PropertyStatusDefaultArgs<ExtArgs>
    _count?: boolean | PropertyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["property"]>

  export type PropertySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    title?: boolean
    transitFee?: boolean
    address?: boolean
    timezone?: boolean
    hasLandingDeck?: boolean
    hasChargingStation?: boolean
    hasStorageHub?: boolean
    isFixedTransitFee?: boolean
    isRentableAirspace?: boolean
    ownerId?: boolean
    noFlyZone?: boolean
    latitude?: boolean
    longitude?: boolean
    propertyStatusId?: boolean
    isActive?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    propertyStatus?: boolean | PropertyStatusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["property"]>

  export type PropertySelectScalar = {
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    title?: boolean
    transitFee?: boolean
    address?: boolean
    timezone?: boolean
    hasLandingDeck?: boolean
    hasChargingStation?: boolean
    hasStorageHub?: boolean
    isFixedTransitFee?: boolean
    isRentableAirspace?: boolean
    ownerId?: boolean
    noFlyZone?: boolean
    latitude?: boolean
    longitude?: boolean
    propertyStatusId?: boolean
    isActive?: boolean
  }

  export type PropertyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weekDayRanges?: boolean | Property$weekDayRangesArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    layers?: boolean | Property$layersArgs<ExtArgs>
    vertexes?: boolean | Property$vertexesArgs<ExtArgs>
    propertyStatus?: boolean | PropertyStatusDefaultArgs<ExtArgs>
    _count?: boolean | PropertyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PropertyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    propertyStatus?: boolean | PropertyStatusDefaultArgs<ExtArgs>
  }

  export type $PropertyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Property"
    objects: {
      weekDayRanges: Prisma.$WeekDayRangePayload<ExtArgs>[]
      owner: Prisma.$UserPayload<ExtArgs>
      layers: Prisma.$LayerPayload<ExtArgs>[]
      vertexes: Prisma.$VertexesPayload<ExtArgs>[]
      propertyStatus: Prisma.$PropertyStatusPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updateAt: Date
      title: string
      transitFee: string
      address: string
      timezone: string
      hasLandingDeck: boolean
      hasChargingStation: boolean
      hasStorageHub: boolean
      isFixedTransitFee: boolean
      isRentableAirspace: boolean
      ownerId: number
      noFlyZone: boolean
      latitude: number
      longitude: number
      propertyStatusId: number
      isActive: boolean
    }, ExtArgs["result"]["property"]>
    composites: {}
  }

  type PropertyGetPayload<S extends boolean | null | undefined | PropertyDefaultArgs> = $Result.GetResult<Prisma.$PropertyPayload, S>

  type PropertyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PropertyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PropertyCountAggregateInputType | true
    }

  export interface PropertyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Property'], meta: { name: 'Property' } }
    /**
     * Find zero or one Property that matches the filter.
     * @param {PropertyFindUniqueArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PropertyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyFindUniqueArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Property that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PropertyFindUniqueOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PropertyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Property that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PropertyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindFirstArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Property that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PropertyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Properties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Properties
     * const properties = await prisma.property.findMany()
     * 
     * // Get first 10 Properties
     * const properties = await prisma.property.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyWithIdOnly = await prisma.property.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PropertyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Property.
     * @param {PropertyCreateArgs} args - Arguments to create a Property.
     * @example
     * // Create one Property
     * const Property = await prisma.property.create({
     *   data: {
     *     // ... data to create a Property
     *   }
     * })
     * 
    **/
    create<T extends PropertyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyCreateArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Properties.
     * @param {PropertyCreateManyArgs} args - Arguments to create many Properties.
     * @example
     * // Create many Properties
     * const property = await prisma.property.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PropertyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Properties and returns the data saved in the database.
     * @param {PropertyCreateManyAndReturnArgs} args - Arguments to create many Properties.
     * @example
     * // Create many Properties
     * const property = await prisma.property.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Properties and only return the `id`
     * const propertyWithIdOnly = await prisma.property.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PropertyCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Property.
     * @param {PropertyDeleteArgs} args - Arguments to delete one Property.
     * @example
     * // Delete one Property
     * const Property = await prisma.property.delete({
     *   where: {
     *     // ... filter to delete one Property
     *   }
     * })
     * 
    **/
    delete<T extends PropertyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyDeleteArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Property.
     * @param {PropertyUpdateArgs} args - Arguments to update one Property.
     * @example
     * // Update one Property
     * const property = await prisma.property.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PropertyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyUpdateArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Properties.
     * @param {PropertyDeleteManyArgs} args - Arguments to filter Properties to delete.
     * @example
     * // Delete a few Properties
     * const { count } = await prisma.property.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PropertyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Properties
     * const property = await prisma.property.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PropertyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Property.
     * @param {PropertyUpsertArgs} args - Arguments to update or create a Property.
     * @example
     * // Update or create a Property
     * const property = await prisma.property.upsert({
     *   create: {
     *     // ... data to create a Property
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Property we want to update
     *   }
     * })
    **/
    upsert<T extends PropertyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyUpsertArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyCountArgs} args - Arguments to filter Properties to count.
     * @example
     * // Count the number of Properties
     * const count = await prisma.property.count({
     *   where: {
     *     // ... the filter for the Properties we want to count
     *   }
     * })
    **/
    count<T extends PropertyCountArgs>(
      args?: Subset<T, PropertyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyAggregateArgs>(args: Subset<T, PropertyAggregateArgs>): Prisma.PrismaPromise<GetPropertyAggregateType<T>>

    /**
     * Group by Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyGroupByArgs['orderBy'] }
        : { orderBy?: PropertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Property model
   */
  readonly fields: PropertyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Property.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PropertyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    weekDayRanges<T extends Property$weekDayRangesArgs<ExtArgs> = {}>(args?: Subset<T, Property$weekDayRangesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'findMany'> | Null>;

    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    layers<T extends Property$layersArgs<ExtArgs> = {}>(args?: Subset<T, Property$layersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'findMany'> | Null>;

    vertexes<T extends Property$vertexesArgs<ExtArgs> = {}>(args?: Subset<T, Property$vertexesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VertexesPayload<ExtArgs>, T, 'findMany'> | Null>;

    propertyStatus<T extends PropertyStatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PropertyStatusDefaultArgs<ExtArgs>>): Prisma__PropertyStatusClient<$Result.GetResult<Prisma.$PropertyStatusPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Property model
   */ 
  interface PropertyFieldRefs {
    readonly id: FieldRef<"Property", 'Int'>
    readonly createdAt: FieldRef<"Property", 'DateTime'>
    readonly updateAt: FieldRef<"Property", 'DateTime'>
    readonly title: FieldRef<"Property", 'String'>
    readonly transitFee: FieldRef<"Property", 'String'>
    readonly address: FieldRef<"Property", 'String'>
    readonly timezone: FieldRef<"Property", 'String'>
    readonly hasLandingDeck: FieldRef<"Property", 'Boolean'>
    readonly hasChargingStation: FieldRef<"Property", 'Boolean'>
    readonly hasStorageHub: FieldRef<"Property", 'Boolean'>
    readonly isFixedTransitFee: FieldRef<"Property", 'Boolean'>
    readonly isRentableAirspace: FieldRef<"Property", 'Boolean'>
    readonly ownerId: FieldRef<"Property", 'Int'>
    readonly noFlyZone: FieldRef<"Property", 'Boolean'>
    readonly latitude: FieldRef<"Property", 'Float'>
    readonly longitude: FieldRef<"Property", 'Float'>
    readonly propertyStatusId: FieldRef<"Property", 'Int'>
    readonly isActive: FieldRef<"Property", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Property findUnique
   */
  export type PropertyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property findUniqueOrThrow
   */
  export type PropertyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property findFirst
   */
  export type PropertyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property findFirstOrThrow
   */
  export type PropertyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property findMany
   */
  export type PropertyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Properties to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property create
   */
  export type PropertyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The data needed to create a Property.
     */
    data: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
  }

  /**
   * Property createMany
   */
  export type PropertyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Properties.
     */
    data: PropertyCreateManyInput | PropertyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Property createManyAndReturn
   */
  export type PropertyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Properties.
     */
    data: PropertyCreateManyInput | PropertyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Property update
   */
  export type PropertyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The data needed to update a Property.
     */
    data: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
    /**
     * Choose, which Property to update.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property updateMany
   */
  export type PropertyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Properties.
     */
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyInput>
    /**
     * Filter which Properties to update
     */
    where?: PropertyWhereInput
  }

  /**
   * Property upsert
   */
  export type PropertyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The filter to search for the Property to update in case it exists.
     */
    where: PropertyWhereUniqueInput
    /**
     * In case the Property found by the `where` argument doesn't exist, create a new Property with this data.
     */
    create: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
    /**
     * In case the Property was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
  }

  /**
   * Property delete
   */
  export type PropertyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter which Property to delete.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property deleteMany
   */
  export type PropertyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Properties to delete
     */
    where?: PropertyWhereInput
  }

  /**
   * Property.weekDayRanges
   */
  export type Property$weekDayRangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
    where?: WeekDayRangeWhereInput
    orderBy?: WeekDayRangeOrderByWithRelationInput | WeekDayRangeOrderByWithRelationInput[]
    cursor?: WeekDayRangeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeekDayRangeScalarFieldEnum | WeekDayRangeScalarFieldEnum[]
  }

  /**
   * Property.layers
   */
  export type Property$layersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerInclude<ExtArgs> | null
    where?: LayerWhereInput
    orderBy?: LayerOrderByWithRelationInput | LayerOrderByWithRelationInput[]
    cursor?: LayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LayerScalarFieldEnum | LayerScalarFieldEnum[]
  }

  /**
   * Property.vertexes
   */
  export type Property$vertexesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesInclude<ExtArgs> | null
    where?: VertexesWhereInput
    orderBy?: VertexesOrderByWithRelationInput | VertexesOrderByWithRelationInput[]
    cursor?: VertexesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VertexesScalarFieldEnum | VertexesScalarFieldEnum[]
  }

  /**
   * Property without action
   */
  export type PropertyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
  }


  /**
   * Model PropertyStatus
   */

  export type AggregatePropertyStatus = {
    _count: PropertyStatusCountAggregateOutputType | null
    _avg: PropertyStatusAvgAggregateOutputType | null
    _sum: PropertyStatusSumAggregateOutputType | null
    _min: PropertyStatusMinAggregateOutputType | null
    _max: PropertyStatusMaxAggregateOutputType | null
  }

  export type PropertyStatusAvgAggregateOutputType = {
    id: number | null
  }

  export type PropertyStatusSumAggregateOutputType = {
    id: number | null
  }

  export type PropertyStatusMinAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type PropertyStatusMaxAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type PropertyStatusCountAggregateOutputType = {
    id: number
    type: number
    _all: number
  }


  export type PropertyStatusAvgAggregateInputType = {
    id?: true
  }

  export type PropertyStatusSumAggregateInputType = {
    id?: true
  }

  export type PropertyStatusMinAggregateInputType = {
    id?: true
    type?: true
  }

  export type PropertyStatusMaxAggregateInputType = {
    id?: true
    type?: true
  }

  export type PropertyStatusCountAggregateInputType = {
    id?: true
    type?: true
    _all?: true
  }

  export type PropertyStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PropertyStatus to aggregate.
     */
    where?: PropertyStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyStatuses to fetch.
     */
    orderBy?: PropertyStatusOrderByWithRelationInput | PropertyStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropertyStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PropertyStatuses
    **/
    _count?: true | PropertyStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertyStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyStatusMaxAggregateInputType
  }

  export type GetPropertyStatusAggregateType<T extends PropertyStatusAggregateArgs> = {
        [P in keyof T & keyof AggregatePropertyStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePropertyStatus[P]>
      : GetScalarType<T[P], AggregatePropertyStatus[P]>
  }




  export type PropertyStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyStatusWhereInput
    orderBy?: PropertyStatusOrderByWithAggregationInput | PropertyStatusOrderByWithAggregationInput[]
    by: PropertyStatusScalarFieldEnum[] | PropertyStatusScalarFieldEnum
    having?: PropertyStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyStatusCountAggregateInputType | true
    _avg?: PropertyStatusAvgAggregateInputType
    _sum?: PropertyStatusSumAggregateInputType
    _min?: PropertyStatusMinAggregateInputType
    _max?: PropertyStatusMaxAggregateInputType
  }

  export type PropertyStatusGroupByOutputType = {
    id: number
    type: string
    _count: PropertyStatusCountAggregateOutputType | null
    _avg: PropertyStatusAvgAggregateOutputType | null
    _sum: PropertyStatusSumAggregateOutputType | null
    _min: PropertyStatusMinAggregateOutputType | null
    _max: PropertyStatusMaxAggregateOutputType | null
  }

  type GetPropertyStatusGroupByPayload<T extends PropertyStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropertyStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyStatusGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyStatusGroupByOutputType[P]>
        }
      >
    >


  export type PropertyStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    properties?: boolean | PropertyStatus$propertiesArgs<ExtArgs>
    _count?: boolean | PropertyStatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["propertyStatus"]>

  export type PropertyStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
  }, ExtArgs["result"]["propertyStatus"]>

  export type PropertyStatusSelectScalar = {
    id?: boolean
    type?: boolean
  }

  export type PropertyStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    properties?: boolean | PropertyStatus$propertiesArgs<ExtArgs>
    _count?: boolean | PropertyStatusCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PropertyStatusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PropertyStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PropertyStatus"
    objects: {
      properties: Prisma.$PropertyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
    }, ExtArgs["result"]["propertyStatus"]>
    composites: {}
  }

  type PropertyStatusGetPayload<S extends boolean | null | undefined | PropertyStatusDefaultArgs> = $Result.GetResult<Prisma.$PropertyStatusPayload, S>

  type PropertyStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PropertyStatusFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PropertyStatusCountAggregateInputType | true
    }

  export interface PropertyStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PropertyStatus'], meta: { name: 'PropertyStatus' } }
    /**
     * Find zero or one PropertyStatus that matches the filter.
     * @param {PropertyStatusFindUniqueArgs} args - Arguments to find a PropertyStatus
     * @example
     * // Get one PropertyStatus
     * const propertyStatus = await prisma.propertyStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PropertyStatusFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyStatusFindUniqueArgs<ExtArgs>>
    ): Prisma__PropertyStatusClient<$Result.GetResult<Prisma.$PropertyStatusPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PropertyStatus that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PropertyStatusFindUniqueOrThrowArgs} args - Arguments to find a PropertyStatus
     * @example
     * // Get one PropertyStatus
     * const propertyStatus = await prisma.propertyStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PropertyStatusFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyStatusFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PropertyStatusClient<$Result.GetResult<Prisma.$PropertyStatusPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PropertyStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyStatusFindFirstArgs} args - Arguments to find a PropertyStatus
     * @example
     * // Get one PropertyStatus
     * const propertyStatus = await prisma.propertyStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PropertyStatusFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyStatusFindFirstArgs<ExtArgs>>
    ): Prisma__PropertyStatusClient<$Result.GetResult<Prisma.$PropertyStatusPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PropertyStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyStatusFindFirstOrThrowArgs} args - Arguments to find a PropertyStatus
     * @example
     * // Get one PropertyStatus
     * const propertyStatus = await prisma.propertyStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PropertyStatusFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyStatusFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PropertyStatusClient<$Result.GetResult<Prisma.$PropertyStatusPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PropertyStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PropertyStatuses
     * const propertyStatuses = await prisma.propertyStatus.findMany()
     * 
     * // Get first 10 PropertyStatuses
     * const propertyStatuses = await prisma.propertyStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyStatusWithIdOnly = await prisma.propertyStatus.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PropertyStatusFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyStatusFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyStatusPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PropertyStatus.
     * @param {PropertyStatusCreateArgs} args - Arguments to create a PropertyStatus.
     * @example
     * // Create one PropertyStatus
     * const PropertyStatus = await prisma.propertyStatus.create({
     *   data: {
     *     // ... data to create a PropertyStatus
     *   }
     * })
     * 
    **/
    create<T extends PropertyStatusCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyStatusCreateArgs<ExtArgs>>
    ): Prisma__PropertyStatusClient<$Result.GetResult<Prisma.$PropertyStatusPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PropertyStatuses.
     * @param {PropertyStatusCreateManyArgs} args - Arguments to create many PropertyStatuses.
     * @example
     * // Create many PropertyStatuses
     * const propertyStatus = await prisma.propertyStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PropertyStatusCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyStatusCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PropertyStatuses and returns the data saved in the database.
     * @param {PropertyStatusCreateManyAndReturnArgs} args - Arguments to create many PropertyStatuses.
     * @example
     * // Create many PropertyStatuses
     * const propertyStatus = await prisma.propertyStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PropertyStatuses and only return the `id`
     * const propertyStatusWithIdOnly = await prisma.propertyStatus.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PropertyStatusCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyStatusCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyStatusPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a PropertyStatus.
     * @param {PropertyStatusDeleteArgs} args - Arguments to delete one PropertyStatus.
     * @example
     * // Delete one PropertyStatus
     * const PropertyStatus = await prisma.propertyStatus.delete({
     *   where: {
     *     // ... filter to delete one PropertyStatus
     *   }
     * })
     * 
    **/
    delete<T extends PropertyStatusDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyStatusDeleteArgs<ExtArgs>>
    ): Prisma__PropertyStatusClient<$Result.GetResult<Prisma.$PropertyStatusPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PropertyStatus.
     * @param {PropertyStatusUpdateArgs} args - Arguments to update one PropertyStatus.
     * @example
     * // Update one PropertyStatus
     * const propertyStatus = await prisma.propertyStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PropertyStatusUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyStatusUpdateArgs<ExtArgs>>
    ): Prisma__PropertyStatusClient<$Result.GetResult<Prisma.$PropertyStatusPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PropertyStatuses.
     * @param {PropertyStatusDeleteManyArgs} args - Arguments to filter PropertyStatuses to delete.
     * @example
     * // Delete a few PropertyStatuses
     * const { count } = await prisma.propertyStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PropertyStatusDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyStatusDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PropertyStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PropertyStatuses
     * const propertyStatus = await prisma.propertyStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PropertyStatusUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyStatusUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PropertyStatus.
     * @param {PropertyStatusUpsertArgs} args - Arguments to update or create a PropertyStatus.
     * @example
     * // Update or create a PropertyStatus
     * const propertyStatus = await prisma.propertyStatus.upsert({
     *   create: {
     *     // ... data to create a PropertyStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PropertyStatus we want to update
     *   }
     * })
    **/
    upsert<T extends PropertyStatusUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyStatusUpsertArgs<ExtArgs>>
    ): Prisma__PropertyStatusClient<$Result.GetResult<Prisma.$PropertyStatusPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PropertyStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyStatusCountArgs} args - Arguments to filter PropertyStatuses to count.
     * @example
     * // Count the number of PropertyStatuses
     * const count = await prisma.propertyStatus.count({
     *   where: {
     *     // ... the filter for the PropertyStatuses we want to count
     *   }
     * })
    **/
    count<T extends PropertyStatusCountArgs>(
      args?: Subset<T, PropertyStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PropertyStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyStatusAggregateArgs>(args: Subset<T, PropertyStatusAggregateArgs>): Prisma.PrismaPromise<GetPropertyStatusAggregateType<T>>

    /**
     * Group by PropertyStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyStatusGroupByArgs['orderBy'] }
        : { orderBy?: PropertyStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PropertyStatus model
   */
  readonly fields: PropertyStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PropertyStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PropertyStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    properties<T extends PropertyStatus$propertiesArgs<ExtArgs> = {}>(args?: Subset<T, PropertyStatus$propertiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PropertyStatus model
   */ 
  interface PropertyStatusFieldRefs {
    readonly id: FieldRef<"PropertyStatus", 'Int'>
    readonly type: FieldRef<"PropertyStatus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PropertyStatus findUnique
   */
  export type PropertyStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatus
     */
    select?: PropertyStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyStatusInclude<ExtArgs> | null
    /**
     * Filter, which PropertyStatus to fetch.
     */
    where: PropertyStatusWhereUniqueInput
  }

  /**
   * PropertyStatus findUniqueOrThrow
   */
  export type PropertyStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatus
     */
    select?: PropertyStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyStatusInclude<ExtArgs> | null
    /**
     * Filter, which PropertyStatus to fetch.
     */
    where: PropertyStatusWhereUniqueInput
  }

  /**
   * PropertyStatus findFirst
   */
  export type PropertyStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatus
     */
    select?: PropertyStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyStatusInclude<ExtArgs> | null
    /**
     * Filter, which PropertyStatus to fetch.
     */
    where?: PropertyStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyStatuses to fetch.
     */
    orderBy?: PropertyStatusOrderByWithRelationInput | PropertyStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PropertyStatuses.
     */
    cursor?: PropertyStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PropertyStatuses.
     */
    distinct?: PropertyStatusScalarFieldEnum | PropertyStatusScalarFieldEnum[]
  }

  /**
   * PropertyStatus findFirstOrThrow
   */
  export type PropertyStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatus
     */
    select?: PropertyStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyStatusInclude<ExtArgs> | null
    /**
     * Filter, which PropertyStatus to fetch.
     */
    where?: PropertyStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyStatuses to fetch.
     */
    orderBy?: PropertyStatusOrderByWithRelationInput | PropertyStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PropertyStatuses.
     */
    cursor?: PropertyStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PropertyStatuses.
     */
    distinct?: PropertyStatusScalarFieldEnum | PropertyStatusScalarFieldEnum[]
  }

  /**
   * PropertyStatus findMany
   */
  export type PropertyStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatus
     */
    select?: PropertyStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyStatusInclude<ExtArgs> | null
    /**
     * Filter, which PropertyStatuses to fetch.
     */
    where?: PropertyStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyStatuses to fetch.
     */
    orderBy?: PropertyStatusOrderByWithRelationInput | PropertyStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PropertyStatuses.
     */
    cursor?: PropertyStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyStatuses.
     */
    skip?: number
    distinct?: PropertyStatusScalarFieldEnum | PropertyStatusScalarFieldEnum[]
  }

  /**
   * PropertyStatus create
   */
  export type PropertyStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatus
     */
    select?: PropertyStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a PropertyStatus.
     */
    data: XOR<PropertyStatusCreateInput, PropertyStatusUncheckedCreateInput>
  }

  /**
   * PropertyStatus createMany
   */
  export type PropertyStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PropertyStatuses.
     */
    data: PropertyStatusCreateManyInput | PropertyStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PropertyStatus createManyAndReturn
   */
  export type PropertyStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatus
     */
    select?: PropertyStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PropertyStatuses.
     */
    data: PropertyStatusCreateManyInput | PropertyStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PropertyStatus update
   */
  export type PropertyStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatus
     */
    select?: PropertyStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a PropertyStatus.
     */
    data: XOR<PropertyStatusUpdateInput, PropertyStatusUncheckedUpdateInput>
    /**
     * Choose, which PropertyStatus to update.
     */
    where: PropertyStatusWhereUniqueInput
  }

  /**
   * PropertyStatus updateMany
   */
  export type PropertyStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PropertyStatuses.
     */
    data: XOR<PropertyStatusUpdateManyMutationInput, PropertyStatusUncheckedUpdateManyInput>
    /**
     * Filter which PropertyStatuses to update
     */
    where?: PropertyStatusWhereInput
  }

  /**
   * PropertyStatus upsert
   */
  export type PropertyStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatus
     */
    select?: PropertyStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the PropertyStatus to update in case it exists.
     */
    where: PropertyStatusWhereUniqueInput
    /**
     * In case the PropertyStatus found by the `where` argument doesn't exist, create a new PropertyStatus with this data.
     */
    create: XOR<PropertyStatusCreateInput, PropertyStatusUncheckedCreateInput>
    /**
     * In case the PropertyStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropertyStatusUpdateInput, PropertyStatusUncheckedUpdateInput>
  }

  /**
   * PropertyStatus delete
   */
  export type PropertyStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatus
     */
    select?: PropertyStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyStatusInclude<ExtArgs> | null
    /**
     * Filter which PropertyStatus to delete.
     */
    where: PropertyStatusWhereUniqueInput
  }

  /**
   * PropertyStatus deleteMany
   */
  export type PropertyStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PropertyStatuses to delete
     */
    where?: PropertyStatusWhereInput
  }

  /**
   * PropertyStatus.properties
   */
  export type PropertyStatus$propertiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    where?: PropertyWhereInput
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    cursor?: PropertyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * PropertyStatus without action
   */
  export type PropertyStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyStatus
     */
    select?: PropertyStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyStatusInclude<ExtArgs> | null
  }


  /**
   * Model Layer
   */

  export type AggregateLayer = {
    _count: LayerCountAggregateOutputType | null
    _avg: LayerAvgAggregateOutputType | null
    _sum: LayerSumAggregateOutputType | null
    _min: LayerMinAggregateOutputType | null
    _max: LayerMaxAggregateOutputType | null
  }

  export type LayerAvgAggregateOutputType = {
    id: number | null
    propertyId: number | null
  }

  export type LayerSumAggregateOutputType = {
    id: number | null
    propertyId: number | null
  }

  export type LayerMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    tokenId: string | null
    propertyId: number | null
  }

  export type LayerMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    tokenId: string | null
    propertyId: number | null
  }

  export type LayerCountAggregateOutputType = {
    id: number
    createdAt: number
    updateAt: number
    tokenId: number
    propertyId: number
    _all: number
  }


  export type LayerAvgAggregateInputType = {
    id?: true
    propertyId?: true
  }

  export type LayerSumAggregateInputType = {
    id?: true
    propertyId?: true
  }

  export type LayerMinAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    tokenId?: true
    propertyId?: true
  }

  export type LayerMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    tokenId?: true
    propertyId?: true
  }

  export type LayerCountAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    tokenId?: true
    propertyId?: true
    _all?: true
  }

  export type LayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Layer to aggregate.
     */
    where?: LayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Layers to fetch.
     */
    orderBy?: LayerOrderByWithRelationInput | LayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Layers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Layers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Layers
    **/
    _count?: true | LayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LayerMaxAggregateInputType
  }

  export type GetLayerAggregateType<T extends LayerAggregateArgs> = {
        [P in keyof T & keyof AggregateLayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLayer[P]>
      : GetScalarType<T[P], AggregateLayer[P]>
  }




  export type LayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LayerWhereInput
    orderBy?: LayerOrderByWithAggregationInput | LayerOrderByWithAggregationInput[]
    by: LayerScalarFieldEnum[] | LayerScalarFieldEnum
    having?: LayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LayerCountAggregateInputType | true
    _avg?: LayerAvgAggregateInputType
    _sum?: LayerSumAggregateInputType
    _min?: LayerMinAggregateInputType
    _max?: LayerMaxAggregateInputType
  }

  export type LayerGroupByOutputType = {
    id: number
    createdAt: Date
    updateAt: Date
    tokenId: string
    propertyId: number
    _count: LayerCountAggregateOutputType | null
    _avg: LayerAvgAggregateOutputType | null
    _sum: LayerSumAggregateOutputType | null
    _min: LayerMinAggregateOutputType | null
    _max: LayerMaxAggregateOutputType | null
  }

  type GetLayerGroupByPayload<T extends LayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LayerGroupByOutputType[P]>
            : GetScalarType<T[P], LayerGroupByOutputType[P]>
        }
      >
    >


  export type LayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    tokenId?: boolean
    propertyId?: boolean
    property?: boolean | PropertyDefaultArgs<ExtArgs>
    rents?: boolean | Layer$rentsArgs<ExtArgs>
    _count?: boolean | LayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["layer"]>

  export type LayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    tokenId?: boolean
    propertyId?: boolean
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["layer"]>

  export type LayerSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    tokenId?: boolean
    propertyId?: boolean
  }

  export type LayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    property?: boolean | PropertyDefaultArgs<ExtArgs>
    rents?: boolean | Layer$rentsArgs<ExtArgs>
    _count?: boolean | LayerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }

  export type $LayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Layer"
    objects: {
      property: Prisma.$PropertyPayload<ExtArgs>
      rents: Prisma.$RentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updateAt: Date
      tokenId: string
      propertyId: number
    }, ExtArgs["result"]["layer"]>
    composites: {}
  }

  type LayerGetPayload<S extends boolean | null | undefined | LayerDefaultArgs> = $Result.GetResult<Prisma.$LayerPayload, S>

  type LayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LayerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LayerCountAggregateInputType | true
    }

  export interface LayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Layer'], meta: { name: 'Layer' } }
    /**
     * Find zero or one Layer that matches the filter.
     * @param {LayerFindUniqueArgs} args - Arguments to find a Layer
     * @example
     * // Get one Layer
     * const layer = await prisma.layer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LayerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LayerFindUniqueArgs<ExtArgs>>
    ): Prisma__LayerClient<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Layer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LayerFindUniqueOrThrowArgs} args - Arguments to find a Layer
     * @example
     * // Get one Layer
     * const layer = await prisma.layer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LayerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LayerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LayerClient<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Layer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayerFindFirstArgs} args - Arguments to find a Layer
     * @example
     * // Get one Layer
     * const layer = await prisma.layer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LayerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LayerFindFirstArgs<ExtArgs>>
    ): Prisma__LayerClient<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Layer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayerFindFirstOrThrowArgs} args - Arguments to find a Layer
     * @example
     * // Get one Layer
     * const layer = await prisma.layer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LayerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LayerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LayerClient<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Layers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Layers
     * const layers = await prisma.layer.findMany()
     * 
     * // Get first 10 Layers
     * const layers = await prisma.layer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const layerWithIdOnly = await prisma.layer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LayerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LayerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Layer.
     * @param {LayerCreateArgs} args - Arguments to create a Layer.
     * @example
     * // Create one Layer
     * const Layer = await prisma.layer.create({
     *   data: {
     *     // ... data to create a Layer
     *   }
     * })
     * 
    **/
    create<T extends LayerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LayerCreateArgs<ExtArgs>>
    ): Prisma__LayerClient<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Layers.
     * @param {LayerCreateManyArgs} args - Arguments to create many Layers.
     * @example
     * // Create many Layers
     * const layer = await prisma.layer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends LayerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LayerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Layers and returns the data saved in the database.
     * @param {LayerCreateManyAndReturnArgs} args - Arguments to create many Layers.
     * @example
     * // Create many Layers
     * const layer = await prisma.layer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Layers and only return the `id`
     * const layerWithIdOnly = await prisma.layer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends LayerCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, LayerCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Layer.
     * @param {LayerDeleteArgs} args - Arguments to delete one Layer.
     * @example
     * // Delete one Layer
     * const Layer = await prisma.layer.delete({
     *   where: {
     *     // ... filter to delete one Layer
     *   }
     * })
     * 
    **/
    delete<T extends LayerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LayerDeleteArgs<ExtArgs>>
    ): Prisma__LayerClient<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Layer.
     * @param {LayerUpdateArgs} args - Arguments to update one Layer.
     * @example
     * // Update one Layer
     * const layer = await prisma.layer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LayerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LayerUpdateArgs<ExtArgs>>
    ): Prisma__LayerClient<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Layers.
     * @param {LayerDeleteManyArgs} args - Arguments to filter Layers to delete.
     * @example
     * // Delete a few Layers
     * const { count } = await prisma.layer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LayerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LayerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Layers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Layers
     * const layer = await prisma.layer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LayerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LayerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Layer.
     * @param {LayerUpsertArgs} args - Arguments to update or create a Layer.
     * @example
     * // Update or create a Layer
     * const layer = await prisma.layer.upsert({
     *   create: {
     *     // ... data to create a Layer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Layer we want to update
     *   }
     * })
    **/
    upsert<T extends LayerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LayerUpsertArgs<ExtArgs>>
    ): Prisma__LayerClient<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Layers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayerCountArgs} args - Arguments to filter Layers to count.
     * @example
     * // Count the number of Layers
     * const count = await prisma.layer.count({
     *   where: {
     *     // ... the filter for the Layers we want to count
     *   }
     * })
    **/
    count<T extends LayerCountArgs>(
      args?: Subset<T, LayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Layer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LayerAggregateArgs>(args: Subset<T, LayerAggregateArgs>): Prisma.PrismaPromise<GetLayerAggregateType<T>>

    /**
     * Group by Layer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LayerGroupByArgs['orderBy'] }
        : { orderBy?: LayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Layer model
   */
  readonly fields: LayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Layer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    property<T extends PropertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PropertyDefaultArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    rents<T extends Layer$rentsArgs<ExtArgs> = {}>(args?: Subset<T, Layer$rentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Layer model
   */ 
  interface LayerFieldRefs {
    readonly id: FieldRef<"Layer", 'Int'>
    readonly createdAt: FieldRef<"Layer", 'DateTime'>
    readonly updateAt: FieldRef<"Layer", 'DateTime'>
    readonly tokenId: FieldRef<"Layer", 'String'>
    readonly propertyId: FieldRef<"Layer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Layer findUnique
   */
  export type LayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerInclude<ExtArgs> | null
    /**
     * Filter, which Layer to fetch.
     */
    where: LayerWhereUniqueInput
  }

  /**
   * Layer findUniqueOrThrow
   */
  export type LayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerInclude<ExtArgs> | null
    /**
     * Filter, which Layer to fetch.
     */
    where: LayerWhereUniqueInput
  }

  /**
   * Layer findFirst
   */
  export type LayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerInclude<ExtArgs> | null
    /**
     * Filter, which Layer to fetch.
     */
    where?: LayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Layers to fetch.
     */
    orderBy?: LayerOrderByWithRelationInput | LayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Layers.
     */
    cursor?: LayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Layers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Layers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Layers.
     */
    distinct?: LayerScalarFieldEnum | LayerScalarFieldEnum[]
  }

  /**
   * Layer findFirstOrThrow
   */
  export type LayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerInclude<ExtArgs> | null
    /**
     * Filter, which Layer to fetch.
     */
    where?: LayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Layers to fetch.
     */
    orderBy?: LayerOrderByWithRelationInput | LayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Layers.
     */
    cursor?: LayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Layers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Layers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Layers.
     */
    distinct?: LayerScalarFieldEnum | LayerScalarFieldEnum[]
  }

  /**
   * Layer findMany
   */
  export type LayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerInclude<ExtArgs> | null
    /**
     * Filter, which Layers to fetch.
     */
    where?: LayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Layers to fetch.
     */
    orderBy?: LayerOrderByWithRelationInput | LayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Layers.
     */
    cursor?: LayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Layers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Layers.
     */
    skip?: number
    distinct?: LayerScalarFieldEnum | LayerScalarFieldEnum[]
  }

  /**
   * Layer create
   */
  export type LayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Layer.
     */
    data: XOR<LayerCreateInput, LayerUncheckedCreateInput>
  }

  /**
   * Layer createMany
   */
  export type LayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Layers.
     */
    data: LayerCreateManyInput | LayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Layer createManyAndReturn
   */
  export type LayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Layers.
     */
    data: LayerCreateManyInput | LayerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Layer update
   */
  export type LayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Layer.
     */
    data: XOR<LayerUpdateInput, LayerUncheckedUpdateInput>
    /**
     * Choose, which Layer to update.
     */
    where: LayerWhereUniqueInput
  }

  /**
   * Layer updateMany
   */
  export type LayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Layers.
     */
    data: XOR<LayerUpdateManyMutationInput, LayerUncheckedUpdateManyInput>
    /**
     * Filter which Layers to update
     */
    where?: LayerWhereInput
  }

  /**
   * Layer upsert
   */
  export type LayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Layer to update in case it exists.
     */
    where: LayerWhereUniqueInput
    /**
     * In case the Layer found by the `where` argument doesn't exist, create a new Layer with this data.
     */
    create: XOR<LayerCreateInput, LayerUncheckedCreateInput>
    /**
     * In case the Layer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LayerUpdateInput, LayerUncheckedUpdateInput>
  }

  /**
   * Layer delete
   */
  export type LayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerInclude<ExtArgs> | null
    /**
     * Filter which Layer to delete.
     */
    where: LayerWhereUniqueInput
  }

  /**
   * Layer deleteMany
   */
  export type LayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Layers to delete
     */
    where?: LayerWhereInput
  }

  /**
   * Layer.rents
   */
  export type Layer$rentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
    where?: RentWhereInput
    orderBy?: RentOrderByWithRelationInput | RentOrderByWithRelationInput[]
    cursor?: RentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentScalarFieldEnum | RentScalarFieldEnum[]
  }

  /**
   * Layer without action
   */
  export type LayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Layer
     */
    select?: LayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LayerInclude<ExtArgs> | null
  }


  /**
   * Model Vertexes
   */

  export type AggregateVertexes = {
    _count: VertexesCountAggregateOutputType | null
    _avg: VertexesAvgAggregateOutputType | null
    _sum: VertexesSumAggregateOutputType | null
    _min: VertexesMinAggregateOutputType | null
    _max: VertexesMaxAggregateOutputType | null
  }

  export type VertexesAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    propertyId: number | null
  }

  export type VertexesSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    propertyId: number | null
  }

  export type VertexesMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    latitude: number | null
    longitude: number | null
    propertyId: number | null
  }

  export type VertexesMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    latitude: number | null
    longitude: number | null
    propertyId: number | null
  }

  export type VertexesCountAggregateOutputType = {
    id: number
    createdAt: number
    updateAt: number
    latitude: number
    longitude: number
    propertyId: number
    _all: number
  }


  export type VertexesAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    propertyId?: true
  }

  export type VertexesSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    propertyId?: true
  }

  export type VertexesMinAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    latitude?: true
    longitude?: true
    propertyId?: true
  }

  export type VertexesMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    latitude?: true
    longitude?: true
    propertyId?: true
  }

  export type VertexesCountAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    latitude?: true
    longitude?: true
    propertyId?: true
    _all?: true
  }

  export type VertexesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vertexes to aggregate.
     */
    where?: VertexesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vertexes to fetch.
     */
    orderBy?: VertexesOrderByWithRelationInput | VertexesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VertexesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vertexes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vertexes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vertexes
    **/
    _count?: true | VertexesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VertexesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VertexesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VertexesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VertexesMaxAggregateInputType
  }

  export type GetVertexesAggregateType<T extends VertexesAggregateArgs> = {
        [P in keyof T & keyof AggregateVertexes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVertexes[P]>
      : GetScalarType<T[P], AggregateVertexes[P]>
  }




  export type VertexesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VertexesWhereInput
    orderBy?: VertexesOrderByWithAggregationInput | VertexesOrderByWithAggregationInput[]
    by: VertexesScalarFieldEnum[] | VertexesScalarFieldEnum
    having?: VertexesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VertexesCountAggregateInputType | true
    _avg?: VertexesAvgAggregateInputType
    _sum?: VertexesSumAggregateInputType
    _min?: VertexesMinAggregateInputType
    _max?: VertexesMaxAggregateInputType
  }

  export type VertexesGroupByOutputType = {
    id: number
    createdAt: Date
    updateAt: Date
    latitude: number
    longitude: number
    propertyId: number
    _count: VertexesCountAggregateOutputType | null
    _avg: VertexesAvgAggregateOutputType | null
    _sum: VertexesSumAggregateOutputType | null
    _min: VertexesMinAggregateOutputType | null
    _max: VertexesMaxAggregateOutputType | null
  }

  type GetVertexesGroupByPayload<T extends VertexesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VertexesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VertexesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VertexesGroupByOutputType[P]>
            : GetScalarType<T[P], VertexesGroupByOutputType[P]>
        }
      >
    >


  export type VertexesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    latitude?: boolean
    longitude?: boolean
    propertyId?: boolean
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vertexes"]>

  export type VertexesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    latitude?: boolean
    longitude?: boolean
    propertyId?: boolean
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vertexes"]>

  export type VertexesSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    latitude?: boolean
    longitude?: boolean
    propertyId?: boolean
  }

  export type VertexesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }
  export type VertexesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }

  export type $VertexesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vertexes"
    objects: {
      property: Prisma.$PropertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updateAt: Date
      latitude: number
      longitude: number
      propertyId: number
    }, ExtArgs["result"]["vertexes"]>
    composites: {}
  }

  type VertexesGetPayload<S extends boolean | null | undefined | VertexesDefaultArgs> = $Result.GetResult<Prisma.$VertexesPayload, S>

  type VertexesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VertexesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VertexesCountAggregateInputType | true
    }

  export interface VertexesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vertexes'], meta: { name: 'Vertexes' } }
    /**
     * Find zero or one Vertexes that matches the filter.
     * @param {VertexesFindUniqueArgs} args - Arguments to find a Vertexes
     * @example
     * // Get one Vertexes
     * const vertexes = await prisma.vertexes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VertexesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VertexesFindUniqueArgs<ExtArgs>>
    ): Prisma__VertexesClient<$Result.GetResult<Prisma.$VertexesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Vertexes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VertexesFindUniqueOrThrowArgs} args - Arguments to find a Vertexes
     * @example
     * // Get one Vertexes
     * const vertexes = await prisma.vertexes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VertexesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VertexesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VertexesClient<$Result.GetResult<Prisma.$VertexesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Vertexes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VertexesFindFirstArgs} args - Arguments to find a Vertexes
     * @example
     * // Get one Vertexes
     * const vertexes = await prisma.vertexes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VertexesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VertexesFindFirstArgs<ExtArgs>>
    ): Prisma__VertexesClient<$Result.GetResult<Prisma.$VertexesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Vertexes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VertexesFindFirstOrThrowArgs} args - Arguments to find a Vertexes
     * @example
     * // Get one Vertexes
     * const vertexes = await prisma.vertexes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VertexesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VertexesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VertexesClient<$Result.GetResult<Prisma.$VertexesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Vertexes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VertexesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vertexes
     * const vertexes = await prisma.vertexes.findMany()
     * 
     * // Get first 10 Vertexes
     * const vertexes = await prisma.vertexes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vertexesWithIdOnly = await prisma.vertexes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VertexesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VertexesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VertexesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Vertexes.
     * @param {VertexesCreateArgs} args - Arguments to create a Vertexes.
     * @example
     * // Create one Vertexes
     * const Vertexes = await prisma.vertexes.create({
     *   data: {
     *     // ... data to create a Vertexes
     *   }
     * })
     * 
    **/
    create<T extends VertexesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VertexesCreateArgs<ExtArgs>>
    ): Prisma__VertexesClient<$Result.GetResult<Prisma.$VertexesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Vertexes.
     * @param {VertexesCreateManyArgs} args - Arguments to create many Vertexes.
     * @example
     * // Create many Vertexes
     * const vertexes = await prisma.vertexes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends VertexesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VertexesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vertexes and returns the data saved in the database.
     * @param {VertexesCreateManyAndReturnArgs} args - Arguments to create many Vertexes.
     * @example
     * // Create many Vertexes
     * const vertexes = await prisma.vertexes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vertexes and only return the `id`
     * const vertexesWithIdOnly = await prisma.vertexes.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends VertexesCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, VertexesCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VertexesPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Vertexes.
     * @param {VertexesDeleteArgs} args - Arguments to delete one Vertexes.
     * @example
     * // Delete one Vertexes
     * const Vertexes = await prisma.vertexes.delete({
     *   where: {
     *     // ... filter to delete one Vertexes
     *   }
     * })
     * 
    **/
    delete<T extends VertexesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VertexesDeleteArgs<ExtArgs>>
    ): Prisma__VertexesClient<$Result.GetResult<Prisma.$VertexesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Vertexes.
     * @param {VertexesUpdateArgs} args - Arguments to update one Vertexes.
     * @example
     * // Update one Vertexes
     * const vertexes = await prisma.vertexes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VertexesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VertexesUpdateArgs<ExtArgs>>
    ): Prisma__VertexesClient<$Result.GetResult<Prisma.$VertexesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Vertexes.
     * @param {VertexesDeleteManyArgs} args - Arguments to filter Vertexes to delete.
     * @example
     * // Delete a few Vertexes
     * const { count } = await prisma.vertexes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VertexesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VertexesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vertexes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VertexesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vertexes
     * const vertexes = await prisma.vertexes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VertexesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VertexesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vertexes.
     * @param {VertexesUpsertArgs} args - Arguments to update or create a Vertexes.
     * @example
     * // Update or create a Vertexes
     * const vertexes = await prisma.vertexes.upsert({
     *   create: {
     *     // ... data to create a Vertexes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vertexes we want to update
     *   }
     * })
    **/
    upsert<T extends VertexesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VertexesUpsertArgs<ExtArgs>>
    ): Prisma__VertexesClient<$Result.GetResult<Prisma.$VertexesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Vertexes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VertexesCountArgs} args - Arguments to filter Vertexes to count.
     * @example
     * // Count the number of Vertexes
     * const count = await prisma.vertexes.count({
     *   where: {
     *     // ... the filter for the Vertexes we want to count
     *   }
     * })
    **/
    count<T extends VertexesCountArgs>(
      args?: Subset<T, VertexesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VertexesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vertexes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VertexesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VertexesAggregateArgs>(args: Subset<T, VertexesAggregateArgs>): Prisma.PrismaPromise<GetVertexesAggregateType<T>>

    /**
     * Group by Vertexes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VertexesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VertexesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VertexesGroupByArgs['orderBy'] }
        : { orderBy?: VertexesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VertexesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVertexesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vertexes model
   */
  readonly fields: VertexesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vertexes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VertexesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    property<T extends PropertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PropertyDefaultArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Vertexes model
   */ 
  interface VertexesFieldRefs {
    readonly id: FieldRef<"Vertexes", 'Int'>
    readonly createdAt: FieldRef<"Vertexes", 'DateTime'>
    readonly updateAt: FieldRef<"Vertexes", 'DateTime'>
    readonly latitude: FieldRef<"Vertexes", 'Float'>
    readonly longitude: FieldRef<"Vertexes", 'Float'>
    readonly propertyId: FieldRef<"Vertexes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Vertexes findUnique
   */
  export type VertexesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesInclude<ExtArgs> | null
    /**
     * Filter, which Vertexes to fetch.
     */
    where: VertexesWhereUniqueInput
  }

  /**
   * Vertexes findUniqueOrThrow
   */
  export type VertexesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesInclude<ExtArgs> | null
    /**
     * Filter, which Vertexes to fetch.
     */
    where: VertexesWhereUniqueInput
  }

  /**
   * Vertexes findFirst
   */
  export type VertexesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesInclude<ExtArgs> | null
    /**
     * Filter, which Vertexes to fetch.
     */
    where?: VertexesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vertexes to fetch.
     */
    orderBy?: VertexesOrderByWithRelationInput | VertexesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vertexes.
     */
    cursor?: VertexesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vertexes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vertexes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vertexes.
     */
    distinct?: VertexesScalarFieldEnum | VertexesScalarFieldEnum[]
  }

  /**
   * Vertexes findFirstOrThrow
   */
  export type VertexesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesInclude<ExtArgs> | null
    /**
     * Filter, which Vertexes to fetch.
     */
    where?: VertexesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vertexes to fetch.
     */
    orderBy?: VertexesOrderByWithRelationInput | VertexesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vertexes.
     */
    cursor?: VertexesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vertexes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vertexes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vertexes.
     */
    distinct?: VertexesScalarFieldEnum | VertexesScalarFieldEnum[]
  }

  /**
   * Vertexes findMany
   */
  export type VertexesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesInclude<ExtArgs> | null
    /**
     * Filter, which Vertexes to fetch.
     */
    where?: VertexesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vertexes to fetch.
     */
    orderBy?: VertexesOrderByWithRelationInput | VertexesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vertexes.
     */
    cursor?: VertexesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vertexes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vertexes.
     */
    skip?: number
    distinct?: VertexesScalarFieldEnum | VertexesScalarFieldEnum[]
  }

  /**
   * Vertexes create
   */
  export type VertexesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesInclude<ExtArgs> | null
    /**
     * The data needed to create a Vertexes.
     */
    data: XOR<VertexesCreateInput, VertexesUncheckedCreateInput>
  }

  /**
   * Vertexes createMany
   */
  export type VertexesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vertexes.
     */
    data: VertexesCreateManyInput | VertexesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vertexes createManyAndReturn
   */
  export type VertexesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Vertexes.
     */
    data: VertexesCreateManyInput | VertexesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vertexes update
   */
  export type VertexesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesInclude<ExtArgs> | null
    /**
     * The data needed to update a Vertexes.
     */
    data: XOR<VertexesUpdateInput, VertexesUncheckedUpdateInput>
    /**
     * Choose, which Vertexes to update.
     */
    where: VertexesWhereUniqueInput
  }

  /**
   * Vertexes updateMany
   */
  export type VertexesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vertexes.
     */
    data: XOR<VertexesUpdateManyMutationInput, VertexesUncheckedUpdateManyInput>
    /**
     * Filter which Vertexes to update
     */
    where?: VertexesWhereInput
  }

  /**
   * Vertexes upsert
   */
  export type VertexesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesInclude<ExtArgs> | null
    /**
     * The filter to search for the Vertexes to update in case it exists.
     */
    where: VertexesWhereUniqueInput
    /**
     * In case the Vertexes found by the `where` argument doesn't exist, create a new Vertexes with this data.
     */
    create: XOR<VertexesCreateInput, VertexesUncheckedCreateInput>
    /**
     * In case the Vertexes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VertexesUpdateInput, VertexesUncheckedUpdateInput>
  }

  /**
   * Vertexes delete
   */
  export type VertexesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesInclude<ExtArgs> | null
    /**
     * Filter which Vertexes to delete.
     */
    where: VertexesWhereUniqueInput
  }

  /**
   * Vertexes deleteMany
   */
  export type VertexesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vertexes to delete
     */
    where?: VertexesWhereInput
  }

  /**
   * Vertexes without action
   */
  export type VertexesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vertexes
     */
    select?: VertexesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VertexesInclude<ExtArgs> | null
  }


  /**
   * Model Rent
   */

  export type AggregateRent = {
    _count: RentCountAggregateOutputType | null
    _avg: RentAvgAggregateOutputType | null
    _sum: RentSumAggregateOutputType | null
    _min: RentMinAggregateOutputType | null
    _max: RentMaxAggregateOutputType | null
  }

  export type RentAvgAggregateOutputType = {
    id: number | null
    renterId: number | null
    layerId: number | null
  }

  export type RentSumAggregateOutputType = {
    id: number | null
    renterId: number | null
    layerId: number | null
  }

  export type RentMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    tokenId: string | null
    startTime: Date | null
    endTime: Date | null
    renterId: number | null
    layerId: number | null
    isActive: boolean | null
  }

  export type RentMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    tokenId: string | null
    startTime: Date | null
    endTime: Date | null
    renterId: number | null
    layerId: number | null
    isActive: boolean | null
  }

  export type RentCountAggregateOutputType = {
    id: number
    createdAt: number
    updateAt: number
    tokenId: number
    startTime: number
    endTime: number
    renterId: number
    layerId: number
    isActive: number
    _all: number
  }


  export type RentAvgAggregateInputType = {
    id?: true
    renterId?: true
    layerId?: true
  }

  export type RentSumAggregateInputType = {
    id?: true
    renterId?: true
    layerId?: true
  }

  export type RentMinAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    tokenId?: true
    startTime?: true
    endTime?: true
    renterId?: true
    layerId?: true
    isActive?: true
  }

  export type RentMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    tokenId?: true
    startTime?: true
    endTime?: true
    renterId?: true
    layerId?: true
    isActive?: true
  }

  export type RentCountAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    tokenId?: true
    startTime?: true
    endTime?: true
    renterId?: true
    layerId?: true
    isActive?: true
    _all?: true
  }

  export type RentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rent to aggregate.
     */
    where?: RentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rents to fetch.
     */
    orderBy?: RentOrderByWithRelationInput | RentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rents
    **/
    _count?: true | RentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RentMaxAggregateInputType
  }

  export type GetRentAggregateType<T extends RentAggregateArgs> = {
        [P in keyof T & keyof AggregateRent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRent[P]>
      : GetScalarType<T[P], AggregateRent[P]>
  }




  export type RentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentWhereInput
    orderBy?: RentOrderByWithAggregationInput | RentOrderByWithAggregationInput[]
    by: RentScalarFieldEnum[] | RentScalarFieldEnum
    having?: RentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RentCountAggregateInputType | true
    _avg?: RentAvgAggregateInputType
    _sum?: RentSumAggregateInputType
    _min?: RentMinAggregateInputType
    _max?: RentMaxAggregateInputType
  }

  export type RentGroupByOutputType = {
    id: number
    createdAt: Date
    updateAt: Date
    tokenId: string
    startTime: Date
    endTime: Date
    renterId: number
    layerId: number
    isActive: boolean
    _count: RentCountAggregateOutputType | null
    _avg: RentAvgAggregateOutputType | null
    _sum: RentSumAggregateOutputType | null
    _min: RentMinAggregateOutputType | null
    _max: RentMaxAggregateOutputType | null
  }

  type GetRentGroupByPayload<T extends RentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RentGroupByOutputType[P]>
            : GetScalarType<T[P], RentGroupByOutputType[P]>
        }
      >
    >


  export type RentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    tokenId?: boolean
    startTime?: boolean
    endTime?: boolean
    renterId?: boolean
    layerId?: boolean
    isActive?: boolean
    renterUser?: boolean | UserDefaultArgs<ExtArgs>
    layer?: boolean | LayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rent"]>

  export type RentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    tokenId?: boolean
    startTime?: boolean
    endTime?: boolean
    renterId?: boolean
    layerId?: boolean
    isActive?: boolean
    renterUser?: boolean | UserDefaultArgs<ExtArgs>
    layer?: boolean | LayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rent"]>

  export type RentSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    tokenId?: boolean
    startTime?: boolean
    endTime?: boolean
    renterId?: boolean
    layerId?: boolean
    isActive?: boolean
  }

  export type RentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    renterUser?: boolean | UserDefaultArgs<ExtArgs>
    layer?: boolean | LayerDefaultArgs<ExtArgs>
  }
  export type RentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    renterUser?: boolean | UserDefaultArgs<ExtArgs>
    layer?: boolean | LayerDefaultArgs<ExtArgs>
  }

  export type $RentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rent"
    objects: {
      renterUser: Prisma.$UserPayload<ExtArgs>
      layer: Prisma.$LayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updateAt: Date
      tokenId: string
      startTime: Date
      endTime: Date
      renterId: number
      layerId: number
      isActive: boolean
    }, ExtArgs["result"]["rent"]>
    composites: {}
  }

  type RentGetPayload<S extends boolean | null | undefined | RentDefaultArgs> = $Result.GetResult<Prisma.$RentPayload, S>

  type RentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RentCountAggregateInputType | true
    }

  export interface RentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rent'], meta: { name: 'Rent' } }
    /**
     * Find zero or one Rent that matches the filter.
     * @param {RentFindUniqueArgs} args - Arguments to find a Rent
     * @example
     * // Get one Rent
     * const rent = await prisma.rent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RentFindUniqueArgs<ExtArgs>>
    ): Prisma__RentClient<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RentFindUniqueOrThrowArgs} args - Arguments to find a Rent
     * @example
     * // Get one Rent
     * const rent = await prisma.rent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RentClient<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentFindFirstArgs} args - Arguments to find a Rent
     * @example
     * // Get one Rent
     * const rent = await prisma.rent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RentFindFirstArgs<ExtArgs>>
    ): Prisma__RentClient<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentFindFirstOrThrowArgs} args - Arguments to find a Rent
     * @example
     * // Get one Rent
     * const rent = await prisma.rent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RentClient<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Rents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rents
     * const rents = await prisma.rent.findMany()
     * 
     * // Get first 10 Rents
     * const rents = await prisma.rent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rentWithIdOnly = await prisma.rent.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rent.
     * @param {RentCreateArgs} args - Arguments to create a Rent.
     * @example
     * // Create one Rent
     * const Rent = await prisma.rent.create({
     *   data: {
     *     // ... data to create a Rent
     *   }
     * })
     * 
    **/
    create<T extends RentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RentCreateArgs<ExtArgs>>
    ): Prisma__RentClient<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Rents.
     * @param {RentCreateManyArgs} args - Arguments to create many Rents.
     * @example
     * // Create many Rents
     * const rent = await prisma.rent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends RentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rents and returns the data saved in the database.
     * @param {RentCreateManyAndReturnArgs} args - Arguments to create many Rents.
     * @example
     * // Create many Rents
     * const rent = await prisma.rent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rents and only return the `id`
     * const rentWithIdOnly = await prisma.rent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends RentCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, RentCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Rent.
     * @param {RentDeleteArgs} args - Arguments to delete one Rent.
     * @example
     * // Delete one Rent
     * const Rent = await prisma.rent.delete({
     *   where: {
     *     // ... filter to delete one Rent
     *   }
     * })
     * 
    **/
    delete<T extends RentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RentDeleteArgs<ExtArgs>>
    ): Prisma__RentClient<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rent.
     * @param {RentUpdateArgs} args - Arguments to update one Rent.
     * @example
     * // Update one Rent
     * const rent = await prisma.rent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RentUpdateArgs<ExtArgs>>
    ): Prisma__RentClient<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Rents.
     * @param {RentDeleteManyArgs} args - Arguments to filter Rents to delete.
     * @example
     * // Delete a few Rents
     * const { count } = await prisma.rent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rents
     * const rent = await prisma.rent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rent.
     * @param {RentUpsertArgs} args - Arguments to update or create a Rent.
     * @example
     * // Update or create a Rent
     * const rent = await prisma.rent.upsert({
     *   create: {
     *     // ... data to create a Rent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rent we want to update
     *   }
     * })
    **/
    upsert<T extends RentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RentUpsertArgs<ExtArgs>>
    ): Prisma__RentClient<$Result.GetResult<Prisma.$RentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Rents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentCountArgs} args - Arguments to filter Rents to count.
     * @example
     * // Count the number of Rents
     * const count = await prisma.rent.count({
     *   where: {
     *     // ... the filter for the Rents we want to count
     *   }
     * })
    **/
    count<T extends RentCountArgs>(
      args?: Subset<T, RentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RentAggregateArgs>(args: Subset<T, RentAggregateArgs>): Prisma.PrismaPromise<GetRentAggregateType<T>>

    /**
     * Group by Rent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RentGroupByArgs['orderBy'] }
        : { orderBy?: RentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rent model
   */
  readonly fields: RentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    renterUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    layer<T extends LayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LayerDefaultArgs<ExtArgs>>): Prisma__LayerClient<$Result.GetResult<Prisma.$LayerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Rent model
   */ 
  interface RentFieldRefs {
    readonly id: FieldRef<"Rent", 'Int'>
    readonly createdAt: FieldRef<"Rent", 'DateTime'>
    readonly updateAt: FieldRef<"Rent", 'DateTime'>
    readonly tokenId: FieldRef<"Rent", 'String'>
    readonly startTime: FieldRef<"Rent", 'DateTime'>
    readonly endTime: FieldRef<"Rent", 'DateTime'>
    readonly renterId: FieldRef<"Rent", 'Int'>
    readonly layerId: FieldRef<"Rent", 'Int'>
    readonly isActive: FieldRef<"Rent", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Rent findUnique
   */
  export type RentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter, which Rent to fetch.
     */
    where: RentWhereUniqueInput
  }

  /**
   * Rent findUniqueOrThrow
   */
  export type RentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter, which Rent to fetch.
     */
    where: RentWhereUniqueInput
  }

  /**
   * Rent findFirst
   */
  export type RentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter, which Rent to fetch.
     */
    where?: RentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rents to fetch.
     */
    orderBy?: RentOrderByWithRelationInput | RentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rents.
     */
    cursor?: RentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rents.
     */
    distinct?: RentScalarFieldEnum | RentScalarFieldEnum[]
  }

  /**
   * Rent findFirstOrThrow
   */
  export type RentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter, which Rent to fetch.
     */
    where?: RentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rents to fetch.
     */
    orderBy?: RentOrderByWithRelationInput | RentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rents.
     */
    cursor?: RentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rents.
     */
    distinct?: RentScalarFieldEnum | RentScalarFieldEnum[]
  }

  /**
   * Rent findMany
   */
  export type RentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter, which Rents to fetch.
     */
    where?: RentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rents to fetch.
     */
    orderBy?: RentOrderByWithRelationInput | RentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rents.
     */
    cursor?: RentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rents.
     */
    skip?: number
    distinct?: RentScalarFieldEnum | RentScalarFieldEnum[]
  }

  /**
   * Rent create
   */
  export type RentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * The data needed to create a Rent.
     */
    data: XOR<RentCreateInput, RentUncheckedCreateInput>
  }

  /**
   * Rent createMany
   */
  export type RentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rents.
     */
    data: RentCreateManyInput | RentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rent createManyAndReturn
   */
  export type RentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Rents.
     */
    data: RentCreateManyInput | RentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rent update
   */
  export type RentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * The data needed to update a Rent.
     */
    data: XOR<RentUpdateInput, RentUncheckedUpdateInput>
    /**
     * Choose, which Rent to update.
     */
    where: RentWhereUniqueInput
  }

  /**
   * Rent updateMany
   */
  export type RentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rents.
     */
    data: XOR<RentUpdateManyMutationInput, RentUncheckedUpdateManyInput>
    /**
     * Filter which Rents to update
     */
    where?: RentWhereInput
  }

  /**
   * Rent upsert
   */
  export type RentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * The filter to search for the Rent to update in case it exists.
     */
    where: RentWhereUniqueInput
    /**
     * In case the Rent found by the `where` argument doesn't exist, create a new Rent with this data.
     */
    create: XOR<RentCreateInput, RentUncheckedCreateInput>
    /**
     * In case the Rent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RentUpdateInput, RentUncheckedUpdateInput>
  }

  /**
   * Rent delete
   */
  export type RentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter which Rent to delete.
     */
    where: RentWhereUniqueInput
  }

  /**
   * Rent deleteMany
   */
  export type RentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rents to delete
     */
    where?: RentWhereInput
  }

  /**
   * Rent without action
   */
  export type RentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentInclude<ExtArgs> | null
  }


  /**
   * Model Newsletter
   */

  export type AggregateNewsletter = {
    _count: NewsletterCountAggregateOutputType | null
    _avg: NewsletterAvgAggregateOutputType | null
    _sum: NewsletterSumAggregateOutputType | null
    _min: NewsletterMinAggregateOutputType | null
    _max: NewsletterMaxAggregateOutputType | null
  }

  export type NewsletterAvgAggregateOutputType = {
    id: number | null
  }

  export type NewsletterSumAggregateOutputType = {
    id: number | null
  }

  export type NewsletterMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    title: string | null
    text: string | null
    link: string | null
    date: Date | null
  }

  export type NewsletterMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    title: string | null
    text: string | null
    link: string | null
    date: Date | null
  }

  export type NewsletterCountAggregateOutputType = {
    id: number
    createdAt: number
    updateAt: number
    title: number
    text: number
    link: number
    date: number
    _all: number
  }


  export type NewsletterAvgAggregateInputType = {
    id?: true
  }

  export type NewsletterSumAggregateInputType = {
    id?: true
  }

  export type NewsletterMinAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    title?: true
    text?: true
    link?: true
    date?: true
  }

  export type NewsletterMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    title?: true
    text?: true
    link?: true
    date?: true
  }

  export type NewsletterCountAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    title?: true
    text?: true
    link?: true
    date?: true
    _all?: true
  }

  export type NewsletterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Newsletter to aggregate.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Newsletters
    **/
    _count?: true | NewsletterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsletterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsletterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsletterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsletterMaxAggregateInputType
  }

  export type GetNewsletterAggregateType<T extends NewsletterAggregateArgs> = {
        [P in keyof T & keyof AggregateNewsletter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewsletter[P]>
      : GetScalarType<T[P], AggregateNewsletter[P]>
  }




  export type NewsletterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsletterWhereInput
    orderBy?: NewsletterOrderByWithAggregationInput | NewsletterOrderByWithAggregationInput[]
    by: NewsletterScalarFieldEnum[] | NewsletterScalarFieldEnum
    having?: NewsletterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsletterCountAggregateInputType | true
    _avg?: NewsletterAvgAggregateInputType
    _sum?: NewsletterSumAggregateInputType
    _min?: NewsletterMinAggregateInputType
    _max?: NewsletterMaxAggregateInputType
  }

  export type NewsletterGroupByOutputType = {
    id: number
    createdAt: Date
    updateAt: Date
    title: string
    text: string
    link: string
    date: Date
    _count: NewsletterCountAggregateOutputType | null
    _avg: NewsletterAvgAggregateOutputType | null
    _sum: NewsletterSumAggregateOutputType | null
    _min: NewsletterMinAggregateOutputType | null
    _max: NewsletterMaxAggregateOutputType | null
  }

  type GetNewsletterGroupByPayload<T extends NewsletterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsletterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsletterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsletterGroupByOutputType[P]>
            : GetScalarType<T[P], NewsletterGroupByOutputType[P]>
        }
      >
    >


  export type NewsletterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    title?: boolean
    text?: boolean
    link?: boolean
    date?: boolean
  }, ExtArgs["result"]["newsletter"]>

  export type NewsletterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    title?: boolean
    text?: boolean
    link?: boolean
    date?: boolean
  }, ExtArgs["result"]["newsletter"]>

  export type NewsletterSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    title?: boolean
    text?: boolean
    link?: boolean
    date?: boolean
  }


  export type $NewsletterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Newsletter"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updateAt: Date
      title: string
      text: string
      link: string
      date: Date
    }, ExtArgs["result"]["newsletter"]>
    composites: {}
  }

  type NewsletterGetPayload<S extends boolean | null | undefined | NewsletterDefaultArgs> = $Result.GetResult<Prisma.$NewsletterPayload, S>

  type NewsletterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NewsletterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewsletterCountAggregateInputType | true
    }

  export interface NewsletterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Newsletter'], meta: { name: 'Newsletter' } }
    /**
     * Find zero or one Newsletter that matches the filter.
     * @param {NewsletterFindUniqueArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NewsletterFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterFindUniqueArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Newsletter that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NewsletterFindUniqueOrThrowArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NewsletterFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Newsletter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterFindFirstArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NewsletterFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterFindFirstArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Newsletter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterFindFirstOrThrowArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NewsletterFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Newsletters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Newsletters
     * const newsletters = await prisma.newsletter.findMany()
     * 
     * // Get first 10 Newsletters
     * const newsletters = await prisma.newsletter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsletterWithIdOnly = await prisma.newsletter.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NewsletterFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Newsletter.
     * @param {NewsletterCreateArgs} args - Arguments to create a Newsletter.
     * @example
     * // Create one Newsletter
     * const Newsletter = await prisma.newsletter.create({
     *   data: {
     *     // ... data to create a Newsletter
     *   }
     * })
     * 
    **/
    create<T extends NewsletterCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterCreateArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Newsletters.
     * @param {NewsletterCreateManyArgs} args - Arguments to create many Newsletters.
     * @example
     * // Create many Newsletters
     * const newsletter = await prisma.newsletter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends NewsletterCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Newsletters and returns the data saved in the database.
     * @param {NewsletterCreateManyAndReturnArgs} args - Arguments to create many Newsletters.
     * @example
     * // Create many Newsletters
     * const newsletter = await prisma.newsletter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Newsletters and only return the `id`
     * const newsletterWithIdOnly = await prisma.newsletter.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends NewsletterCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Newsletter.
     * @param {NewsletterDeleteArgs} args - Arguments to delete one Newsletter.
     * @example
     * // Delete one Newsletter
     * const Newsletter = await prisma.newsletter.delete({
     *   where: {
     *     // ... filter to delete one Newsletter
     *   }
     * })
     * 
    **/
    delete<T extends NewsletterDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterDeleteArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Newsletter.
     * @param {NewsletterUpdateArgs} args - Arguments to update one Newsletter.
     * @example
     * // Update one Newsletter
     * const newsletter = await prisma.newsletter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NewsletterUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterUpdateArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Newsletters.
     * @param {NewsletterDeleteManyArgs} args - Arguments to filter Newsletters to delete.
     * @example
     * // Delete a few Newsletters
     * const { count } = await prisma.newsletter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NewsletterDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Newsletters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Newsletters
     * const newsletter = await prisma.newsletter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NewsletterUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Newsletter.
     * @param {NewsletterUpsertArgs} args - Arguments to update or create a Newsletter.
     * @example
     * // Update or create a Newsletter
     * const newsletter = await prisma.newsletter.upsert({
     *   create: {
     *     // ... data to create a Newsletter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Newsletter we want to update
     *   }
     * })
    **/
    upsert<T extends NewsletterUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterUpsertArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Newsletters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterCountArgs} args - Arguments to filter Newsletters to count.
     * @example
     * // Count the number of Newsletters
     * const count = await prisma.newsletter.count({
     *   where: {
     *     // ... the filter for the Newsletters we want to count
     *   }
     * })
    **/
    count<T extends NewsletterCountArgs>(
      args?: Subset<T, NewsletterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsletterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Newsletter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsletterAggregateArgs>(args: Subset<T, NewsletterAggregateArgs>): Prisma.PrismaPromise<GetNewsletterAggregateType<T>>

    /**
     * Group by Newsletter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsletterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsletterGroupByArgs['orderBy'] }
        : { orderBy?: NewsletterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsletterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsletterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Newsletter model
   */
  readonly fields: NewsletterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Newsletter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewsletterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Newsletter model
   */ 
  interface NewsletterFieldRefs {
    readonly id: FieldRef<"Newsletter", 'Int'>
    readonly createdAt: FieldRef<"Newsletter", 'DateTime'>
    readonly updateAt: FieldRef<"Newsletter", 'DateTime'>
    readonly title: FieldRef<"Newsletter", 'String'>
    readonly text: FieldRef<"Newsletter", 'String'>
    readonly link: FieldRef<"Newsletter", 'String'>
    readonly date: FieldRef<"Newsletter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Newsletter findUnique
   */
  export type NewsletterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where: NewsletterWhereUniqueInput
  }

  /**
   * Newsletter findUniqueOrThrow
   */
  export type NewsletterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where: NewsletterWhereUniqueInput
  }

  /**
   * Newsletter findFirst
   */
  export type NewsletterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Newsletters.
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Newsletters.
     */
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }

  /**
   * Newsletter findFirstOrThrow
   */
  export type NewsletterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Newsletters.
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Newsletters.
     */
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }

  /**
   * Newsletter findMany
   */
  export type NewsletterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter, which Newsletters to fetch.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Newsletters.
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }

  /**
   * Newsletter create
   */
  export type NewsletterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * The data needed to create a Newsletter.
     */
    data: XOR<NewsletterCreateInput, NewsletterUncheckedCreateInput>
  }

  /**
   * Newsletter createMany
   */
  export type NewsletterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Newsletters.
     */
    data: NewsletterCreateManyInput | NewsletterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Newsletter createManyAndReturn
   */
  export type NewsletterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Newsletters.
     */
    data: NewsletterCreateManyInput | NewsletterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Newsletter update
   */
  export type NewsletterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * The data needed to update a Newsletter.
     */
    data: XOR<NewsletterUpdateInput, NewsletterUncheckedUpdateInput>
    /**
     * Choose, which Newsletter to update.
     */
    where: NewsletterWhereUniqueInput
  }

  /**
   * Newsletter updateMany
   */
  export type NewsletterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Newsletters.
     */
    data: XOR<NewsletterUpdateManyMutationInput, NewsletterUncheckedUpdateManyInput>
    /**
     * Filter which Newsletters to update
     */
    where?: NewsletterWhereInput
  }

  /**
   * Newsletter upsert
   */
  export type NewsletterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * The filter to search for the Newsletter to update in case it exists.
     */
    where: NewsletterWhereUniqueInput
    /**
     * In case the Newsletter found by the `where` argument doesn't exist, create a new Newsletter with this data.
     */
    create: XOR<NewsletterCreateInput, NewsletterUncheckedCreateInput>
    /**
     * In case the Newsletter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsletterUpdateInput, NewsletterUncheckedUpdateInput>
  }

  /**
   * Newsletter delete
   */
  export type NewsletterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter which Newsletter to delete.
     */
    where: NewsletterWhereUniqueInput
  }

  /**
   * Newsletter deleteMany
   */
  export type NewsletterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Newsletters to delete
     */
    where?: NewsletterWhereInput
  }

  /**
   * Newsletter without action
   */
  export type NewsletterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
  }


  /**
   * Model WeekDayRange
   */

  export type AggregateWeekDayRange = {
    _count: WeekDayRangeCountAggregateOutputType | null
    _avg: WeekDayRangeAvgAggregateOutputType | null
    _sum: WeekDayRangeSumAggregateOutputType | null
    _min: WeekDayRangeMinAggregateOutputType | null
    _max: WeekDayRangeMaxAggregateOutputType | null
  }

  export type WeekDayRangeAvgAggregateOutputType = {
    fromTime: number | null
    toTime: number | null
    weekDayId: number | null
    propertyId: number | null
  }

  export type WeekDayRangeSumAggregateOutputType = {
    fromTime: number | null
    toTime: number | null
    weekDayId: number | null
    propertyId: number | null
  }

  export type WeekDayRangeMinAggregateOutputType = {
    createdAt: Date | null
    updateAt: Date | null
    fromTime: number | null
    toTime: number | null
    isAvailable: boolean | null
    weekDayId: number | null
    propertyId: number | null
  }

  export type WeekDayRangeMaxAggregateOutputType = {
    createdAt: Date | null
    updateAt: Date | null
    fromTime: number | null
    toTime: number | null
    isAvailable: boolean | null
    weekDayId: number | null
    propertyId: number | null
  }

  export type WeekDayRangeCountAggregateOutputType = {
    createdAt: number
    updateAt: number
    fromTime: number
    toTime: number
    isAvailable: number
    weekDayId: number
    propertyId: number
    _all: number
  }


  export type WeekDayRangeAvgAggregateInputType = {
    fromTime?: true
    toTime?: true
    weekDayId?: true
    propertyId?: true
  }

  export type WeekDayRangeSumAggregateInputType = {
    fromTime?: true
    toTime?: true
    weekDayId?: true
    propertyId?: true
  }

  export type WeekDayRangeMinAggregateInputType = {
    createdAt?: true
    updateAt?: true
    fromTime?: true
    toTime?: true
    isAvailable?: true
    weekDayId?: true
    propertyId?: true
  }

  export type WeekDayRangeMaxAggregateInputType = {
    createdAt?: true
    updateAt?: true
    fromTime?: true
    toTime?: true
    isAvailable?: true
    weekDayId?: true
    propertyId?: true
  }

  export type WeekDayRangeCountAggregateInputType = {
    createdAt?: true
    updateAt?: true
    fromTime?: true
    toTime?: true
    isAvailable?: true
    weekDayId?: true
    propertyId?: true
    _all?: true
  }

  export type WeekDayRangeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeekDayRange to aggregate.
     */
    where?: WeekDayRangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeekDayRanges to fetch.
     */
    orderBy?: WeekDayRangeOrderByWithRelationInput | WeekDayRangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeekDayRangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeekDayRanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeekDayRanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeekDayRanges
    **/
    _count?: true | WeekDayRangeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeekDayRangeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeekDayRangeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeekDayRangeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeekDayRangeMaxAggregateInputType
  }

  export type GetWeekDayRangeAggregateType<T extends WeekDayRangeAggregateArgs> = {
        [P in keyof T & keyof AggregateWeekDayRange]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeekDayRange[P]>
      : GetScalarType<T[P], AggregateWeekDayRange[P]>
  }




  export type WeekDayRangeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeekDayRangeWhereInput
    orderBy?: WeekDayRangeOrderByWithAggregationInput | WeekDayRangeOrderByWithAggregationInput[]
    by: WeekDayRangeScalarFieldEnum[] | WeekDayRangeScalarFieldEnum
    having?: WeekDayRangeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeekDayRangeCountAggregateInputType | true
    _avg?: WeekDayRangeAvgAggregateInputType
    _sum?: WeekDayRangeSumAggregateInputType
    _min?: WeekDayRangeMinAggregateInputType
    _max?: WeekDayRangeMaxAggregateInputType
  }

  export type WeekDayRangeGroupByOutputType = {
    createdAt: Date
    updateAt: Date
    fromTime: number
    toTime: number
    isAvailable: boolean
    weekDayId: number
    propertyId: number
    _count: WeekDayRangeCountAggregateOutputType | null
    _avg: WeekDayRangeAvgAggregateOutputType | null
    _sum: WeekDayRangeSumAggregateOutputType | null
    _min: WeekDayRangeMinAggregateOutputType | null
    _max: WeekDayRangeMaxAggregateOutputType | null
  }

  type GetWeekDayRangeGroupByPayload<T extends WeekDayRangeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeekDayRangeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeekDayRangeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeekDayRangeGroupByOutputType[P]>
            : GetScalarType<T[P], WeekDayRangeGroupByOutputType[P]>
        }
      >
    >


  export type WeekDayRangeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updateAt?: boolean
    fromTime?: boolean
    toTime?: boolean
    isAvailable?: boolean
    weekDayId?: boolean
    propertyId?: boolean
    weekDay?: boolean | WeekDayDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weekDayRange"]>

  export type WeekDayRangeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updateAt?: boolean
    fromTime?: boolean
    toTime?: boolean
    isAvailable?: boolean
    weekDayId?: boolean
    propertyId?: boolean
    weekDay?: boolean | WeekDayDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weekDayRange"]>

  export type WeekDayRangeSelectScalar = {
    createdAt?: boolean
    updateAt?: boolean
    fromTime?: boolean
    toTime?: boolean
    isAvailable?: boolean
    weekDayId?: boolean
    propertyId?: boolean
  }

  export type WeekDayRangeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weekDay?: boolean | WeekDayDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }
  export type WeekDayRangeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weekDay?: boolean | WeekDayDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }

  export type $WeekDayRangePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WeekDayRange"
    objects: {
      weekDay: Prisma.$WeekDayPayload<ExtArgs>
      property: Prisma.$PropertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      updateAt: Date
      fromTime: number
      toTime: number
      isAvailable: boolean
      weekDayId: number
      propertyId: number
    }, ExtArgs["result"]["weekDayRange"]>
    composites: {}
  }

  type WeekDayRangeGetPayload<S extends boolean | null | undefined | WeekDayRangeDefaultArgs> = $Result.GetResult<Prisma.$WeekDayRangePayload, S>

  type WeekDayRangeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WeekDayRangeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WeekDayRangeCountAggregateInputType | true
    }

  export interface WeekDayRangeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeekDayRange'], meta: { name: 'WeekDayRange' } }
    /**
     * Find zero or one WeekDayRange that matches the filter.
     * @param {WeekDayRangeFindUniqueArgs} args - Arguments to find a WeekDayRange
     * @example
     * // Get one WeekDayRange
     * const weekDayRange = await prisma.weekDayRange.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WeekDayRangeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayRangeFindUniqueArgs<ExtArgs>>
    ): Prisma__WeekDayRangeClient<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WeekDayRange that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WeekDayRangeFindUniqueOrThrowArgs} args - Arguments to find a WeekDayRange
     * @example
     * // Get one WeekDayRange
     * const weekDayRange = await prisma.weekDayRange.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WeekDayRangeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayRangeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WeekDayRangeClient<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WeekDayRange that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayRangeFindFirstArgs} args - Arguments to find a WeekDayRange
     * @example
     * // Get one WeekDayRange
     * const weekDayRange = await prisma.weekDayRange.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WeekDayRangeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayRangeFindFirstArgs<ExtArgs>>
    ): Prisma__WeekDayRangeClient<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WeekDayRange that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayRangeFindFirstOrThrowArgs} args - Arguments to find a WeekDayRange
     * @example
     * // Get one WeekDayRange
     * const weekDayRange = await prisma.weekDayRange.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WeekDayRangeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayRangeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WeekDayRangeClient<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WeekDayRanges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayRangeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeekDayRanges
     * const weekDayRanges = await prisma.weekDayRange.findMany()
     * 
     * // Get first 10 WeekDayRanges
     * const weekDayRanges = await prisma.weekDayRange.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const weekDayRangeWithCreatedAtOnly = await prisma.weekDayRange.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends WeekDayRangeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayRangeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WeekDayRange.
     * @param {WeekDayRangeCreateArgs} args - Arguments to create a WeekDayRange.
     * @example
     * // Create one WeekDayRange
     * const WeekDayRange = await prisma.weekDayRange.create({
     *   data: {
     *     // ... data to create a WeekDayRange
     *   }
     * })
     * 
    **/
    create<T extends WeekDayRangeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayRangeCreateArgs<ExtArgs>>
    ): Prisma__WeekDayRangeClient<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WeekDayRanges.
     * @param {WeekDayRangeCreateManyArgs} args - Arguments to create many WeekDayRanges.
     * @example
     * // Create many WeekDayRanges
     * const weekDayRange = await prisma.weekDayRange.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends WeekDayRangeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayRangeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WeekDayRanges and returns the data saved in the database.
     * @param {WeekDayRangeCreateManyAndReturnArgs} args - Arguments to create many WeekDayRanges.
     * @example
     * // Create many WeekDayRanges
     * const weekDayRange = await prisma.weekDayRange.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WeekDayRanges and only return the `createdAt`
     * const weekDayRangeWithCreatedAtOnly = await prisma.weekDayRange.createManyAndReturn({ 
     *   select: { createdAt: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends WeekDayRangeCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayRangeCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a WeekDayRange.
     * @param {WeekDayRangeDeleteArgs} args - Arguments to delete one WeekDayRange.
     * @example
     * // Delete one WeekDayRange
     * const WeekDayRange = await prisma.weekDayRange.delete({
     *   where: {
     *     // ... filter to delete one WeekDayRange
     *   }
     * })
     * 
    **/
    delete<T extends WeekDayRangeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayRangeDeleteArgs<ExtArgs>>
    ): Prisma__WeekDayRangeClient<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WeekDayRange.
     * @param {WeekDayRangeUpdateArgs} args - Arguments to update one WeekDayRange.
     * @example
     * // Update one WeekDayRange
     * const weekDayRange = await prisma.weekDayRange.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WeekDayRangeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayRangeUpdateArgs<ExtArgs>>
    ): Prisma__WeekDayRangeClient<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WeekDayRanges.
     * @param {WeekDayRangeDeleteManyArgs} args - Arguments to filter WeekDayRanges to delete.
     * @example
     * // Delete a few WeekDayRanges
     * const { count } = await prisma.weekDayRange.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WeekDayRangeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayRangeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeekDayRanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayRangeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeekDayRanges
     * const weekDayRange = await prisma.weekDayRange.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WeekDayRangeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayRangeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WeekDayRange.
     * @param {WeekDayRangeUpsertArgs} args - Arguments to update or create a WeekDayRange.
     * @example
     * // Update or create a WeekDayRange
     * const weekDayRange = await prisma.weekDayRange.upsert({
     *   create: {
     *     // ... data to create a WeekDayRange
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeekDayRange we want to update
     *   }
     * })
    **/
    upsert<T extends WeekDayRangeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayRangeUpsertArgs<ExtArgs>>
    ): Prisma__WeekDayRangeClient<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WeekDayRanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayRangeCountArgs} args - Arguments to filter WeekDayRanges to count.
     * @example
     * // Count the number of WeekDayRanges
     * const count = await prisma.weekDayRange.count({
     *   where: {
     *     // ... the filter for the WeekDayRanges we want to count
     *   }
     * })
    **/
    count<T extends WeekDayRangeCountArgs>(
      args?: Subset<T, WeekDayRangeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeekDayRangeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeekDayRange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayRangeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeekDayRangeAggregateArgs>(args: Subset<T, WeekDayRangeAggregateArgs>): Prisma.PrismaPromise<GetWeekDayRangeAggregateType<T>>

    /**
     * Group by WeekDayRange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayRangeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeekDayRangeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeekDayRangeGroupByArgs['orderBy'] }
        : { orderBy?: WeekDayRangeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeekDayRangeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeekDayRangeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WeekDayRange model
   */
  readonly fields: WeekDayRangeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WeekDayRange.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeekDayRangeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    weekDay<T extends WeekDayDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WeekDayDefaultArgs<ExtArgs>>): Prisma__WeekDayClient<$Result.GetResult<Prisma.$WeekDayPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    property<T extends PropertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PropertyDefaultArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WeekDayRange model
   */ 
  interface WeekDayRangeFieldRefs {
    readonly createdAt: FieldRef<"WeekDayRange", 'DateTime'>
    readonly updateAt: FieldRef<"WeekDayRange", 'DateTime'>
    readonly fromTime: FieldRef<"WeekDayRange", 'Float'>
    readonly toTime: FieldRef<"WeekDayRange", 'Float'>
    readonly isAvailable: FieldRef<"WeekDayRange", 'Boolean'>
    readonly weekDayId: FieldRef<"WeekDayRange", 'Int'>
    readonly propertyId: FieldRef<"WeekDayRange", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WeekDayRange findUnique
   */
  export type WeekDayRangeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
    /**
     * Filter, which WeekDayRange to fetch.
     */
    where: WeekDayRangeWhereUniqueInput
  }

  /**
   * WeekDayRange findUniqueOrThrow
   */
  export type WeekDayRangeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
    /**
     * Filter, which WeekDayRange to fetch.
     */
    where: WeekDayRangeWhereUniqueInput
  }

  /**
   * WeekDayRange findFirst
   */
  export type WeekDayRangeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
    /**
     * Filter, which WeekDayRange to fetch.
     */
    where?: WeekDayRangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeekDayRanges to fetch.
     */
    orderBy?: WeekDayRangeOrderByWithRelationInput | WeekDayRangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeekDayRanges.
     */
    cursor?: WeekDayRangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeekDayRanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeekDayRanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeekDayRanges.
     */
    distinct?: WeekDayRangeScalarFieldEnum | WeekDayRangeScalarFieldEnum[]
  }

  /**
   * WeekDayRange findFirstOrThrow
   */
  export type WeekDayRangeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
    /**
     * Filter, which WeekDayRange to fetch.
     */
    where?: WeekDayRangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeekDayRanges to fetch.
     */
    orderBy?: WeekDayRangeOrderByWithRelationInput | WeekDayRangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeekDayRanges.
     */
    cursor?: WeekDayRangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeekDayRanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeekDayRanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeekDayRanges.
     */
    distinct?: WeekDayRangeScalarFieldEnum | WeekDayRangeScalarFieldEnum[]
  }

  /**
   * WeekDayRange findMany
   */
  export type WeekDayRangeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
    /**
     * Filter, which WeekDayRanges to fetch.
     */
    where?: WeekDayRangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeekDayRanges to fetch.
     */
    orderBy?: WeekDayRangeOrderByWithRelationInput | WeekDayRangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeekDayRanges.
     */
    cursor?: WeekDayRangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeekDayRanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeekDayRanges.
     */
    skip?: number
    distinct?: WeekDayRangeScalarFieldEnum | WeekDayRangeScalarFieldEnum[]
  }

  /**
   * WeekDayRange create
   */
  export type WeekDayRangeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
    /**
     * The data needed to create a WeekDayRange.
     */
    data: XOR<WeekDayRangeCreateInput, WeekDayRangeUncheckedCreateInput>
  }

  /**
   * WeekDayRange createMany
   */
  export type WeekDayRangeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WeekDayRanges.
     */
    data: WeekDayRangeCreateManyInput | WeekDayRangeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WeekDayRange createManyAndReturn
   */
  export type WeekDayRangeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WeekDayRanges.
     */
    data: WeekDayRangeCreateManyInput | WeekDayRangeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeekDayRange update
   */
  export type WeekDayRangeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
    /**
     * The data needed to update a WeekDayRange.
     */
    data: XOR<WeekDayRangeUpdateInput, WeekDayRangeUncheckedUpdateInput>
    /**
     * Choose, which WeekDayRange to update.
     */
    where: WeekDayRangeWhereUniqueInput
  }

  /**
   * WeekDayRange updateMany
   */
  export type WeekDayRangeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WeekDayRanges.
     */
    data: XOR<WeekDayRangeUpdateManyMutationInput, WeekDayRangeUncheckedUpdateManyInput>
    /**
     * Filter which WeekDayRanges to update
     */
    where?: WeekDayRangeWhereInput
  }

  /**
   * WeekDayRange upsert
   */
  export type WeekDayRangeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
    /**
     * The filter to search for the WeekDayRange to update in case it exists.
     */
    where: WeekDayRangeWhereUniqueInput
    /**
     * In case the WeekDayRange found by the `where` argument doesn't exist, create a new WeekDayRange with this data.
     */
    create: XOR<WeekDayRangeCreateInput, WeekDayRangeUncheckedCreateInput>
    /**
     * In case the WeekDayRange was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeekDayRangeUpdateInput, WeekDayRangeUncheckedUpdateInput>
  }

  /**
   * WeekDayRange delete
   */
  export type WeekDayRangeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
    /**
     * Filter which WeekDayRange to delete.
     */
    where: WeekDayRangeWhereUniqueInput
  }

  /**
   * WeekDayRange deleteMany
   */
  export type WeekDayRangeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeekDayRanges to delete
     */
    where?: WeekDayRangeWhereInput
  }

  /**
   * WeekDayRange without action
   */
  export type WeekDayRangeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
  }


  /**
   * Model WeekDay
   */

  export type AggregateWeekDay = {
    _count: WeekDayCountAggregateOutputType | null
    _avg: WeekDayAvgAggregateOutputType | null
    _sum: WeekDaySumAggregateOutputType | null
    _min: WeekDayMinAggregateOutputType | null
    _max: WeekDayMaxAggregateOutputType | null
  }

  export type WeekDayAvgAggregateOutputType = {
    id: number | null
  }

  export type WeekDaySumAggregateOutputType = {
    id: number | null
  }

  export type WeekDayMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type WeekDayMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type WeekDayCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type WeekDayAvgAggregateInputType = {
    id?: true
  }

  export type WeekDaySumAggregateInputType = {
    id?: true
  }

  export type WeekDayMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type WeekDayMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type WeekDayCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type WeekDayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeekDay to aggregate.
     */
    where?: WeekDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeekDays to fetch.
     */
    orderBy?: WeekDayOrderByWithRelationInput | WeekDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeekDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeekDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeekDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeekDays
    **/
    _count?: true | WeekDayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeekDayAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeekDaySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeekDayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeekDayMaxAggregateInputType
  }

  export type GetWeekDayAggregateType<T extends WeekDayAggregateArgs> = {
        [P in keyof T & keyof AggregateWeekDay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeekDay[P]>
      : GetScalarType<T[P], AggregateWeekDay[P]>
  }




  export type WeekDayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeekDayWhereInput
    orderBy?: WeekDayOrderByWithAggregationInput | WeekDayOrderByWithAggregationInput[]
    by: WeekDayScalarFieldEnum[] | WeekDayScalarFieldEnum
    having?: WeekDayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeekDayCountAggregateInputType | true
    _avg?: WeekDayAvgAggregateInputType
    _sum?: WeekDaySumAggregateInputType
    _min?: WeekDayMinAggregateInputType
    _max?: WeekDayMaxAggregateInputType
  }

  export type WeekDayGroupByOutputType = {
    id: number
    name: string
    _count: WeekDayCountAggregateOutputType | null
    _avg: WeekDayAvgAggregateOutputType | null
    _sum: WeekDaySumAggregateOutputType | null
    _min: WeekDayMinAggregateOutputType | null
    _max: WeekDayMaxAggregateOutputType | null
  }

  type GetWeekDayGroupByPayload<T extends WeekDayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeekDayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeekDayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeekDayGroupByOutputType[P]>
            : GetScalarType<T[P], WeekDayGroupByOutputType[P]>
        }
      >
    >


  export type WeekDaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    weekDayRanges?: boolean | WeekDay$weekDayRangesArgs<ExtArgs>
    _count?: boolean | WeekDayCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weekDay"]>

  export type WeekDaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["weekDay"]>

  export type WeekDaySelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type WeekDayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weekDayRanges?: boolean | WeekDay$weekDayRangesArgs<ExtArgs>
    _count?: boolean | WeekDayCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WeekDayIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WeekDayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WeekDay"
    objects: {
      weekDayRanges: Prisma.$WeekDayRangePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["weekDay"]>
    composites: {}
  }

  type WeekDayGetPayload<S extends boolean | null | undefined | WeekDayDefaultArgs> = $Result.GetResult<Prisma.$WeekDayPayload, S>

  type WeekDayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WeekDayFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WeekDayCountAggregateInputType | true
    }

  export interface WeekDayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeekDay'], meta: { name: 'WeekDay' } }
    /**
     * Find zero or one WeekDay that matches the filter.
     * @param {WeekDayFindUniqueArgs} args - Arguments to find a WeekDay
     * @example
     * // Get one WeekDay
     * const weekDay = await prisma.weekDay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WeekDayFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayFindUniqueArgs<ExtArgs>>
    ): Prisma__WeekDayClient<$Result.GetResult<Prisma.$WeekDayPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WeekDay that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WeekDayFindUniqueOrThrowArgs} args - Arguments to find a WeekDay
     * @example
     * // Get one WeekDay
     * const weekDay = await prisma.weekDay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WeekDayFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WeekDayClient<$Result.GetResult<Prisma.$WeekDayPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WeekDay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayFindFirstArgs} args - Arguments to find a WeekDay
     * @example
     * // Get one WeekDay
     * const weekDay = await prisma.weekDay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WeekDayFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayFindFirstArgs<ExtArgs>>
    ): Prisma__WeekDayClient<$Result.GetResult<Prisma.$WeekDayPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WeekDay that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayFindFirstOrThrowArgs} args - Arguments to find a WeekDay
     * @example
     * // Get one WeekDay
     * const weekDay = await prisma.weekDay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WeekDayFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WeekDayClient<$Result.GetResult<Prisma.$WeekDayPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WeekDays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeekDays
     * const weekDays = await prisma.weekDay.findMany()
     * 
     * // Get first 10 WeekDays
     * const weekDays = await prisma.weekDay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weekDayWithIdOnly = await prisma.weekDay.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WeekDayFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeekDayPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WeekDay.
     * @param {WeekDayCreateArgs} args - Arguments to create a WeekDay.
     * @example
     * // Create one WeekDay
     * const WeekDay = await prisma.weekDay.create({
     *   data: {
     *     // ... data to create a WeekDay
     *   }
     * })
     * 
    **/
    create<T extends WeekDayCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayCreateArgs<ExtArgs>>
    ): Prisma__WeekDayClient<$Result.GetResult<Prisma.$WeekDayPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WeekDays.
     * @param {WeekDayCreateManyArgs} args - Arguments to create many WeekDays.
     * @example
     * // Create many WeekDays
     * const weekDay = await prisma.weekDay.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends WeekDayCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WeekDays and returns the data saved in the database.
     * @param {WeekDayCreateManyAndReturnArgs} args - Arguments to create many WeekDays.
     * @example
     * // Create many WeekDays
     * const weekDay = await prisma.weekDay.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WeekDays and only return the `id`
     * const weekDayWithIdOnly = await prisma.weekDay.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends WeekDayCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeekDayPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a WeekDay.
     * @param {WeekDayDeleteArgs} args - Arguments to delete one WeekDay.
     * @example
     * // Delete one WeekDay
     * const WeekDay = await prisma.weekDay.delete({
     *   where: {
     *     // ... filter to delete one WeekDay
     *   }
     * })
     * 
    **/
    delete<T extends WeekDayDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayDeleteArgs<ExtArgs>>
    ): Prisma__WeekDayClient<$Result.GetResult<Prisma.$WeekDayPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WeekDay.
     * @param {WeekDayUpdateArgs} args - Arguments to update one WeekDay.
     * @example
     * // Update one WeekDay
     * const weekDay = await prisma.weekDay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WeekDayUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayUpdateArgs<ExtArgs>>
    ): Prisma__WeekDayClient<$Result.GetResult<Prisma.$WeekDayPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WeekDays.
     * @param {WeekDayDeleteManyArgs} args - Arguments to filter WeekDays to delete.
     * @example
     * // Delete a few WeekDays
     * const { count } = await prisma.weekDay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WeekDayDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeekDayDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeekDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeekDays
     * const weekDay = await prisma.weekDay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WeekDayUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WeekDay.
     * @param {WeekDayUpsertArgs} args - Arguments to update or create a WeekDay.
     * @example
     * // Update or create a WeekDay
     * const weekDay = await prisma.weekDay.upsert({
     *   create: {
     *     // ... data to create a WeekDay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeekDay we want to update
     *   }
     * })
    **/
    upsert<T extends WeekDayUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WeekDayUpsertArgs<ExtArgs>>
    ): Prisma__WeekDayClient<$Result.GetResult<Prisma.$WeekDayPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WeekDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayCountArgs} args - Arguments to filter WeekDays to count.
     * @example
     * // Count the number of WeekDays
     * const count = await prisma.weekDay.count({
     *   where: {
     *     // ... the filter for the WeekDays we want to count
     *   }
     * })
    **/
    count<T extends WeekDayCountArgs>(
      args?: Subset<T, WeekDayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeekDayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeekDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeekDayAggregateArgs>(args: Subset<T, WeekDayAggregateArgs>): Prisma.PrismaPromise<GetWeekDayAggregateType<T>>

    /**
     * Group by WeekDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekDayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeekDayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeekDayGroupByArgs['orderBy'] }
        : { orderBy?: WeekDayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeekDayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeekDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WeekDay model
   */
  readonly fields: WeekDayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WeekDay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeekDayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    weekDayRanges<T extends WeekDay$weekDayRangesArgs<ExtArgs> = {}>(args?: Subset<T, WeekDay$weekDayRangesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeekDayRangePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WeekDay model
   */ 
  interface WeekDayFieldRefs {
    readonly id: FieldRef<"WeekDay", 'Int'>
    readonly name: FieldRef<"WeekDay", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WeekDay findUnique
   */
  export type WeekDayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDay
     */
    select?: WeekDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayInclude<ExtArgs> | null
    /**
     * Filter, which WeekDay to fetch.
     */
    where: WeekDayWhereUniqueInput
  }

  /**
   * WeekDay findUniqueOrThrow
   */
  export type WeekDayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDay
     */
    select?: WeekDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayInclude<ExtArgs> | null
    /**
     * Filter, which WeekDay to fetch.
     */
    where: WeekDayWhereUniqueInput
  }

  /**
   * WeekDay findFirst
   */
  export type WeekDayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDay
     */
    select?: WeekDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayInclude<ExtArgs> | null
    /**
     * Filter, which WeekDay to fetch.
     */
    where?: WeekDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeekDays to fetch.
     */
    orderBy?: WeekDayOrderByWithRelationInput | WeekDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeekDays.
     */
    cursor?: WeekDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeekDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeekDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeekDays.
     */
    distinct?: WeekDayScalarFieldEnum | WeekDayScalarFieldEnum[]
  }

  /**
   * WeekDay findFirstOrThrow
   */
  export type WeekDayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDay
     */
    select?: WeekDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayInclude<ExtArgs> | null
    /**
     * Filter, which WeekDay to fetch.
     */
    where?: WeekDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeekDays to fetch.
     */
    orderBy?: WeekDayOrderByWithRelationInput | WeekDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeekDays.
     */
    cursor?: WeekDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeekDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeekDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeekDays.
     */
    distinct?: WeekDayScalarFieldEnum | WeekDayScalarFieldEnum[]
  }

  /**
   * WeekDay findMany
   */
  export type WeekDayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDay
     */
    select?: WeekDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayInclude<ExtArgs> | null
    /**
     * Filter, which WeekDays to fetch.
     */
    where?: WeekDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeekDays to fetch.
     */
    orderBy?: WeekDayOrderByWithRelationInput | WeekDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeekDays.
     */
    cursor?: WeekDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeekDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeekDays.
     */
    skip?: number
    distinct?: WeekDayScalarFieldEnum | WeekDayScalarFieldEnum[]
  }

  /**
   * WeekDay create
   */
  export type WeekDayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDay
     */
    select?: WeekDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayInclude<ExtArgs> | null
    /**
     * The data needed to create a WeekDay.
     */
    data: XOR<WeekDayCreateInput, WeekDayUncheckedCreateInput>
  }

  /**
   * WeekDay createMany
   */
  export type WeekDayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WeekDays.
     */
    data: WeekDayCreateManyInput | WeekDayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WeekDay createManyAndReturn
   */
  export type WeekDayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDay
     */
    select?: WeekDaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WeekDays.
     */
    data: WeekDayCreateManyInput | WeekDayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WeekDay update
   */
  export type WeekDayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDay
     */
    select?: WeekDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayInclude<ExtArgs> | null
    /**
     * The data needed to update a WeekDay.
     */
    data: XOR<WeekDayUpdateInput, WeekDayUncheckedUpdateInput>
    /**
     * Choose, which WeekDay to update.
     */
    where: WeekDayWhereUniqueInput
  }

  /**
   * WeekDay updateMany
   */
  export type WeekDayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WeekDays.
     */
    data: XOR<WeekDayUpdateManyMutationInput, WeekDayUncheckedUpdateManyInput>
    /**
     * Filter which WeekDays to update
     */
    where?: WeekDayWhereInput
  }

  /**
   * WeekDay upsert
   */
  export type WeekDayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDay
     */
    select?: WeekDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayInclude<ExtArgs> | null
    /**
     * The filter to search for the WeekDay to update in case it exists.
     */
    where: WeekDayWhereUniqueInput
    /**
     * In case the WeekDay found by the `where` argument doesn't exist, create a new WeekDay with this data.
     */
    create: XOR<WeekDayCreateInput, WeekDayUncheckedCreateInput>
    /**
     * In case the WeekDay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeekDayUpdateInput, WeekDayUncheckedUpdateInput>
  }

  /**
   * WeekDay delete
   */
  export type WeekDayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDay
     */
    select?: WeekDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayInclude<ExtArgs> | null
    /**
     * Filter which WeekDay to delete.
     */
    where: WeekDayWhereUniqueInput
  }

  /**
   * WeekDay deleteMany
   */
  export type WeekDayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeekDays to delete
     */
    where?: WeekDayWhereInput
  }

  /**
   * WeekDay.weekDayRanges
   */
  export type WeekDay$weekDayRangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDayRange
     */
    select?: WeekDayRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayRangeInclude<ExtArgs> | null
    where?: WeekDayRangeWhereInput
    orderBy?: WeekDayRangeOrderByWithRelationInput | WeekDayRangeOrderByWithRelationInput[]
    cursor?: WeekDayRangeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeekDayRangeScalarFieldEnum | WeekDayRangeScalarFieldEnum[]
  }

  /**
   * WeekDay without action
   */
  export type WeekDayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekDay
     */
    select?: WeekDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekDayInclude<ExtArgs> | null
  }


  /**
   * Model ReferralCode
   */

  export type AggregateReferralCode = {
    _count: ReferralCodeCountAggregateOutputType | null
    _avg: ReferralCodeAvgAggregateOutputType | null
    _sum: ReferralCodeSumAggregateOutputType | null
    _min: ReferralCodeMinAggregateOutputType | null
    _max: ReferralCodeMaxAggregateOutputType | null
  }

  export type ReferralCodeAvgAggregateOutputType = {
    id: number | null
  }

  export type ReferralCodeSumAggregateOutputType = {
    id: number | null
  }

  export type ReferralCodeMinAggregateOutputType = {
    id: number | null
    code: string | null
    codeChanged: boolean | null
    usedByBonusEarned: boolean | null
    ownedByBonusEarned: boolean | null
  }

  export type ReferralCodeMaxAggregateOutputType = {
    id: number | null
    code: string | null
    codeChanged: boolean | null
    usedByBonusEarned: boolean | null
    ownedByBonusEarned: boolean | null
  }

  export type ReferralCodeCountAggregateOutputType = {
    id: number
    code: number
    codeChanged: number
    usedByBonusEarned: number
    ownedByBonusEarned: number
    _all: number
  }


  export type ReferralCodeAvgAggregateInputType = {
    id?: true
  }

  export type ReferralCodeSumAggregateInputType = {
    id?: true
  }

  export type ReferralCodeMinAggregateInputType = {
    id?: true
    code?: true
    codeChanged?: true
    usedByBonusEarned?: true
    ownedByBonusEarned?: true
  }

  export type ReferralCodeMaxAggregateInputType = {
    id?: true
    code?: true
    codeChanged?: true
    usedByBonusEarned?: true
    ownedByBonusEarned?: true
  }

  export type ReferralCodeCountAggregateInputType = {
    id?: true
    code?: true
    codeChanged?: true
    usedByBonusEarned?: true
    ownedByBonusEarned?: true
    _all?: true
  }

  export type ReferralCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralCode to aggregate.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReferralCodes
    **/
    _count?: true | ReferralCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferralCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferralCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferralCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferralCodeMaxAggregateInputType
  }

  export type GetReferralCodeAggregateType<T extends ReferralCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateReferralCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferralCode[P]>
      : GetScalarType<T[P], AggregateReferralCode[P]>
  }




  export type ReferralCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralCodeWhereInput
    orderBy?: ReferralCodeOrderByWithAggregationInput | ReferralCodeOrderByWithAggregationInput[]
    by: ReferralCodeScalarFieldEnum[] | ReferralCodeScalarFieldEnum
    having?: ReferralCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferralCodeCountAggregateInputType | true
    _avg?: ReferralCodeAvgAggregateInputType
    _sum?: ReferralCodeSumAggregateInputType
    _min?: ReferralCodeMinAggregateInputType
    _max?: ReferralCodeMaxAggregateInputType
  }

  export type ReferralCodeGroupByOutputType = {
    id: number
    code: string
    codeChanged: boolean
    usedByBonusEarned: boolean
    ownedByBonusEarned: boolean
    _count: ReferralCodeCountAggregateOutputType | null
    _avg: ReferralCodeAvgAggregateOutputType | null
    _sum: ReferralCodeSumAggregateOutputType | null
    _min: ReferralCodeMinAggregateOutputType | null
    _max: ReferralCodeMaxAggregateOutputType | null
  }

  type GetReferralCodeGroupByPayload<T extends ReferralCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferralCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferralCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferralCodeGroupByOutputType[P]>
            : GetScalarType<T[P], ReferralCodeGroupByOutputType[P]>
        }
      >
    >


  export type ReferralCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    codeChanged?: boolean
    usedByBonusEarned?: boolean
    ownedByBonusEarned?: boolean
    usedBy?: boolean | ReferralCode$usedByArgs<ExtArgs>
    ownedBy?: boolean | ReferralCode$ownedByArgs<ExtArgs>
    _count?: boolean | ReferralCodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralCode"]>

  export type ReferralCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    codeChanged?: boolean
    usedByBonusEarned?: boolean
    ownedByBonusEarned?: boolean
  }, ExtArgs["result"]["referralCode"]>

  export type ReferralCodeSelectScalar = {
    id?: boolean
    code?: boolean
    codeChanged?: boolean
    usedByBonusEarned?: boolean
    ownedByBonusEarned?: boolean
  }

  export type ReferralCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usedBy?: boolean | ReferralCode$usedByArgs<ExtArgs>
    ownedBy?: boolean | ReferralCode$ownedByArgs<ExtArgs>
    _count?: boolean | ReferralCodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReferralCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ReferralCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReferralCode"
    objects: {
      usedBy: Prisma.$UserPayload<ExtArgs>[]
      ownedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      codeChanged: boolean
      usedByBonusEarned: boolean
      ownedByBonusEarned: boolean
    }, ExtArgs["result"]["referralCode"]>
    composites: {}
  }

  type ReferralCodeGetPayload<S extends boolean | null | undefined | ReferralCodeDefaultArgs> = $Result.GetResult<Prisma.$ReferralCodePayload, S>

  type ReferralCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReferralCodeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReferralCodeCountAggregateInputType | true
    }

  export interface ReferralCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReferralCode'], meta: { name: 'ReferralCode' } }
    /**
     * Find zero or one ReferralCode that matches the filter.
     * @param {ReferralCodeFindUniqueArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReferralCodeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReferralCodeFindUniqueArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ReferralCode that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReferralCodeFindUniqueOrThrowArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReferralCodeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ReferralCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindFirstArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReferralCodeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeFindFirstArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ReferralCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindFirstOrThrowArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReferralCodeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ReferralCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReferralCodes
     * const referralCodes = await prisma.referralCode.findMany()
     * 
     * // Get first 10 ReferralCodes
     * const referralCodes = await prisma.referralCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referralCodeWithIdOnly = await prisma.referralCode.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReferralCodeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ReferralCode.
     * @param {ReferralCodeCreateArgs} args - Arguments to create a ReferralCode.
     * @example
     * // Create one ReferralCode
     * const ReferralCode = await prisma.referralCode.create({
     *   data: {
     *     // ... data to create a ReferralCode
     *   }
     * })
     * 
    **/
    create<T extends ReferralCodeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReferralCodeCreateArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ReferralCodes.
     * @param {ReferralCodeCreateManyArgs} args - Arguments to create many ReferralCodes.
     * @example
     * // Create many ReferralCodes
     * const referralCode = await prisma.referralCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ReferralCodeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReferralCodes and returns the data saved in the database.
     * @param {ReferralCodeCreateManyAndReturnArgs} args - Arguments to create many ReferralCodes.
     * @example
     * // Create many ReferralCodes
     * const referralCode = await prisma.referralCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReferralCodes and only return the `id`
     * const referralCodeWithIdOnly = await prisma.referralCode.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ReferralCodeCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ReferralCode.
     * @param {ReferralCodeDeleteArgs} args - Arguments to delete one ReferralCode.
     * @example
     * // Delete one ReferralCode
     * const ReferralCode = await prisma.referralCode.delete({
     *   where: {
     *     // ... filter to delete one ReferralCode
     *   }
     * })
     * 
    **/
    delete<T extends ReferralCodeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReferralCodeDeleteArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ReferralCode.
     * @param {ReferralCodeUpdateArgs} args - Arguments to update one ReferralCode.
     * @example
     * // Update one ReferralCode
     * const referralCode = await prisma.referralCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReferralCodeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReferralCodeUpdateArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ReferralCodes.
     * @param {ReferralCodeDeleteManyArgs} args - Arguments to filter ReferralCodes to delete.
     * @example
     * // Delete a few ReferralCodes
     * const { count } = await prisma.referralCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReferralCodeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferralCodeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferralCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReferralCodes
     * const referralCode = await prisma.referralCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReferralCodeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReferralCodeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReferralCode.
     * @param {ReferralCodeUpsertArgs} args - Arguments to update or create a ReferralCode.
     * @example
     * // Update or create a ReferralCode
     * const referralCode = await prisma.referralCode.upsert({
     *   create: {
     *     // ... data to create a ReferralCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReferralCode we want to update
     *   }
     * })
    **/
    upsert<T extends ReferralCodeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReferralCodeUpsertArgs<ExtArgs>>
    ): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ReferralCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeCountArgs} args - Arguments to filter ReferralCodes to count.
     * @example
     * // Count the number of ReferralCodes
     * const count = await prisma.referralCode.count({
     *   where: {
     *     // ... the filter for the ReferralCodes we want to count
     *   }
     * })
    **/
    count<T extends ReferralCodeCountArgs>(
      args?: Subset<T, ReferralCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferralCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReferralCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferralCodeAggregateArgs>(args: Subset<T, ReferralCodeAggregateArgs>): Prisma.PrismaPromise<GetReferralCodeAggregateType<T>>

    /**
     * Group by ReferralCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferralCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferralCodeGroupByArgs['orderBy'] }
        : { orderBy?: ReferralCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferralCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferralCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReferralCode model
   */
  readonly fields: ReferralCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReferralCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferralCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usedBy<T extends ReferralCode$usedByArgs<ExtArgs> = {}>(args?: Subset<T, ReferralCode$usedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    ownedBy<T extends ReferralCode$ownedByArgs<ExtArgs> = {}>(args?: Subset<T, ReferralCode$ownedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ReferralCode model
   */ 
  interface ReferralCodeFieldRefs {
    readonly id: FieldRef<"ReferralCode", 'Int'>
    readonly code: FieldRef<"ReferralCode", 'String'>
    readonly codeChanged: FieldRef<"ReferralCode", 'Boolean'>
    readonly usedByBonusEarned: FieldRef<"ReferralCode", 'Boolean'>
    readonly ownedByBonusEarned: FieldRef<"ReferralCode", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ReferralCode findUnique
   */
  export type ReferralCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode findUniqueOrThrow
   */
  export type ReferralCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode findFirst
   */
  export type ReferralCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralCodes.
     */
    distinct?: ReferralCodeScalarFieldEnum | ReferralCodeScalarFieldEnum[]
  }

  /**
   * ReferralCode findFirstOrThrow
   */
  export type ReferralCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralCodes.
     */
    distinct?: ReferralCodeScalarFieldEnum | ReferralCodeScalarFieldEnum[]
  }

  /**
   * ReferralCode findMany
   */
  export type ReferralCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCodes to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    distinct?: ReferralCodeScalarFieldEnum | ReferralCodeScalarFieldEnum[]
  }

  /**
   * ReferralCode create
   */
  export type ReferralCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a ReferralCode.
     */
    data: XOR<ReferralCodeCreateInput, ReferralCodeUncheckedCreateInput>
  }

  /**
   * ReferralCode createMany
   */
  export type ReferralCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReferralCodes.
     */
    data: ReferralCodeCreateManyInput | ReferralCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReferralCode createManyAndReturn
   */
  export type ReferralCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ReferralCodes.
     */
    data: ReferralCodeCreateManyInput | ReferralCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReferralCode update
   */
  export type ReferralCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a ReferralCode.
     */
    data: XOR<ReferralCodeUpdateInput, ReferralCodeUncheckedUpdateInput>
    /**
     * Choose, which ReferralCode to update.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode updateMany
   */
  export type ReferralCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReferralCodes.
     */
    data: XOR<ReferralCodeUpdateManyMutationInput, ReferralCodeUncheckedUpdateManyInput>
    /**
     * Filter which ReferralCodes to update
     */
    where?: ReferralCodeWhereInput
  }

  /**
   * ReferralCode upsert
   */
  export type ReferralCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the ReferralCode to update in case it exists.
     */
    where: ReferralCodeWhereUniqueInput
    /**
     * In case the ReferralCode found by the `where` argument doesn't exist, create a new ReferralCode with this data.
     */
    create: XOR<ReferralCodeCreateInput, ReferralCodeUncheckedCreateInput>
    /**
     * In case the ReferralCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferralCodeUpdateInput, ReferralCodeUncheckedUpdateInput>
  }

  /**
   * ReferralCode delete
   */
  export type ReferralCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter which ReferralCode to delete.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode deleteMany
   */
  export type ReferralCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralCodes to delete
     */
    where?: ReferralCodeWhereInput
  }

  /**
   * ReferralCode.usedBy
   */
  export type ReferralCode$usedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * ReferralCode.ownedBy
   */
  export type ReferralCode$ownedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ReferralCode without action
   */
  export type ReferralCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
  }


  /**
   * Model RentalToken
   */

  export type AggregateRentalToken = {
    _count: RentalTokenCountAggregateOutputType | null
    _avg: RentalTokenAvgAggregateOutputType | null
    _sum: RentalTokenSumAggregateOutputType | null
    _min: RentalTokenMinAggregateOutputType | null
    _max: RentalTokenMaxAggregateOutputType | null
  }

  export type RentalTokenAvgAggregateOutputType = {
    id: number | null
  }

  export type RentalTokenSumAggregateOutputType = {
    id: number | null
  }

  export type RentalTokenMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    startTime: Date | null
    endTime: Date | null
    landTokenId: string | null
    rentalTokenId: string | null
  }

  export type RentalTokenMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updateAt: Date | null
    startTime: Date | null
    endTime: Date | null
    landTokenId: string | null
    rentalTokenId: string | null
  }

  export type RentalTokenCountAggregateOutputType = {
    id: number
    createdAt: number
    updateAt: number
    startTime: number
    endTime: number
    landTokenId: number
    rentalTokenId: number
    _all: number
  }


  export type RentalTokenAvgAggregateInputType = {
    id?: true
  }

  export type RentalTokenSumAggregateInputType = {
    id?: true
  }

  export type RentalTokenMinAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    startTime?: true
    endTime?: true
    landTokenId?: true
    rentalTokenId?: true
  }

  export type RentalTokenMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    startTime?: true
    endTime?: true
    landTokenId?: true
    rentalTokenId?: true
  }

  export type RentalTokenCountAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    startTime?: true
    endTime?: true
    landTokenId?: true
    rentalTokenId?: true
    _all?: true
  }

  export type RentalTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RentalToken to aggregate.
     */
    where?: RentalTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentalTokens to fetch.
     */
    orderBy?: RentalTokenOrderByWithRelationInput | RentalTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RentalTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentalTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentalTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RentalTokens
    **/
    _count?: true | RentalTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RentalTokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RentalTokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RentalTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RentalTokenMaxAggregateInputType
  }

  export type GetRentalTokenAggregateType<T extends RentalTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRentalToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRentalToken[P]>
      : GetScalarType<T[P], AggregateRentalToken[P]>
  }




  export type RentalTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentalTokenWhereInput
    orderBy?: RentalTokenOrderByWithAggregationInput | RentalTokenOrderByWithAggregationInput[]
    by: RentalTokenScalarFieldEnum[] | RentalTokenScalarFieldEnum
    having?: RentalTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RentalTokenCountAggregateInputType | true
    _avg?: RentalTokenAvgAggregateInputType
    _sum?: RentalTokenSumAggregateInputType
    _min?: RentalTokenMinAggregateInputType
    _max?: RentalTokenMaxAggregateInputType
  }

  export type RentalTokenGroupByOutputType = {
    id: number
    createdAt: Date
    updateAt: Date
    startTime: Date
    endTime: Date
    landTokenId: string
    rentalTokenId: string | null
    _count: RentalTokenCountAggregateOutputType | null
    _avg: RentalTokenAvgAggregateOutputType | null
    _sum: RentalTokenSumAggregateOutputType | null
    _min: RentalTokenMinAggregateOutputType | null
    _max: RentalTokenMaxAggregateOutputType | null
  }

  type GetRentalTokenGroupByPayload<T extends RentalTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RentalTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RentalTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RentalTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RentalTokenGroupByOutputType[P]>
        }
      >
    >


  export type RentalTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    startTime?: boolean
    endTime?: boolean
    landTokenId?: boolean
    rentalTokenId?: boolean
  }, ExtArgs["result"]["rentalToken"]>

  export type RentalTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    startTime?: boolean
    endTime?: boolean
    landTokenId?: boolean
    rentalTokenId?: boolean
  }, ExtArgs["result"]["rentalToken"]>

  export type RentalTokenSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    startTime?: boolean
    endTime?: boolean
    landTokenId?: boolean
    rentalTokenId?: boolean
  }


  export type $RentalTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RentalToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updateAt: Date
      startTime: Date
      endTime: Date
      landTokenId: string
      rentalTokenId: string | null
    }, ExtArgs["result"]["rentalToken"]>
    composites: {}
  }

  type RentalTokenGetPayload<S extends boolean | null | undefined | RentalTokenDefaultArgs> = $Result.GetResult<Prisma.$RentalTokenPayload, S>

  type RentalTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RentalTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RentalTokenCountAggregateInputType | true
    }

  export interface RentalTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RentalToken'], meta: { name: 'RentalToken' } }
    /**
     * Find zero or one RentalToken that matches the filter.
     * @param {RentalTokenFindUniqueArgs} args - Arguments to find a RentalToken
     * @example
     * // Get one RentalToken
     * const rentalToken = await prisma.rentalToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RentalTokenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RentalTokenFindUniqueArgs<ExtArgs>>
    ): Prisma__RentalTokenClient<$Result.GetResult<Prisma.$RentalTokenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RentalToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RentalTokenFindUniqueOrThrowArgs} args - Arguments to find a RentalToken
     * @example
     * // Get one RentalToken
     * const rentalToken = await prisma.rentalToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RentalTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RentalTokenClient<$Result.GetResult<Prisma.$RentalTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RentalToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalTokenFindFirstArgs} args - Arguments to find a RentalToken
     * @example
     * // Get one RentalToken
     * const rentalToken = await prisma.rentalToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RentalTokenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalTokenFindFirstArgs<ExtArgs>>
    ): Prisma__RentalTokenClient<$Result.GetResult<Prisma.$RentalTokenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RentalToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalTokenFindFirstOrThrowArgs} args - Arguments to find a RentalToken
     * @example
     * // Get one RentalToken
     * const rentalToken = await prisma.rentalToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RentalTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RentalTokenClient<$Result.GetResult<Prisma.$RentalTokenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RentalTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RentalTokens
     * const rentalTokens = await prisma.rentalToken.findMany()
     * 
     * // Get first 10 RentalTokens
     * const rentalTokens = await prisma.rentalToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rentalTokenWithIdOnly = await prisma.rentalToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RentalTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentalTokenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RentalToken.
     * @param {RentalTokenCreateArgs} args - Arguments to create a RentalToken.
     * @example
     * // Create one RentalToken
     * const RentalToken = await prisma.rentalToken.create({
     *   data: {
     *     // ... data to create a RentalToken
     *   }
     * })
     * 
    **/
    create<T extends RentalTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RentalTokenCreateArgs<ExtArgs>>
    ): Prisma__RentalTokenClient<$Result.GetResult<Prisma.$RentalTokenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RentalTokens.
     * @param {RentalTokenCreateManyArgs} args - Arguments to create many RentalTokens.
     * @example
     * // Create many RentalTokens
     * const rentalToken = await prisma.rentalToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends RentalTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RentalTokens and returns the data saved in the database.
     * @param {RentalTokenCreateManyAndReturnArgs} args - Arguments to create many RentalTokens.
     * @example
     * // Create many RentalTokens
     * const rentalToken = await prisma.rentalToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RentalTokens and only return the `id`
     * const rentalTokenWithIdOnly = await prisma.rentalToken.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends RentalTokenCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalTokenCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentalTokenPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a RentalToken.
     * @param {RentalTokenDeleteArgs} args - Arguments to delete one RentalToken.
     * @example
     * // Delete one RentalToken
     * const RentalToken = await prisma.rentalToken.delete({
     *   where: {
     *     // ... filter to delete one RentalToken
     *   }
     * })
     * 
    **/
    delete<T extends RentalTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RentalTokenDeleteArgs<ExtArgs>>
    ): Prisma__RentalTokenClient<$Result.GetResult<Prisma.$RentalTokenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RentalToken.
     * @param {RentalTokenUpdateArgs} args - Arguments to update one RentalToken.
     * @example
     * // Update one RentalToken
     * const rentalToken = await prisma.rentalToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RentalTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RentalTokenUpdateArgs<ExtArgs>>
    ): Prisma__RentalTokenClient<$Result.GetResult<Prisma.$RentalTokenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RentalTokens.
     * @param {RentalTokenDeleteManyArgs} args - Arguments to filter RentalTokens to delete.
     * @example
     * // Delete a few RentalTokens
     * const { count } = await prisma.rentalToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RentalTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RentalTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RentalTokens
     * const rentalToken = await prisma.rentalToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RentalTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RentalTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RentalToken.
     * @param {RentalTokenUpsertArgs} args - Arguments to update or create a RentalToken.
     * @example
     * // Update or create a RentalToken
     * const rentalToken = await prisma.rentalToken.upsert({
     *   create: {
     *     // ... data to create a RentalToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RentalToken we want to update
     *   }
     * })
    **/
    upsert<T extends RentalTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RentalTokenUpsertArgs<ExtArgs>>
    ): Prisma__RentalTokenClient<$Result.GetResult<Prisma.$RentalTokenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RentalTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalTokenCountArgs} args - Arguments to filter RentalTokens to count.
     * @example
     * // Count the number of RentalTokens
     * const count = await prisma.rentalToken.count({
     *   where: {
     *     // ... the filter for the RentalTokens we want to count
     *   }
     * })
    **/
    count<T extends RentalTokenCountArgs>(
      args?: Subset<T, RentalTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RentalTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RentalToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RentalTokenAggregateArgs>(args: Subset<T, RentalTokenAggregateArgs>): Prisma.PrismaPromise<GetRentalTokenAggregateType<T>>

    /**
     * Group by RentalToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RentalTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RentalTokenGroupByArgs['orderBy'] }
        : { orderBy?: RentalTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RentalTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRentalTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RentalToken model
   */
  readonly fields: RentalTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RentalToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RentalTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RentalToken model
   */ 
  interface RentalTokenFieldRefs {
    readonly id: FieldRef<"RentalToken", 'Int'>
    readonly createdAt: FieldRef<"RentalToken", 'DateTime'>
    readonly updateAt: FieldRef<"RentalToken", 'DateTime'>
    readonly startTime: FieldRef<"RentalToken", 'DateTime'>
    readonly endTime: FieldRef<"RentalToken", 'DateTime'>
    readonly landTokenId: FieldRef<"RentalToken", 'String'>
    readonly rentalTokenId: FieldRef<"RentalToken", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RentalToken findUnique
   */
  export type RentalTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentalToken
     */
    select?: RentalTokenSelect<ExtArgs> | null
    /**
     * Filter, which RentalToken to fetch.
     */
    where: RentalTokenWhereUniqueInput
  }

  /**
   * RentalToken findUniqueOrThrow
   */
  export type RentalTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentalToken
     */
    select?: RentalTokenSelect<ExtArgs> | null
    /**
     * Filter, which RentalToken to fetch.
     */
    where: RentalTokenWhereUniqueInput
  }

  /**
   * RentalToken findFirst
   */
  export type RentalTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentalToken
     */
    select?: RentalTokenSelect<ExtArgs> | null
    /**
     * Filter, which RentalToken to fetch.
     */
    where?: RentalTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentalTokens to fetch.
     */
    orderBy?: RentalTokenOrderByWithRelationInput | RentalTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RentalTokens.
     */
    cursor?: RentalTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentalTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentalTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RentalTokens.
     */
    distinct?: RentalTokenScalarFieldEnum | RentalTokenScalarFieldEnum[]
  }

  /**
   * RentalToken findFirstOrThrow
   */
  export type RentalTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentalToken
     */
    select?: RentalTokenSelect<ExtArgs> | null
    /**
     * Filter, which RentalToken to fetch.
     */
    where?: RentalTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentalTokens to fetch.
     */
    orderBy?: RentalTokenOrderByWithRelationInput | RentalTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RentalTokens.
     */
    cursor?: RentalTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentalTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentalTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RentalTokens.
     */
    distinct?: RentalTokenScalarFieldEnum | RentalTokenScalarFieldEnum[]
  }

  /**
   * RentalToken findMany
   */
  export type RentalTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentalToken
     */
    select?: RentalTokenSelect<ExtArgs> | null
    /**
     * Filter, which RentalTokens to fetch.
     */
    where?: RentalTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentalTokens to fetch.
     */
    orderBy?: RentalTokenOrderByWithRelationInput | RentalTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RentalTokens.
     */
    cursor?: RentalTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentalTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentalTokens.
     */
    skip?: number
    distinct?: RentalTokenScalarFieldEnum | RentalTokenScalarFieldEnum[]
  }

  /**
   * RentalToken create
   */
  export type RentalTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentalToken
     */
    select?: RentalTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a RentalToken.
     */
    data: XOR<RentalTokenCreateInput, RentalTokenUncheckedCreateInput>
  }

  /**
   * RentalToken createMany
   */
  export type RentalTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RentalTokens.
     */
    data: RentalTokenCreateManyInput | RentalTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RentalToken createManyAndReturn
   */
  export type RentalTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentalToken
     */
    select?: RentalTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RentalTokens.
     */
    data: RentalTokenCreateManyInput | RentalTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RentalToken update
   */
  export type RentalTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentalToken
     */
    select?: RentalTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a RentalToken.
     */
    data: XOR<RentalTokenUpdateInput, RentalTokenUncheckedUpdateInput>
    /**
     * Choose, which RentalToken to update.
     */
    where: RentalTokenWhereUniqueInput
  }

  /**
   * RentalToken updateMany
   */
  export type RentalTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RentalTokens.
     */
    data: XOR<RentalTokenUpdateManyMutationInput, RentalTokenUncheckedUpdateManyInput>
    /**
     * Filter which RentalTokens to update
     */
    where?: RentalTokenWhereInput
  }

  /**
   * RentalToken upsert
   */
  export type RentalTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentalToken
     */
    select?: RentalTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the RentalToken to update in case it exists.
     */
    where: RentalTokenWhereUniqueInput
    /**
     * In case the RentalToken found by the `where` argument doesn't exist, create a new RentalToken with this data.
     */
    create: XOR<RentalTokenCreateInput, RentalTokenUncheckedCreateInput>
    /**
     * In case the RentalToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RentalTokenUpdateInput, RentalTokenUncheckedUpdateInput>
  }

  /**
   * RentalToken delete
   */
  export type RentalTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentalToken
     */
    select?: RentalTokenSelect<ExtArgs> | null
    /**
     * Filter which RentalToken to delete.
     */
    where: RentalTokenWhereUniqueInput
  }

  /**
   * RentalToken deleteMany
   */
  export type RentalTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RentalTokens to delete
     */
    where?: RentalTokenWhereInput
  }

  /**
   * RentalToken without action
   */
  export type RentalTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentalToken
     */
    select?: RentalTokenSelect<ExtArgs> | null
  }


  /**
   * Model Reward
   */

  export type AggregateReward = {
    _count: RewardCountAggregateOutputType | null
    _avg: RewardAvgAggregateOutputType | null
    _sum: RewardSumAggregateOutputType | null
    _min: RewardMinAggregateOutputType | null
    _max: RewardMaxAggregateOutputType | null
  }

  export type RewardAvgAggregateOutputType = {
    point: number | null
  }

  export type RewardSumAggregateOutputType = {
    point: number | null
  }

  export type RewardMinAggregateOutputType = {
    id: string | null
    rewardId: string | null
    blockchainAddress: string | null
    taskType: $Enums.TaskType | null
    point: number | null
    completed: boolean | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type RewardMaxAggregateOutputType = {
    id: string | null
    rewardId: string | null
    blockchainAddress: string | null
    taskType: $Enums.TaskType | null
    point: number | null
    completed: boolean | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type RewardCountAggregateOutputType = {
    id: number
    rewardId: number
    blockchainAddress: number
    taskType: number
    point: number
    completed: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type RewardAvgAggregateInputType = {
    point?: true
  }

  export type RewardSumAggregateInputType = {
    point?: true
  }

  export type RewardMinAggregateInputType = {
    id?: true
    rewardId?: true
    blockchainAddress?: true
    taskType?: true
    point?: true
    completed?: true
    createdAt?: true
    updateAt?: true
  }

  export type RewardMaxAggregateInputType = {
    id?: true
    rewardId?: true
    blockchainAddress?: true
    taskType?: true
    point?: true
    completed?: true
    createdAt?: true
    updateAt?: true
  }

  export type RewardCountAggregateInputType = {
    id?: true
    rewardId?: true
    blockchainAddress?: true
    taskType?: true
    point?: true
    completed?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type RewardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reward to aggregate.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rewards
    **/
    _count?: true | RewardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RewardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RewardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RewardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RewardMaxAggregateInputType
  }

  export type GetRewardAggregateType<T extends RewardAggregateArgs> = {
        [P in keyof T & keyof AggregateReward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReward[P]>
      : GetScalarType<T[P], AggregateReward[P]>
  }




  export type RewardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardWhereInput
    orderBy?: RewardOrderByWithAggregationInput | RewardOrderByWithAggregationInput[]
    by: RewardScalarFieldEnum[] | RewardScalarFieldEnum
    having?: RewardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RewardCountAggregateInputType | true
    _avg?: RewardAvgAggregateInputType
    _sum?: RewardSumAggregateInputType
    _min?: RewardMinAggregateInputType
    _max?: RewardMaxAggregateInputType
  }

  export type RewardGroupByOutputType = {
    id: string
    rewardId: string
    blockchainAddress: string
    taskType: $Enums.TaskType
    point: number
    completed: boolean
    createdAt: Date
    updateAt: Date
    _count: RewardCountAggregateOutputType | null
    _avg: RewardAvgAggregateOutputType | null
    _sum: RewardSumAggregateOutputType | null
    _min: RewardMinAggregateOutputType | null
    _max: RewardMaxAggregateOutputType | null
  }

  type GetRewardGroupByPayload<T extends RewardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RewardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RewardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RewardGroupByOutputType[P]>
            : GetScalarType<T[P], RewardGroupByOutputType[P]>
        }
      >
    >


  export type RewardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rewardId?: boolean
    blockchainAddress?: boolean
    taskType?: boolean
    point?: boolean
    completed?: boolean
    createdAt?: boolean
    updateAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reward"]>

  export type RewardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rewardId?: boolean
    blockchainAddress?: boolean
    taskType?: boolean
    point?: boolean
    completed?: boolean
    createdAt?: boolean
    updateAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reward"]>

  export type RewardSelectScalar = {
    id?: boolean
    rewardId?: boolean
    blockchainAddress?: boolean
    taskType?: boolean
    point?: boolean
    completed?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type RewardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RewardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RewardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reward"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rewardId: string
      blockchainAddress: string
      taskType: $Enums.TaskType
      point: number
      completed: boolean
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["reward"]>
    composites: {}
  }

  type RewardGetPayload<S extends boolean | null | undefined | RewardDefaultArgs> = $Result.GetResult<Prisma.$RewardPayload, S>

  type RewardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RewardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RewardCountAggregateInputType | true
    }

  export interface RewardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reward'], meta: { name: 'Reward' } }
    /**
     * Find zero or one Reward that matches the filter.
     * @param {RewardFindUniqueArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RewardFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RewardFindUniqueArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reward that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RewardFindUniqueOrThrowArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RewardFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindFirstArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RewardFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardFindFirstArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindFirstOrThrowArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RewardFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Rewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rewards
     * const rewards = await prisma.reward.findMany()
     * 
     * // Get first 10 Rewards
     * const rewards = await prisma.reward.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rewardWithIdOnly = await prisma.reward.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RewardFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reward.
     * @param {RewardCreateArgs} args - Arguments to create a Reward.
     * @example
     * // Create one Reward
     * const Reward = await prisma.reward.create({
     *   data: {
     *     // ... data to create a Reward
     *   }
     * })
     * 
    **/
    create<T extends RewardCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RewardCreateArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Rewards.
     * @param {RewardCreateManyArgs} args - Arguments to create many Rewards.
     * @example
     * // Create many Rewards
     * const reward = await prisma.reward.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends RewardCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rewards and returns the data saved in the database.
     * @param {RewardCreateManyAndReturnArgs} args - Arguments to create many Rewards.
     * @example
     * // Create many Rewards
     * const reward = await prisma.reward.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rewards and only return the `id`
     * const rewardWithIdOnly = await prisma.reward.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends RewardCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Reward.
     * @param {RewardDeleteArgs} args - Arguments to delete one Reward.
     * @example
     * // Delete one Reward
     * const Reward = await prisma.reward.delete({
     *   where: {
     *     // ... filter to delete one Reward
     *   }
     * })
     * 
    **/
    delete<T extends RewardDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RewardDeleteArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reward.
     * @param {RewardUpdateArgs} args - Arguments to update one Reward.
     * @example
     * // Update one Reward
     * const reward = await prisma.reward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RewardUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RewardUpdateArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Rewards.
     * @param {RewardDeleteManyArgs} args - Arguments to filter Rewards to delete.
     * @example
     * // Delete a few Rewards
     * const { count } = await prisma.reward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RewardDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rewards
     * const reward = await prisma.reward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RewardUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RewardUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reward.
     * @param {RewardUpsertArgs} args - Arguments to update or create a Reward.
     * @example
     * // Update or create a Reward
     * const reward = await prisma.reward.upsert({
     *   create: {
     *     // ... data to create a Reward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reward we want to update
     *   }
     * })
    **/
    upsert<T extends RewardUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RewardUpsertArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Rewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardCountArgs} args - Arguments to filter Rewards to count.
     * @example
     * // Count the number of Rewards
     * const count = await prisma.reward.count({
     *   where: {
     *     // ... the filter for the Rewards we want to count
     *   }
     * })
    **/
    count<T extends RewardCountArgs>(
      args?: Subset<T, RewardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RewardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RewardAggregateArgs>(args: Subset<T, RewardAggregateArgs>): Prisma.PrismaPromise<GetRewardAggregateType<T>>

    /**
     * Group by Reward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RewardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RewardGroupByArgs['orderBy'] }
        : { orderBy?: RewardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reward model
   */
  readonly fields: RewardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RewardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reward model
   */ 
  interface RewardFieldRefs {
    readonly id: FieldRef<"Reward", 'String'>
    readonly rewardId: FieldRef<"Reward", 'String'>
    readonly blockchainAddress: FieldRef<"Reward", 'String'>
    readonly taskType: FieldRef<"Reward", 'TaskType'>
    readonly point: FieldRef<"Reward", 'Float'>
    readonly completed: FieldRef<"Reward", 'Boolean'>
    readonly createdAt: FieldRef<"Reward", 'DateTime'>
    readonly updateAt: FieldRef<"Reward", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reward findUnique
   */
  export type RewardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward findUniqueOrThrow
   */
  export type RewardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward findFirst
   */
  export type RewardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rewards.
     */
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward findFirstOrThrow
   */
  export type RewardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rewards.
     */
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward findMany
   */
  export type RewardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Rewards to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward create
   */
  export type RewardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The data needed to create a Reward.
     */
    data: XOR<RewardCreateInput, RewardUncheckedCreateInput>
  }

  /**
   * Reward createMany
   */
  export type RewardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rewards.
     */
    data: RewardCreateManyInput | RewardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reward createManyAndReturn
   */
  export type RewardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Rewards.
     */
    data: RewardCreateManyInput | RewardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reward update
   */
  export type RewardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The data needed to update a Reward.
     */
    data: XOR<RewardUpdateInput, RewardUncheckedUpdateInput>
    /**
     * Choose, which Reward to update.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward updateMany
   */
  export type RewardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rewards.
     */
    data: XOR<RewardUpdateManyMutationInput, RewardUncheckedUpdateManyInput>
    /**
     * Filter which Rewards to update
     */
    where?: RewardWhereInput
  }

  /**
   * Reward upsert
   */
  export type RewardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The filter to search for the Reward to update in case it exists.
     */
    where: RewardWhereUniqueInput
    /**
     * In case the Reward found by the `where` argument doesn't exist, create a new Reward with this data.
     */
    create: XOR<RewardCreateInput, RewardUncheckedCreateInput>
    /**
     * In case the Reward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RewardUpdateInput, RewardUncheckedUpdateInput>
  }

  /**
   * Reward delete
   */
  export type RewardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter which Reward to delete.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward deleteMany
   */
  export type RewardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rewards to delete
     */
    where?: RewardWhereInput
  }

  /**
   * Reward without action
   */
  export type RewardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    username: 'username',
    password: 'password',
    name: 'name',
    email: 'email',
    blockchainAddress: 'blockchainAddress',
    isAdmin: 'isAdmin',
    newsletter: 'newsletter',
    categoryId: 'categoryId',
    phoneNumber: 'phoneNumber',
    totalPoint: 'totalPoint',
    KYCStatusId: 'KYCStatusId',
    isActive: 'isActive',
    usedReferralCodeId: 'usedReferralCodeId',
    ownedReferralCodeId: 'ownedReferralCodeId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StatusScalarFieldEnum: {
    id: 'id',
    type: 'type'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    type: 'type'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const PropertyScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    title: 'title',
    transitFee: 'transitFee',
    address: 'address',
    timezone: 'timezone',
    hasLandingDeck: 'hasLandingDeck',
    hasChargingStation: 'hasChargingStation',
    hasStorageHub: 'hasStorageHub',
    isFixedTransitFee: 'isFixedTransitFee',
    isRentableAirspace: 'isRentableAirspace',
    ownerId: 'ownerId',
    noFlyZone: 'noFlyZone',
    latitude: 'latitude',
    longitude: 'longitude',
    propertyStatusId: 'propertyStatusId',
    isActive: 'isActive'
  };

  export type PropertyScalarFieldEnum = (typeof PropertyScalarFieldEnum)[keyof typeof PropertyScalarFieldEnum]


  export const PropertyStatusScalarFieldEnum: {
    id: 'id',
    type: 'type'
  };

  export type PropertyStatusScalarFieldEnum = (typeof PropertyStatusScalarFieldEnum)[keyof typeof PropertyStatusScalarFieldEnum]


  export const LayerScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    tokenId: 'tokenId',
    propertyId: 'propertyId'
  };

  export type LayerScalarFieldEnum = (typeof LayerScalarFieldEnum)[keyof typeof LayerScalarFieldEnum]


  export const VertexesScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    latitude: 'latitude',
    longitude: 'longitude',
    propertyId: 'propertyId'
  };

  export type VertexesScalarFieldEnum = (typeof VertexesScalarFieldEnum)[keyof typeof VertexesScalarFieldEnum]


  export const RentScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    tokenId: 'tokenId',
    startTime: 'startTime',
    endTime: 'endTime',
    renterId: 'renterId',
    layerId: 'layerId',
    isActive: 'isActive'
  };

  export type RentScalarFieldEnum = (typeof RentScalarFieldEnum)[keyof typeof RentScalarFieldEnum]


  export const NewsletterScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    title: 'title',
    text: 'text',
    link: 'link',
    date: 'date'
  };

  export type NewsletterScalarFieldEnum = (typeof NewsletterScalarFieldEnum)[keyof typeof NewsletterScalarFieldEnum]


  export const WeekDayRangeScalarFieldEnum: {
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    fromTime: 'fromTime',
    toTime: 'toTime',
    isAvailable: 'isAvailable',
    weekDayId: 'weekDayId',
    propertyId: 'propertyId'
  };

  export type WeekDayRangeScalarFieldEnum = (typeof WeekDayRangeScalarFieldEnum)[keyof typeof WeekDayRangeScalarFieldEnum]


  export const WeekDayScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type WeekDayScalarFieldEnum = (typeof WeekDayScalarFieldEnum)[keyof typeof WeekDayScalarFieldEnum]


  export const ReferralCodeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    codeChanged: 'codeChanged',
    usedByBonusEarned: 'usedByBonusEarned',
    ownedByBonusEarned: 'ownedByBonusEarned'
  };

  export type ReferralCodeScalarFieldEnum = (typeof ReferralCodeScalarFieldEnum)[keyof typeof ReferralCodeScalarFieldEnum]


  export const RentalTokenScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    startTime: 'startTime',
    endTime: 'endTime',
    landTokenId: 'landTokenId',
    rentalTokenId: 'rentalTokenId'
  };

  export type RentalTokenScalarFieldEnum = (typeof RentalTokenScalarFieldEnum)[keyof typeof RentalTokenScalarFieldEnum]


  export const RewardScalarFieldEnum: {
    id: 'id',
    rewardId: 'rewardId',
    blockchainAddress: 'blockchainAddress',
    taskType: 'taskType',
    point: 'point',
    completed: 'completed',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type RewardScalarFieldEnum = (typeof RewardScalarFieldEnum)[keyof typeof RewardScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'TaskType'
   */
  export type EnumTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskType'>
    


  /**
   * Reference to a field of type 'TaskType[]'
   */
  export type ListEnumTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
    username?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    blockchainAddress?: StringFilter<"User"> | string
    isAdmin?: BoolFilter<"User"> | boolean
    newsletter?: BoolFilter<"User"> | boolean
    categoryId?: IntFilter<"User"> | number
    phoneNumber?: StringFilter<"User"> | string
    totalPoint?: FloatFilter<"User"> | number
    KYCStatusId?: IntFilter<"User"> | number
    isActive?: BoolFilter<"User"> | boolean
    usedReferralCodeId?: IntNullableFilter<"User"> | number | null
    ownedReferralCodeId?: IntNullableFilter<"User"> | number | null
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    KYCStatus?: XOR<StatusRelationFilter, StatusWhereInput>
    properties?: PropertyListRelationFilter
    Rent?: RentListRelationFilter
    usedReferralCode?: XOR<ReferralCodeNullableRelationFilter, ReferralCodeWhereInput> | null
    ownedReferralCode?: XOR<ReferralCodeNullableRelationFilter, ReferralCodeWhereInput> | null
    Reward?: RewardListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrder
    blockchainAddress?: SortOrder
    isAdmin?: SortOrder
    newsletter?: SortOrder
    categoryId?: SortOrder
    phoneNumber?: SortOrder
    totalPoint?: SortOrder
    KYCStatusId?: SortOrder
    isActive?: SortOrder
    usedReferralCodeId?: SortOrderInput | SortOrder
    ownedReferralCodeId?: SortOrderInput | SortOrder
    category?: CategoryOrderByWithRelationInput
    KYCStatus?: StatusOrderByWithRelationInput
    properties?: PropertyOrderByRelationAggregateInput
    Rent?: RentOrderByRelationAggregateInput
    usedReferralCode?: ReferralCodeOrderByWithRelationInput
    ownedReferralCode?: ReferralCodeOrderByWithRelationInput
    Reward?: RewardOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    blockchainAddress?: string
    ownedReferralCodeId?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
    username?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    isAdmin?: BoolFilter<"User"> | boolean
    newsletter?: BoolFilter<"User"> | boolean
    categoryId?: IntFilter<"User"> | number
    phoneNumber?: StringFilter<"User"> | string
    totalPoint?: FloatFilter<"User"> | number
    KYCStatusId?: IntFilter<"User"> | number
    isActive?: BoolFilter<"User"> | boolean
    usedReferralCodeId?: IntNullableFilter<"User"> | number | null
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    KYCStatus?: XOR<StatusRelationFilter, StatusWhereInput>
    properties?: PropertyListRelationFilter
    Rent?: RentListRelationFilter
    usedReferralCode?: XOR<ReferralCodeNullableRelationFilter, ReferralCodeWhereInput> | null
    ownedReferralCode?: XOR<ReferralCodeNullableRelationFilter, ReferralCodeWhereInput> | null
    Reward?: RewardListRelationFilter
  }, "id" | "blockchainAddress" | "ownedReferralCodeId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrder
    blockchainAddress?: SortOrder
    isAdmin?: SortOrder
    newsletter?: SortOrder
    categoryId?: SortOrder
    phoneNumber?: SortOrder
    totalPoint?: SortOrder
    KYCStatusId?: SortOrder
    isActive?: SortOrder
    usedReferralCodeId?: SortOrderInput | SortOrder
    ownedReferralCodeId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    blockchainAddress?: StringWithAggregatesFilter<"User"> | string
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    newsletter?: BoolWithAggregatesFilter<"User"> | boolean
    categoryId?: IntWithAggregatesFilter<"User"> | number
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    totalPoint?: FloatWithAggregatesFilter<"User"> | number
    KYCStatusId?: IntWithAggregatesFilter<"User"> | number
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    usedReferralCodeId?: IntNullableWithAggregatesFilter<"User"> | number | null
    ownedReferralCodeId?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type StatusWhereInput = {
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    id?: IntFilter<"Status"> | number
    type?: StringFilter<"Status"> | string
    users?: UserListRelationFilter
  }

  export type StatusOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type StatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    type?: StringFilter<"Status"> | string
    users?: UserListRelationFilter
  }, "id">

  export type StatusOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    _count?: StatusCountOrderByAggregateInput
    _avg?: StatusAvgOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
    _sum?: StatusSumOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    OR?: StatusScalarWhereWithAggregatesInput[]
    NOT?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Status"> | number
    type?: StringWithAggregatesFilter<"Status"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    type?: StringFilter<"Category"> | string
    users?: UserListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    type?: StringFilter<"Category"> | string
    users?: UserListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    type?: StringWithAggregatesFilter<"Category"> | string
  }

  export type PropertyWhereInput = {
    AND?: PropertyWhereInput | PropertyWhereInput[]
    OR?: PropertyWhereInput[]
    NOT?: PropertyWhereInput | PropertyWhereInput[]
    id?: IntFilter<"Property"> | number
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updateAt?: DateTimeFilter<"Property"> | Date | string
    title?: StringFilter<"Property"> | string
    transitFee?: StringFilter<"Property"> | string
    address?: StringFilter<"Property"> | string
    timezone?: StringFilter<"Property"> | string
    hasLandingDeck?: BoolFilter<"Property"> | boolean
    hasChargingStation?: BoolFilter<"Property"> | boolean
    hasStorageHub?: BoolFilter<"Property"> | boolean
    isFixedTransitFee?: BoolFilter<"Property"> | boolean
    isRentableAirspace?: BoolFilter<"Property"> | boolean
    ownerId?: IntFilter<"Property"> | number
    noFlyZone?: BoolFilter<"Property"> | boolean
    latitude?: FloatFilter<"Property"> | number
    longitude?: FloatFilter<"Property"> | number
    propertyStatusId?: IntFilter<"Property"> | number
    isActive?: BoolFilter<"Property"> | boolean
    weekDayRanges?: WeekDayRangeListRelationFilter
    owner?: XOR<UserRelationFilter, UserWhereInput>
    layers?: LayerListRelationFilter
    vertexes?: VertexesListRelationFilter
    propertyStatus?: XOR<PropertyStatusRelationFilter, PropertyStatusWhereInput>
  }

  export type PropertyOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    title?: SortOrder
    transitFee?: SortOrder
    address?: SortOrder
    timezone?: SortOrder
    hasLandingDeck?: SortOrder
    hasChargingStation?: SortOrder
    hasStorageHub?: SortOrder
    isFixedTransitFee?: SortOrder
    isRentableAirspace?: SortOrder
    ownerId?: SortOrder
    noFlyZone?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyStatusId?: SortOrder
    isActive?: SortOrder
    weekDayRanges?: WeekDayRangeOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
    layers?: LayerOrderByRelationAggregateInput
    vertexes?: VertexesOrderByRelationAggregateInput
    propertyStatus?: PropertyStatusOrderByWithRelationInput
  }

  export type PropertyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PropertyWhereInput | PropertyWhereInput[]
    OR?: PropertyWhereInput[]
    NOT?: PropertyWhereInput | PropertyWhereInput[]
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updateAt?: DateTimeFilter<"Property"> | Date | string
    title?: StringFilter<"Property"> | string
    transitFee?: StringFilter<"Property"> | string
    address?: StringFilter<"Property"> | string
    timezone?: StringFilter<"Property"> | string
    hasLandingDeck?: BoolFilter<"Property"> | boolean
    hasChargingStation?: BoolFilter<"Property"> | boolean
    hasStorageHub?: BoolFilter<"Property"> | boolean
    isFixedTransitFee?: BoolFilter<"Property"> | boolean
    isRentableAirspace?: BoolFilter<"Property"> | boolean
    ownerId?: IntFilter<"Property"> | number
    noFlyZone?: BoolFilter<"Property"> | boolean
    latitude?: FloatFilter<"Property"> | number
    longitude?: FloatFilter<"Property"> | number
    propertyStatusId?: IntFilter<"Property"> | number
    isActive?: BoolFilter<"Property"> | boolean
    weekDayRanges?: WeekDayRangeListRelationFilter
    owner?: XOR<UserRelationFilter, UserWhereInput>
    layers?: LayerListRelationFilter
    vertexes?: VertexesListRelationFilter
    propertyStatus?: XOR<PropertyStatusRelationFilter, PropertyStatusWhereInput>
  }, "id">

  export type PropertyOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    title?: SortOrder
    transitFee?: SortOrder
    address?: SortOrder
    timezone?: SortOrder
    hasLandingDeck?: SortOrder
    hasChargingStation?: SortOrder
    hasStorageHub?: SortOrder
    isFixedTransitFee?: SortOrder
    isRentableAirspace?: SortOrder
    ownerId?: SortOrder
    noFlyZone?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyStatusId?: SortOrder
    isActive?: SortOrder
    _count?: PropertyCountOrderByAggregateInput
    _avg?: PropertyAvgOrderByAggregateInput
    _max?: PropertyMaxOrderByAggregateInput
    _min?: PropertyMinOrderByAggregateInput
    _sum?: PropertySumOrderByAggregateInput
  }

  export type PropertyScalarWhereWithAggregatesInput = {
    AND?: PropertyScalarWhereWithAggregatesInput | PropertyScalarWhereWithAggregatesInput[]
    OR?: PropertyScalarWhereWithAggregatesInput[]
    NOT?: PropertyScalarWhereWithAggregatesInput | PropertyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Property"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Property"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Property"> | Date | string
    title?: StringWithAggregatesFilter<"Property"> | string
    transitFee?: StringWithAggregatesFilter<"Property"> | string
    address?: StringWithAggregatesFilter<"Property"> | string
    timezone?: StringWithAggregatesFilter<"Property"> | string
    hasLandingDeck?: BoolWithAggregatesFilter<"Property"> | boolean
    hasChargingStation?: BoolWithAggregatesFilter<"Property"> | boolean
    hasStorageHub?: BoolWithAggregatesFilter<"Property"> | boolean
    isFixedTransitFee?: BoolWithAggregatesFilter<"Property"> | boolean
    isRentableAirspace?: BoolWithAggregatesFilter<"Property"> | boolean
    ownerId?: IntWithAggregatesFilter<"Property"> | number
    noFlyZone?: BoolWithAggregatesFilter<"Property"> | boolean
    latitude?: FloatWithAggregatesFilter<"Property"> | number
    longitude?: FloatWithAggregatesFilter<"Property"> | number
    propertyStatusId?: IntWithAggregatesFilter<"Property"> | number
    isActive?: BoolWithAggregatesFilter<"Property"> | boolean
  }

  export type PropertyStatusWhereInput = {
    AND?: PropertyStatusWhereInput | PropertyStatusWhereInput[]
    OR?: PropertyStatusWhereInput[]
    NOT?: PropertyStatusWhereInput | PropertyStatusWhereInput[]
    id?: IntFilter<"PropertyStatus"> | number
    type?: StringFilter<"PropertyStatus"> | string
    properties?: PropertyListRelationFilter
  }

  export type PropertyStatusOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    properties?: PropertyOrderByRelationAggregateInput
  }

  export type PropertyStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PropertyStatusWhereInput | PropertyStatusWhereInput[]
    OR?: PropertyStatusWhereInput[]
    NOT?: PropertyStatusWhereInput | PropertyStatusWhereInput[]
    type?: StringFilter<"PropertyStatus"> | string
    properties?: PropertyListRelationFilter
  }, "id">

  export type PropertyStatusOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    _count?: PropertyStatusCountOrderByAggregateInput
    _avg?: PropertyStatusAvgOrderByAggregateInput
    _max?: PropertyStatusMaxOrderByAggregateInput
    _min?: PropertyStatusMinOrderByAggregateInput
    _sum?: PropertyStatusSumOrderByAggregateInput
  }

  export type PropertyStatusScalarWhereWithAggregatesInput = {
    AND?: PropertyStatusScalarWhereWithAggregatesInput | PropertyStatusScalarWhereWithAggregatesInput[]
    OR?: PropertyStatusScalarWhereWithAggregatesInput[]
    NOT?: PropertyStatusScalarWhereWithAggregatesInput | PropertyStatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PropertyStatus"> | number
    type?: StringWithAggregatesFilter<"PropertyStatus"> | string
  }

  export type LayerWhereInput = {
    AND?: LayerWhereInput | LayerWhereInput[]
    OR?: LayerWhereInput[]
    NOT?: LayerWhereInput | LayerWhereInput[]
    id?: IntFilter<"Layer"> | number
    createdAt?: DateTimeFilter<"Layer"> | Date | string
    updateAt?: DateTimeFilter<"Layer"> | Date | string
    tokenId?: StringFilter<"Layer"> | string
    propertyId?: IntFilter<"Layer"> | number
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
    rents?: RentListRelationFilter
  }

  export type LayerOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    tokenId?: SortOrder
    propertyId?: SortOrder
    property?: PropertyOrderByWithRelationInput
    rents?: RentOrderByRelationAggregateInput
  }

  export type LayerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LayerWhereInput | LayerWhereInput[]
    OR?: LayerWhereInput[]
    NOT?: LayerWhereInput | LayerWhereInput[]
    createdAt?: DateTimeFilter<"Layer"> | Date | string
    updateAt?: DateTimeFilter<"Layer"> | Date | string
    tokenId?: StringFilter<"Layer"> | string
    propertyId?: IntFilter<"Layer"> | number
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
    rents?: RentListRelationFilter
  }, "id">

  export type LayerOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    tokenId?: SortOrder
    propertyId?: SortOrder
    _count?: LayerCountOrderByAggregateInput
    _avg?: LayerAvgOrderByAggregateInput
    _max?: LayerMaxOrderByAggregateInput
    _min?: LayerMinOrderByAggregateInput
    _sum?: LayerSumOrderByAggregateInput
  }

  export type LayerScalarWhereWithAggregatesInput = {
    AND?: LayerScalarWhereWithAggregatesInput | LayerScalarWhereWithAggregatesInput[]
    OR?: LayerScalarWhereWithAggregatesInput[]
    NOT?: LayerScalarWhereWithAggregatesInput | LayerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Layer"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Layer"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Layer"> | Date | string
    tokenId?: StringWithAggregatesFilter<"Layer"> | string
    propertyId?: IntWithAggregatesFilter<"Layer"> | number
  }

  export type VertexesWhereInput = {
    AND?: VertexesWhereInput | VertexesWhereInput[]
    OR?: VertexesWhereInput[]
    NOT?: VertexesWhereInput | VertexesWhereInput[]
    id?: IntFilter<"Vertexes"> | number
    createdAt?: DateTimeFilter<"Vertexes"> | Date | string
    updateAt?: DateTimeFilter<"Vertexes"> | Date | string
    latitude?: FloatFilter<"Vertexes"> | number
    longitude?: FloatFilter<"Vertexes"> | number
    propertyId?: IntFilter<"Vertexes"> | number
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }

  export type VertexesOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyId?: SortOrder
    property?: PropertyOrderByWithRelationInput
  }

  export type VertexesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VertexesWhereInput | VertexesWhereInput[]
    OR?: VertexesWhereInput[]
    NOT?: VertexesWhereInput | VertexesWhereInput[]
    createdAt?: DateTimeFilter<"Vertexes"> | Date | string
    updateAt?: DateTimeFilter<"Vertexes"> | Date | string
    latitude?: FloatFilter<"Vertexes"> | number
    longitude?: FloatFilter<"Vertexes"> | number
    propertyId?: IntFilter<"Vertexes"> | number
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }, "id">

  export type VertexesOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyId?: SortOrder
    _count?: VertexesCountOrderByAggregateInput
    _avg?: VertexesAvgOrderByAggregateInput
    _max?: VertexesMaxOrderByAggregateInput
    _min?: VertexesMinOrderByAggregateInput
    _sum?: VertexesSumOrderByAggregateInput
  }

  export type VertexesScalarWhereWithAggregatesInput = {
    AND?: VertexesScalarWhereWithAggregatesInput | VertexesScalarWhereWithAggregatesInput[]
    OR?: VertexesScalarWhereWithAggregatesInput[]
    NOT?: VertexesScalarWhereWithAggregatesInput | VertexesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Vertexes"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Vertexes"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Vertexes"> | Date | string
    latitude?: FloatWithAggregatesFilter<"Vertexes"> | number
    longitude?: FloatWithAggregatesFilter<"Vertexes"> | number
    propertyId?: IntWithAggregatesFilter<"Vertexes"> | number
  }

  export type RentWhereInput = {
    AND?: RentWhereInput | RentWhereInput[]
    OR?: RentWhereInput[]
    NOT?: RentWhereInput | RentWhereInput[]
    id?: IntFilter<"Rent"> | number
    createdAt?: DateTimeFilter<"Rent"> | Date | string
    updateAt?: DateTimeFilter<"Rent"> | Date | string
    tokenId?: StringFilter<"Rent"> | string
    startTime?: DateTimeFilter<"Rent"> | Date | string
    endTime?: DateTimeFilter<"Rent"> | Date | string
    renterId?: IntFilter<"Rent"> | number
    layerId?: IntFilter<"Rent"> | number
    isActive?: BoolFilter<"Rent"> | boolean
    renterUser?: XOR<UserRelationFilter, UserWhereInput>
    layer?: XOR<LayerRelationFilter, LayerWhereInput>
  }

  export type RentOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    tokenId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    renterId?: SortOrder
    layerId?: SortOrder
    isActive?: SortOrder
    renterUser?: UserOrderByWithRelationInput
    layer?: LayerOrderByWithRelationInput
  }

  export type RentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RentWhereInput | RentWhereInput[]
    OR?: RentWhereInput[]
    NOT?: RentWhereInput | RentWhereInput[]
    createdAt?: DateTimeFilter<"Rent"> | Date | string
    updateAt?: DateTimeFilter<"Rent"> | Date | string
    tokenId?: StringFilter<"Rent"> | string
    startTime?: DateTimeFilter<"Rent"> | Date | string
    endTime?: DateTimeFilter<"Rent"> | Date | string
    renterId?: IntFilter<"Rent"> | number
    layerId?: IntFilter<"Rent"> | number
    isActive?: BoolFilter<"Rent"> | boolean
    renterUser?: XOR<UserRelationFilter, UserWhereInput>
    layer?: XOR<LayerRelationFilter, LayerWhereInput>
  }, "id">

  export type RentOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    tokenId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    renterId?: SortOrder
    layerId?: SortOrder
    isActive?: SortOrder
    _count?: RentCountOrderByAggregateInput
    _avg?: RentAvgOrderByAggregateInput
    _max?: RentMaxOrderByAggregateInput
    _min?: RentMinOrderByAggregateInput
    _sum?: RentSumOrderByAggregateInput
  }

  export type RentScalarWhereWithAggregatesInput = {
    AND?: RentScalarWhereWithAggregatesInput | RentScalarWhereWithAggregatesInput[]
    OR?: RentScalarWhereWithAggregatesInput[]
    NOT?: RentScalarWhereWithAggregatesInput | RentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rent"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Rent"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Rent"> | Date | string
    tokenId?: StringWithAggregatesFilter<"Rent"> | string
    startTime?: DateTimeWithAggregatesFilter<"Rent"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Rent"> | Date | string
    renterId?: IntWithAggregatesFilter<"Rent"> | number
    layerId?: IntWithAggregatesFilter<"Rent"> | number
    isActive?: BoolWithAggregatesFilter<"Rent"> | boolean
  }

  export type NewsletterWhereInput = {
    AND?: NewsletterWhereInput | NewsletterWhereInput[]
    OR?: NewsletterWhereInput[]
    NOT?: NewsletterWhereInput | NewsletterWhereInput[]
    id?: IntFilter<"Newsletter"> | number
    createdAt?: DateTimeFilter<"Newsletter"> | Date | string
    updateAt?: DateTimeFilter<"Newsletter"> | Date | string
    title?: StringFilter<"Newsletter"> | string
    text?: StringFilter<"Newsletter"> | string
    link?: StringFilter<"Newsletter"> | string
    date?: DateTimeFilter<"Newsletter"> | Date | string
  }

  export type NewsletterOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    title?: SortOrder
    text?: SortOrder
    link?: SortOrder
    date?: SortOrder
  }

  export type NewsletterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NewsletterWhereInput | NewsletterWhereInput[]
    OR?: NewsletterWhereInput[]
    NOT?: NewsletterWhereInput | NewsletterWhereInput[]
    createdAt?: DateTimeFilter<"Newsletter"> | Date | string
    updateAt?: DateTimeFilter<"Newsletter"> | Date | string
    title?: StringFilter<"Newsletter"> | string
    text?: StringFilter<"Newsletter"> | string
    link?: StringFilter<"Newsletter"> | string
    date?: DateTimeFilter<"Newsletter"> | Date | string
  }, "id">

  export type NewsletterOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    title?: SortOrder
    text?: SortOrder
    link?: SortOrder
    date?: SortOrder
    _count?: NewsletterCountOrderByAggregateInput
    _avg?: NewsletterAvgOrderByAggregateInput
    _max?: NewsletterMaxOrderByAggregateInput
    _min?: NewsletterMinOrderByAggregateInput
    _sum?: NewsletterSumOrderByAggregateInput
  }

  export type NewsletterScalarWhereWithAggregatesInput = {
    AND?: NewsletterScalarWhereWithAggregatesInput | NewsletterScalarWhereWithAggregatesInput[]
    OR?: NewsletterScalarWhereWithAggregatesInput[]
    NOT?: NewsletterScalarWhereWithAggregatesInput | NewsletterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Newsletter"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Newsletter"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Newsletter"> | Date | string
    title?: StringWithAggregatesFilter<"Newsletter"> | string
    text?: StringWithAggregatesFilter<"Newsletter"> | string
    link?: StringWithAggregatesFilter<"Newsletter"> | string
    date?: DateTimeWithAggregatesFilter<"Newsletter"> | Date | string
  }

  export type WeekDayRangeWhereInput = {
    AND?: WeekDayRangeWhereInput | WeekDayRangeWhereInput[]
    OR?: WeekDayRangeWhereInput[]
    NOT?: WeekDayRangeWhereInput | WeekDayRangeWhereInput[]
    createdAt?: DateTimeFilter<"WeekDayRange"> | Date | string
    updateAt?: DateTimeFilter<"WeekDayRange"> | Date | string
    fromTime?: FloatFilter<"WeekDayRange"> | number
    toTime?: FloatFilter<"WeekDayRange"> | number
    isAvailable?: BoolFilter<"WeekDayRange"> | boolean
    weekDayId?: IntFilter<"WeekDayRange"> | number
    propertyId?: IntFilter<"WeekDayRange"> | number
    weekDay?: XOR<WeekDayRelationFilter, WeekDayWhereInput>
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }

  export type WeekDayRangeOrderByWithRelationInput = {
    createdAt?: SortOrder
    updateAt?: SortOrder
    fromTime?: SortOrder
    toTime?: SortOrder
    isAvailable?: SortOrder
    weekDayId?: SortOrder
    propertyId?: SortOrder
    weekDay?: WeekDayOrderByWithRelationInput
    property?: PropertyOrderByWithRelationInput
  }

  export type WeekDayRangeWhereUniqueInput = Prisma.AtLeast<{
    weekDayId_propertyId?: WeekDayRangeWeekDayIdPropertyIdCompoundUniqueInput
    AND?: WeekDayRangeWhereInput | WeekDayRangeWhereInput[]
    OR?: WeekDayRangeWhereInput[]
    NOT?: WeekDayRangeWhereInput | WeekDayRangeWhereInput[]
    createdAt?: DateTimeFilter<"WeekDayRange"> | Date | string
    updateAt?: DateTimeFilter<"WeekDayRange"> | Date | string
    fromTime?: FloatFilter<"WeekDayRange"> | number
    toTime?: FloatFilter<"WeekDayRange"> | number
    isAvailable?: BoolFilter<"WeekDayRange"> | boolean
    weekDayId?: IntFilter<"WeekDayRange"> | number
    propertyId?: IntFilter<"WeekDayRange"> | number
    weekDay?: XOR<WeekDayRelationFilter, WeekDayWhereInput>
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }, "weekDayId_propertyId">

  export type WeekDayRangeOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updateAt?: SortOrder
    fromTime?: SortOrder
    toTime?: SortOrder
    isAvailable?: SortOrder
    weekDayId?: SortOrder
    propertyId?: SortOrder
    _count?: WeekDayRangeCountOrderByAggregateInput
    _avg?: WeekDayRangeAvgOrderByAggregateInput
    _max?: WeekDayRangeMaxOrderByAggregateInput
    _min?: WeekDayRangeMinOrderByAggregateInput
    _sum?: WeekDayRangeSumOrderByAggregateInput
  }

  export type WeekDayRangeScalarWhereWithAggregatesInput = {
    AND?: WeekDayRangeScalarWhereWithAggregatesInput | WeekDayRangeScalarWhereWithAggregatesInput[]
    OR?: WeekDayRangeScalarWhereWithAggregatesInput[]
    NOT?: WeekDayRangeScalarWhereWithAggregatesInput | WeekDayRangeScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"WeekDayRange"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"WeekDayRange"> | Date | string
    fromTime?: FloatWithAggregatesFilter<"WeekDayRange"> | number
    toTime?: FloatWithAggregatesFilter<"WeekDayRange"> | number
    isAvailable?: BoolWithAggregatesFilter<"WeekDayRange"> | boolean
    weekDayId?: IntWithAggregatesFilter<"WeekDayRange"> | number
    propertyId?: IntWithAggregatesFilter<"WeekDayRange"> | number
  }

  export type WeekDayWhereInput = {
    AND?: WeekDayWhereInput | WeekDayWhereInput[]
    OR?: WeekDayWhereInput[]
    NOT?: WeekDayWhereInput | WeekDayWhereInput[]
    id?: IntFilter<"WeekDay"> | number
    name?: StringFilter<"WeekDay"> | string
    weekDayRanges?: WeekDayRangeListRelationFilter
  }

  export type WeekDayOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    weekDayRanges?: WeekDayRangeOrderByRelationAggregateInput
  }

  export type WeekDayWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: WeekDayWhereInput | WeekDayWhereInput[]
    OR?: WeekDayWhereInput[]
    NOT?: WeekDayWhereInput | WeekDayWhereInput[]
    weekDayRanges?: WeekDayRangeListRelationFilter
  }, "id" | "name">

  export type WeekDayOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: WeekDayCountOrderByAggregateInput
    _avg?: WeekDayAvgOrderByAggregateInput
    _max?: WeekDayMaxOrderByAggregateInput
    _min?: WeekDayMinOrderByAggregateInput
    _sum?: WeekDaySumOrderByAggregateInput
  }

  export type WeekDayScalarWhereWithAggregatesInput = {
    AND?: WeekDayScalarWhereWithAggregatesInput | WeekDayScalarWhereWithAggregatesInput[]
    OR?: WeekDayScalarWhereWithAggregatesInput[]
    NOT?: WeekDayScalarWhereWithAggregatesInput | WeekDayScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WeekDay"> | number
    name?: StringWithAggregatesFilter<"WeekDay"> | string
  }

  export type ReferralCodeWhereInput = {
    AND?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    OR?: ReferralCodeWhereInput[]
    NOT?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    id?: IntFilter<"ReferralCode"> | number
    code?: StringFilter<"ReferralCode"> | string
    codeChanged?: BoolFilter<"ReferralCode"> | boolean
    usedByBonusEarned?: BoolFilter<"ReferralCode"> | boolean
    ownedByBonusEarned?: BoolFilter<"ReferralCode"> | boolean
    usedBy?: UserListRelationFilter
    ownedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type ReferralCodeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    codeChanged?: SortOrder
    usedByBonusEarned?: SortOrder
    ownedByBonusEarned?: SortOrder
    usedBy?: UserOrderByRelationAggregateInput
    ownedBy?: UserOrderByWithRelationInput
  }

  export type ReferralCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    OR?: ReferralCodeWhereInput[]
    NOT?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    codeChanged?: BoolFilter<"ReferralCode"> | boolean
    usedByBonusEarned?: BoolFilter<"ReferralCode"> | boolean
    ownedByBonusEarned?: BoolFilter<"ReferralCode"> | boolean
    usedBy?: UserListRelationFilter
    ownedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "code">

  export type ReferralCodeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    codeChanged?: SortOrder
    usedByBonusEarned?: SortOrder
    ownedByBonusEarned?: SortOrder
    _count?: ReferralCodeCountOrderByAggregateInput
    _avg?: ReferralCodeAvgOrderByAggregateInput
    _max?: ReferralCodeMaxOrderByAggregateInput
    _min?: ReferralCodeMinOrderByAggregateInput
    _sum?: ReferralCodeSumOrderByAggregateInput
  }

  export type ReferralCodeScalarWhereWithAggregatesInput = {
    AND?: ReferralCodeScalarWhereWithAggregatesInput | ReferralCodeScalarWhereWithAggregatesInput[]
    OR?: ReferralCodeScalarWhereWithAggregatesInput[]
    NOT?: ReferralCodeScalarWhereWithAggregatesInput | ReferralCodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReferralCode"> | number
    code?: StringWithAggregatesFilter<"ReferralCode"> | string
    codeChanged?: BoolWithAggregatesFilter<"ReferralCode"> | boolean
    usedByBonusEarned?: BoolWithAggregatesFilter<"ReferralCode"> | boolean
    ownedByBonusEarned?: BoolWithAggregatesFilter<"ReferralCode"> | boolean
  }

  export type RentalTokenWhereInput = {
    AND?: RentalTokenWhereInput | RentalTokenWhereInput[]
    OR?: RentalTokenWhereInput[]
    NOT?: RentalTokenWhereInput | RentalTokenWhereInput[]
    id?: IntFilter<"RentalToken"> | number
    createdAt?: DateTimeFilter<"RentalToken"> | Date | string
    updateAt?: DateTimeFilter<"RentalToken"> | Date | string
    startTime?: DateTimeFilter<"RentalToken"> | Date | string
    endTime?: DateTimeFilter<"RentalToken"> | Date | string
    landTokenId?: StringFilter<"RentalToken"> | string
    rentalTokenId?: StringNullableFilter<"RentalToken"> | string | null
  }

  export type RentalTokenOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    landTokenId?: SortOrder
    rentalTokenId?: SortOrderInput | SortOrder
  }

  export type RentalTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RentalTokenWhereInput | RentalTokenWhereInput[]
    OR?: RentalTokenWhereInput[]
    NOT?: RentalTokenWhereInput | RentalTokenWhereInput[]
    createdAt?: DateTimeFilter<"RentalToken"> | Date | string
    updateAt?: DateTimeFilter<"RentalToken"> | Date | string
    startTime?: DateTimeFilter<"RentalToken"> | Date | string
    endTime?: DateTimeFilter<"RentalToken"> | Date | string
    landTokenId?: StringFilter<"RentalToken"> | string
    rentalTokenId?: StringNullableFilter<"RentalToken"> | string | null
  }, "id">

  export type RentalTokenOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    landTokenId?: SortOrder
    rentalTokenId?: SortOrderInput | SortOrder
    _count?: RentalTokenCountOrderByAggregateInput
    _avg?: RentalTokenAvgOrderByAggregateInput
    _max?: RentalTokenMaxOrderByAggregateInput
    _min?: RentalTokenMinOrderByAggregateInput
    _sum?: RentalTokenSumOrderByAggregateInput
  }

  export type RentalTokenScalarWhereWithAggregatesInput = {
    AND?: RentalTokenScalarWhereWithAggregatesInput | RentalTokenScalarWhereWithAggregatesInput[]
    OR?: RentalTokenScalarWhereWithAggregatesInput[]
    NOT?: RentalTokenScalarWhereWithAggregatesInput | RentalTokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RentalToken"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RentalToken"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"RentalToken"> | Date | string
    startTime?: DateTimeWithAggregatesFilter<"RentalToken"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"RentalToken"> | Date | string
    landTokenId?: StringWithAggregatesFilter<"RentalToken"> | string
    rentalTokenId?: StringNullableWithAggregatesFilter<"RentalToken"> | string | null
  }

  export type RewardWhereInput = {
    AND?: RewardWhereInput | RewardWhereInput[]
    OR?: RewardWhereInput[]
    NOT?: RewardWhereInput | RewardWhereInput[]
    id?: StringFilter<"Reward"> | string
    rewardId?: StringFilter<"Reward"> | string
    blockchainAddress?: StringFilter<"Reward"> | string
    taskType?: EnumTaskTypeFilter<"Reward"> | $Enums.TaskType
    point?: FloatFilter<"Reward"> | number
    completed?: BoolFilter<"Reward"> | boolean
    createdAt?: DateTimeFilter<"Reward"> | Date | string
    updateAt?: DateTimeFilter<"Reward"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RewardOrderByWithRelationInput = {
    id?: SortOrder
    rewardId?: SortOrder
    blockchainAddress?: SortOrder
    taskType?: SortOrder
    point?: SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RewardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    rewardId?: string
    AND?: RewardWhereInput | RewardWhereInput[]
    OR?: RewardWhereInput[]
    NOT?: RewardWhereInput | RewardWhereInput[]
    blockchainAddress?: StringFilter<"Reward"> | string
    taskType?: EnumTaskTypeFilter<"Reward"> | $Enums.TaskType
    point?: FloatFilter<"Reward"> | number
    completed?: BoolFilter<"Reward"> | boolean
    createdAt?: DateTimeFilter<"Reward"> | Date | string
    updateAt?: DateTimeFilter<"Reward"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "rewardId">

  export type RewardOrderByWithAggregationInput = {
    id?: SortOrder
    rewardId?: SortOrder
    blockchainAddress?: SortOrder
    taskType?: SortOrder
    point?: SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: RewardCountOrderByAggregateInput
    _avg?: RewardAvgOrderByAggregateInput
    _max?: RewardMaxOrderByAggregateInput
    _min?: RewardMinOrderByAggregateInput
    _sum?: RewardSumOrderByAggregateInput
  }

  export type RewardScalarWhereWithAggregatesInput = {
    AND?: RewardScalarWhereWithAggregatesInput | RewardScalarWhereWithAggregatesInput[]
    OR?: RewardScalarWhereWithAggregatesInput[]
    NOT?: RewardScalarWhereWithAggregatesInput | RewardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reward"> | string
    rewardId?: StringWithAggregatesFilter<"Reward"> | string
    blockchainAddress?: StringWithAggregatesFilter<"Reward"> | string
    taskType?: EnumTaskTypeWithAggregatesFilter<"Reward"> | $Enums.TaskType
    point?: FloatWithAggregatesFilter<"Reward"> | number
    completed?: BoolWithAggregatesFilter<"Reward"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Reward"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Reward"> | Date | string
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    phoneNumber: string
    totalPoint?: number
    isActive?: boolean
    category: CategoryCreateNestedOneWithoutUsersInput
    KYCStatus?: StatusCreateNestedOneWithoutUsersInput
    properties?: PropertyCreateNestedManyWithoutOwnerInput
    Rent?: RentCreateNestedManyWithoutRenterUserInput
    usedReferralCode?: ReferralCodeCreateNestedOneWithoutUsedByInput
    ownedReferralCode?: ReferralCodeCreateNestedOneWithoutOwnedByInput
    Reward?: RewardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    categoryId: number
    phoneNumber: string
    totalPoint?: number
    KYCStatusId?: number
    isActive?: boolean
    usedReferralCodeId?: number | null
    ownedReferralCodeId?: number | null
    properties?: PropertyUncheckedCreateNestedManyWithoutOwnerInput
    Rent?: RentUncheckedCreateNestedManyWithoutRenterUserInput
    Reward?: RewardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: CategoryUpdateOneRequiredWithoutUsersNestedInput
    KYCStatus?: StatusUpdateOneRequiredWithoutUsersNestedInput
    properties?: PropertyUpdateManyWithoutOwnerNestedInput
    Rent?: RentUpdateManyWithoutRenterUserNestedInput
    usedReferralCode?: ReferralCodeUpdateOneWithoutUsedByNestedInput
    ownedReferralCode?: ReferralCodeUpdateOneWithoutOwnedByNestedInput
    Reward?: RewardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    KYCStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    properties?: PropertyUncheckedUpdateManyWithoutOwnerNestedInput
    Rent?: RentUncheckedUpdateManyWithoutRenterUserNestedInput
    Reward?: RewardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    categoryId: number
    phoneNumber: string
    totalPoint?: number
    KYCStatusId?: number
    isActive?: boolean
    usedReferralCodeId?: number | null
    ownedReferralCodeId?: number | null
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    KYCStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StatusCreateInput = {
    type: string
    users?: UserCreateNestedManyWithoutKYCStatusInput
  }

  export type StatusUncheckedCreateInput = {
    id?: number
    type: string
    users?: UserUncheckedCreateNestedManyWithoutKYCStatusInput
  }

  export type StatusUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutKYCStatusNestedInput
  }

  export type StatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutKYCStatusNestedInput
  }

  export type StatusCreateManyInput = {
    id?: number
    type: string
  }

  export type StatusUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    type: string
    users?: UserCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    type: string
    users?: UserUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    type: string
  }

  export type CategoryUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    noFlyZone?: boolean
    latitude: number
    longitude: number
    isActive?: boolean
    weekDayRanges?: WeekDayRangeCreateNestedManyWithoutPropertyInput
    owner: UserCreateNestedOneWithoutPropertiesInput
    layers?: LayerCreateNestedManyWithoutPropertyInput
    vertexes?: VertexesCreateNestedManyWithoutPropertyInput
    propertyStatus?: PropertyStatusCreateNestedOneWithoutPropertiesInput
  }

  export type PropertyUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    ownerId: number
    noFlyZone?: boolean
    latitude: number
    longitude: number
    propertyStatusId?: number
    isActive?: boolean
    weekDayRanges?: WeekDayRangeUncheckedCreateNestedManyWithoutPropertyInput
    layers?: LayerUncheckedCreateNestedManyWithoutPropertyInput
    vertexes?: VertexesUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    weekDayRanges?: WeekDayRangeUpdateManyWithoutPropertyNestedInput
    owner?: UserUpdateOneRequiredWithoutPropertiesNestedInput
    layers?: LayerUpdateManyWithoutPropertyNestedInput
    vertexes?: VertexesUpdateManyWithoutPropertyNestedInput
    propertyStatus?: PropertyStatusUpdateOneRequiredWithoutPropertiesNestedInput
  }

  export type PropertyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: IntFieldUpdateOperationsInput | number
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    propertyStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    weekDayRanges?: WeekDayRangeUncheckedUpdateManyWithoutPropertyNestedInput
    layers?: LayerUncheckedUpdateManyWithoutPropertyNestedInput
    vertexes?: VertexesUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    ownerId: number
    noFlyZone?: boolean
    latitude: number
    longitude: number
    propertyStatusId?: number
    isActive?: boolean
  }

  export type PropertyUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PropertyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: IntFieldUpdateOperationsInput | number
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    propertyStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PropertyStatusCreateInput = {
    type: string
    properties?: PropertyCreateNestedManyWithoutPropertyStatusInput
  }

  export type PropertyStatusUncheckedCreateInput = {
    id?: number
    type: string
    properties?: PropertyUncheckedCreateNestedManyWithoutPropertyStatusInput
  }

  export type PropertyStatusUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    properties?: PropertyUpdateManyWithoutPropertyStatusNestedInput
  }

  export type PropertyStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    properties?: PropertyUncheckedUpdateManyWithoutPropertyStatusNestedInput
  }

  export type PropertyStatusCreateManyInput = {
    id?: number
    type: string
  }

  export type PropertyStatusUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type LayerCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    property: PropertyCreateNestedOneWithoutLayersInput
    rents?: RentCreateNestedManyWithoutLayerInput
  }

  export type LayerUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    propertyId: number
    rents?: RentUncheckedCreateNestedManyWithoutLayerInput
  }

  export type LayerUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    property?: PropertyUpdateOneRequiredWithoutLayersNestedInput
    rents?: RentUpdateManyWithoutLayerNestedInput
  }

  export type LayerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    propertyId?: IntFieldUpdateOperationsInput | number
    rents?: RentUncheckedUpdateManyWithoutLayerNestedInput
  }

  export type LayerCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    propertyId: number
  }

  export type LayerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
  }

  export type LayerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type VertexesCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    latitude: number
    longitude: number
    property: PropertyCreateNestedOneWithoutVertexesInput
  }

  export type VertexesUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    latitude: number
    longitude: number
    propertyId: number
  }

  export type VertexesUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    property?: PropertyUpdateOneRequiredWithoutVertexesNestedInput
  }

  export type VertexesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type VertexesCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    latitude: number
    longitude: number
    propertyId: number
  }

  export type VertexesUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type VertexesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type RentCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    startTime: Date | string
    endTime: Date | string
    isActive?: boolean
    renterUser: UserCreateNestedOneWithoutRentInput
    layer: LayerCreateNestedOneWithoutRentsInput
  }

  export type RentUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    startTime: Date | string
    endTime: Date | string
    renterId: number
    layerId: number
    isActive?: boolean
  }

  export type RentUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    renterUser?: UserUpdateOneRequiredWithoutRentNestedInput
    layer?: LayerUpdateOneRequiredWithoutRentsNestedInput
  }

  export type RentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    renterId?: IntFieldUpdateOperationsInput | number
    layerId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RentCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    startTime: Date | string
    endTime: Date | string
    renterId: number
    layerId: number
    isActive?: boolean
  }

  export type RentUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    renterId?: IntFieldUpdateOperationsInput | number
    layerId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NewsletterCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    text: string
    link: string
    date: Date | string
  }

  export type NewsletterUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    text: string
    link: string
    date: Date | string
  }

  export type NewsletterUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsletterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsletterCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    text: string
    link: string
    date: Date | string
  }

  export type NewsletterUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsletterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeekDayRangeCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    fromTime: number
    toTime: number
    isAvailable: boolean
    weekDay: WeekDayCreateNestedOneWithoutWeekDayRangesInput
    property: PropertyCreateNestedOneWithoutWeekDayRangesInput
  }

  export type WeekDayRangeUncheckedCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    fromTime: number
    toTime: number
    isAvailable: boolean
    weekDayId: number
    propertyId: number
  }

  export type WeekDayRangeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromTime?: FloatFieldUpdateOperationsInput | number
    toTime?: FloatFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    weekDay?: WeekDayUpdateOneRequiredWithoutWeekDayRangesNestedInput
    property?: PropertyUpdateOneRequiredWithoutWeekDayRangesNestedInput
  }

  export type WeekDayRangeUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromTime?: FloatFieldUpdateOperationsInput | number
    toTime?: FloatFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    weekDayId?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type WeekDayRangeCreateManyInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    fromTime: number
    toTime: number
    isAvailable: boolean
    weekDayId: number
    propertyId: number
  }

  export type WeekDayRangeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromTime?: FloatFieldUpdateOperationsInput | number
    toTime?: FloatFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WeekDayRangeUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromTime?: FloatFieldUpdateOperationsInput | number
    toTime?: FloatFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    weekDayId?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type WeekDayCreateInput = {
    name: string
    weekDayRanges?: WeekDayRangeCreateNestedManyWithoutWeekDayInput
  }

  export type WeekDayUncheckedCreateInput = {
    id?: number
    name: string
    weekDayRanges?: WeekDayRangeUncheckedCreateNestedManyWithoutWeekDayInput
  }

  export type WeekDayUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    weekDayRanges?: WeekDayRangeUpdateManyWithoutWeekDayNestedInput
  }

  export type WeekDayUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    weekDayRanges?: WeekDayRangeUncheckedUpdateManyWithoutWeekDayNestedInput
  }

  export type WeekDayCreateManyInput = {
    id?: number
    name: string
  }

  export type WeekDayUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WeekDayUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ReferralCodeCreateInput = {
    code: string
    codeChanged?: boolean
    usedByBonusEarned?: boolean
    ownedByBonusEarned?: boolean
    usedBy?: UserCreateNestedManyWithoutUsedReferralCodeInput
    ownedBy?: UserCreateNestedOneWithoutOwnedReferralCodeInput
  }

  export type ReferralCodeUncheckedCreateInput = {
    id?: number
    code: string
    codeChanged?: boolean
    usedByBonusEarned?: boolean
    ownedByBonusEarned?: boolean
    usedBy?: UserUncheckedCreateNestedManyWithoutUsedReferralCodeInput
    ownedBy?: UserUncheckedCreateNestedOneWithoutOwnedReferralCodeInput
  }

  export type ReferralCodeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    codeChanged?: BoolFieldUpdateOperationsInput | boolean
    usedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    ownedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    usedBy?: UserUpdateManyWithoutUsedReferralCodeNestedInput
    ownedBy?: UserUpdateOneWithoutOwnedReferralCodeNestedInput
  }

  export type ReferralCodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    codeChanged?: BoolFieldUpdateOperationsInput | boolean
    usedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    ownedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    usedBy?: UserUncheckedUpdateManyWithoutUsedReferralCodeNestedInput
    ownedBy?: UserUncheckedUpdateOneWithoutOwnedReferralCodeNestedInput
  }

  export type ReferralCodeCreateManyInput = {
    id?: number
    code: string
    codeChanged?: boolean
    usedByBonusEarned?: boolean
    ownedByBonusEarned?: boolean
  }

  export type ReferralCodeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    codeChanged?: BoolFieldUpdateOperationsInput | boolean
    usedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    ownedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReferralCodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    codeChanged?: BoolFieldUpdateOperationsInput | boolean
    usedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    ownedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RentalTokenCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    startTime: Date | string
    endTime: Date | string
    landTokenId: string
    rentalTokenId?: string | null
  }

  export type RentalTokenUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    startTime: Date | string
    endTime: Date | string
    landTokenId: string
    rentalTokenId?: string | null
  }

  export type RentalTokenUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    landTokenId?: StringFieldUpdateOperationsInput | string
    rentalTokenId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RentalTokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    landTokenId?: StringFieldUpdateOperationsInput | string
    rentalTokenId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RentalTokenCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    startTime: Date | string
    endTime: Date | string
    landTokenId: string
    rentalTokenId?: string | null
  }

  export type RentalTokenUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    landTokenId?: StringFieldUpdateOperationsInput | string
    rentalTokenId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RentalTokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    landTokenId?: StringFieldUpdateOperationsInput | string
    rentalTokenId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RewardCreateInput = {
    id?: string
    rewardId: string
    taskType: $Enums.TaskType
    point: number
    completed?: boolean
    createdAt?: Date | string
    updateAt?: Date | string
    user: UserCreateNestedOneWithoutRewardInput
  }

  export type RewardUncheckedCreateInput = {
    id?: string
    rewardId: string
    blockchainAddress: string
    taskType: $Enums.TaskType
    point: number
    completed?: boolean
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type RewardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardId?: StringFieldUpdateOperationsInput | string
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    point?: FloatFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRewardNestedInput
  }

  export type RewardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardId?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    point?: FloatFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardCreateManyInput = {
    id?: string
    rewardId: string
    blockchainAddress: string
    taskType: $Enums.TaskType
    point: number
    completed?: boolean
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type RewardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardId?: StringFieldUpdateOperationsInput | string
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    point?: FloatFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardId?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    point?: FloatFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type StatusRelationFilter = {
    is?: StatusWhereInput
    isNot?: StatusWhereInput
  }

  export type PropertyListRelationFilter = {
    every?: PropertyWhereInput
    some?: PropertyWhereInput
    none?: PropertyWhereInput
  }

  export type RentListRelationFilter = {
    every?: RentWhereInput
    some?: RentWhereInput
    none?: RentWhereInput
  }

  export type ReferralCodeNullableRelationFilter = {
    is?: ReferralCodeWhereInput | null
    isNot?: ReferralCodeWhereInput | null
  }

  export type RewardListRelationFilter = {
    every?: RewardWhereInput
    some?: RewardWhereInput
    none?: RewardWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PropertyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RewardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    blockchainAddress?: SortOrder
    isAdmin?: SortOrder
    newsletter?: SortOrder
    categoryId?: SortOrder
    phoneNumber?: SortOrder
    totalPoint?: SortOrder
    KYCStatusId?: SortOrder
    isActive?: SortOrder
    usedReferralCodeId?: SortOrder
    ownedReferralCodeId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    totalPoint?: SortOrder
    KYCStatusId?: SortOrder
    usedReferralCodeId?: SortOrder
    ownedReferralCodeId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    blockchainAddress?: SortOrder
    isAdmin?: SortOrder
    newsletter?: SortOrder
    categoryId?: SortOrder
    phoneNumber?: SortOrder
    totalPoint?: SortOrder
    KYCStatusId?: SortOrder
    isActive?: SortOrder
    usedReferralCodeId?: SortOrder
    ownedReferralCodeId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    blockchainAddress?: SortOrder
    isAdmin?: SortOrder
    newsletter?: SortOrder
    categoryId?: SortOrder
    phoneNumber?: SortOrder
    totalPoint?: SortOrder
    KYCStatusId?: SortOrder
    isActive?: SortOrder
    usedReferralCodeId?: SortOrder
    ownedReferralCodeId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    totalPoint?: SortOrder
    KYCStatusId?: SortOrder
    usedReferralCodeId?: SortOrder
    ownedReferralCodeId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type StatusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type StatusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WeekDayRangeListRelationFilter = {
    every?: WeekDayRangeWhereInput
    some?: WeekDayRangeWhereInput
    none?: WeekDayRangeWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LayerListRelationFilter = {
    every?: LayerWhereInput
    some?: LayerWhereInput
    none?: LayerWhereInput
  }

  export type VertexesListRelationFilter = {
    every?: VertexesWhereInput
    some?: VertexesWhereInput
    none?: VertexesWhereInput
  }

  export type PropertyStatusRelationFilter = {
    is?: PropertyStatusWhereInput
    isNot?: PropertyStatusWhereInput
  }

  export type WeekDayRangeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VertexesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PropertyCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    title?: SortOrder
    transitFee?: SortOrder
    address?: SortOrder
    timezone?: SortOrder
    hasLandingDeck?: SortOrder
    hasChargingStation?: SortOrder
    hasStorageHub?: SortOrder
    isFixedTransitFee?: SortOrder
    isRentableAirspace?: SortOrder
    ownerId?: SortOrder
    noFlyZone?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyStatusId?: SortOrder
    isActive?: SortOrder
  }

  export type PropertyAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyStatusId?: SortOrder
  }

  export type PropertyMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    title?: SortOrder
    transitFee?: SortOrder
    address?: SortOrder
    timezone?: SortOrder
    hasLandingDeck?: SortOrder
    hasChargingStation?: SortOrder
    hasStorageHub?: SortOrder
    isFixedTransitFee?: SortOrder
    isRentableAirspace?: SortOrder
    ownerId?: SortOrder
    noFlyZone?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyStatusId?: SortOrder
    isActive?: SortOrder
  }

  export type PropertyMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    title?: SortOrder
    transitFee?: SortOrder
    address?: SortOrder
    timezone?: SortOrder
    hasLandingDeck?: SortOrder
    hasChargingStation?: SortOrder
    hasStorageHub?: SortOrder
    isFixedTransitFee?: SortOrder
    isRentableAirspace?: SortOrder
    ownerId?: SortOrder
    noFlyZone?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyStatusId?: SortOrder
    isActive?: SortOrder
  }

  export type PropertySumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyStatusId?: SortOrder
  }

  export type PropertyStatusCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type PropertyStatusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PropertyStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type PropertyStatusMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type PropertyStatusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PropertyRelationFilter = {
    is?: PropertyWhereInput
    isNot?: PropertyWhereInput
  }

  export type LayerCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    tokenId?: SortOrder
    propertyId?: SortOrder
  }

  export type LayerAvgOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
  }

  export type LayerMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    tokenId?: SortOrder
    propertyId?: SortOrder
  }

  export type LayerMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    tokenId?: SortOrder
    propertyId?: SortOrder
  }

  export type LayerSumOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
  }

  export type VertexesCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyId?: SortOrder
  }

  export type VertexesAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyId?: SortOrder
  }

  export type VertexesMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyId?: SortOrder
  }

  export type VertexesMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyId?: SortOrder
  }

  export type VertexesSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    propertyId?: SortOrder
  }

  export type LayerRelationFilter = {
    is?: LayerWhereInput
    isNot?: LayerWhereInput
  }

  export type RentCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    tokenId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    renterId?: SortOrder
    layerId?: SortOrder
    isActive?: SortOrder
  }

  export type RentAvgOrderByAggregateInput = {
    id?: SortOrder
    renterId?: SortOrder
    layerId?: SortOrder
  }

  export type RentMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    tokenId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    renterId?: SortOrder
    layerId?: SortOrder
    isActive?: SortOrder
  }

  export type RentMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    tokenId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    renterId?: SortOrder
    layerId?: SortOrder
    isActive?: SortOrder
  }

  export type RentSumOrderByAggregateInput = {
    id?: SortOrder
    renterId?: SortOrder
    layerId?: SortOrder
  }

  export type NewsletterCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    title?: SortOrder
    text?: SortOrder
    link?: SortOrder
    date?: SortOrder
  }

  export type NewsletterAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewsletterMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    title?: SortOrder
    text?: SortOrder
    link?: SortOrder
    date?: SortOrder
  }

  export type NewsletterMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    title?: SortOrder
    text?: SortOrder
    link?: SortOrder
    date?: SortOrder
  }

  export type NewsletterSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WeekDayRelationFilter = {
    is?: WeekDayWhereInput
    isNot?: WeekDayWhereInput
  }

  export type WeekDayRangeWeekDayIdPropertyIdCompoundUniqueInput = {
    weekDayId: number
    propertyId: number
  }

  export type WeekDayRangeCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updateAt?: SortOrder
    fromTime?: SortOrder
    toTime?: SortOrder
    isAvailable?: SortOrder
    weekDayId?: SortOrder
    propertyId?: SortOrder
  }

  export type WeekDayRangeAvgOrderByAggregateInput = {
    fromTime?: SortOrder
    toTime?: SortOrder
    weekDayId?: SortOrder
    propertyId?: SortOrder
  }

  export type WeekDayRangeMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updateAt?: SortOrder
    fromTime?: SortOrder
    toTime?: SortOrder
    isAvailable?: SortOrder
    weekDayId?: SortOrder
    propertyId?: SortOrder
  }

  export type WeekDayRangeMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updateAt?: SortOrder
    fromTime?: SortOrder
    toTime?: SortOrder
    isAvailable?: SortOrder
    weekDayId?: SortOrder
    propertyId?: SortOrder
  }

  export type WeekDayRangeSumOrderByAggregateInput = {
    fromTime?: SortOrder
    toTime?: SortOrder
    weekDayId?: SortOrder
    propertyId?: SortOrder
  }

  export type WeekDayCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type WeekDayAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WeekDayMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type WeekDayMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type WeekDaySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ReferralCodeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    codeChanged?: SortOrder
    usedByBonusEarned?: SortOrder
    ownedByBonusEarned?: SortOrder
  }

  export type ReferralCodeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReferralCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    codeChanged?: SortOrder
    usedByBonusEarned?: SortOrder
    ownedByBonusEarned?: SortOrder
  }

  export type ReferralCodeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    codeChanged?: SortOrder
    usedByBonusEarned?: SortOrder
    ownedByBonusEarned?: SortOrder
  }

  export type ReferralCodeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RentalTokenCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    landTokenId?: SortOrder
    rentalTokenId?: SortOrder
  }

  export type RentalTokenAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RentalTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    landTokenId?: SortOrder
    rentalTokenId?: SortOrder
  }

  export type RentalTokenMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    landTokenId?: SortOrder
    rentalTokenId?: SortOrder
  }

  export type RentalTokenSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeFilter<$PrismaModel> | $Enums.TaskType
  }

  export type RewardCountOrderByAggregateInput = {
    id?: SortOrder
    rewardId?: SortOrder
    blockchainAddress?: SortOrder
    taskType?: SortOrder
    point?: SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type RewardAvgOrderByAggregateInput = {
    point?: SortOrder
  }

  export type RewardMaxOrderByAggregateInput = {
    id?: SortOrder
    rewardId?: SortOrder
    blockchainAddress?: SortOrder
    taskType?: SortOrder
    point?: SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type RewardMinOrderByAggregateInput = {
    id?: SortOrder
    rewardId?: SortOrder
    blockchainAddress?: SortOrder
    taskType?: SortOrder
    point?: SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type RewardSumOrderByAggregateInput = {
    point?: SortOrder
  }

  export type EnumTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaskType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskTypeFilter<$PrismaModel>
    _max?: NestedEnumTaskTypeFilter<$PrismaModel>
  }

  export type CategoryCreateNestedOneWithoutUsersInput = {
    create?: XOR<CategoryCreateWithoutUsersInput, CategoryUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutUsersInput
    connect?: CategoryWhereUniqueInput
  }

  export type StatusCreateNestedOneWithoutUsersInput = {
    create?: XOR<StatusCreateWithoutUsersInput, StatusUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StatusCreateOrConnectWithoutUsersInput
    connect?: StatusWhereUniqueInput
  }

  export type PropertyCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PropertyCreateWithoutOwnerInput, PropertyUncheckedCreateWithoutOwnerInput> | PropertyCreateWithoutOwnerInput[] | PropertyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutOwnerInput | PropertyCreateOrConnectWithoutOwnerInput[]
    createMany?: PropertyCreateManyOwnerInputEnvelope
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
  }

  export type RentCreateNestedManyWithoutRenterUserInput = {
    create?: XOR<RentCreateWithoutRenterUserInput, RentUncheckedCreateWithoutRenterUserInput> | RentCreateWithoutRenterUserInput[] | RentUncheckedCreateWithoutRenterUserInput[]
    connectOrCreate?: RentCreateOrConnectWithoutRenterUserInput | RentCreateOrConnectWithoutRenterUserInput[]
    createMany?: RentCreateManyRenterUserInputEnvelope
    connect?: RentWhereUniqueInput | RentWhereUniqueInput[]
  }

  export type ReferralCodeCreateNestedOneWithoutUsedByInput = {
    create?: XOR<ReferralCodeCreateWithoutUsedByInput, ReferralCodeUncheckedCreateWithoutUsedByInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutUsedByInput
    connect?: ReferralCodeWhereUniqueInput
  }

  export type ReferralCodeCreateNestedOneWithoutOwnedByInput = {
    create?: XOR<ReferralCodeCreateWithoutOwnedByInput, ReferralCodeUncheckedCreateWithoutOwnedByInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutOwnedByInput
    connect?: ReferralCodeWhereUniqueInput
  }

  export type RewardCreateNestedManyWithoutUserInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type PropertyUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PropertyCreateWithoutOwnerInput, PropertyUncheckedCreateWithoutOwnerInput> | PropertyCreateWithoutOwnerInput[] | PropertyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutOwnerInput | PropertyCreateOrConnectWithoutOwnerInput[]
    createMany?: PropertyCreateManyOwnerInputEnvelope
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
  }

  export type RentUncheckedCreateNestedManyWithoutRenterUserInput = {
    create?: XOR<RentCreateWithoutRenterUserInput, RentUncheckedCreateWithoutRenterUserInput> | RentCreateWithoutRenterUserInput[] | RentUncheckedCreateWithoutRenterUserInput[]
    connectOrCreate?: RentCreateOrConnectWithoutRenterUserInput | RentCreateOrConnectWithoutRenterUserInput[]
    createMany?: RentCreateManyRenterUserInputEnvelope
    connect?: RentWhereUniqueInput | RentWhereUniqueInput[]
  }

  export type RewardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<CategoryCreateWithoutUsersInput, CategoryUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutUsersInput
    upsert?: CategoryUpsertWithoutUsersInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutUsersInput, CategoryUpdateWithoutUsersInput>, CategoryUncheckedUpdateWithoutUsersInput>
  }

  export type StatusUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<StatusCreateWithoutUsersInput, StatusUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StatusCreateOrConnectWithoutUsersInput
    upsert?: StatusUpsertWithoutUsersInput
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutUsersInput, StatusUpdateWithoutUsersInput>, StatusUncheckedUpdateWithoutUsersInput>
  }

  export type PropertyUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PropertyCreateWithoutOwnerInput, PropertyUncheckedCreateWithoutOwnerInput> | PropertyCreateWithoutOwnerInput[] | PropertyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutOwnerInput | PropertyCreateOrConnectWithoutOwnerInput[]
    upsert?: PropertyUpsertWithWhereUniqueWithoutOwnerInput | PropertyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PropertyCreateManyOwnerInputEnvelope
    set?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    disconnect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    delete?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    update?: PropertyUpdateWithWhereUniqueWithoutOwnerInput | PropertyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PropertyUpdateManyWithWhereWithoutOwnerInput | PropertyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
  }

  export type RentUpdateManyWithoutRenterUserNestedInput = {
    create?: XOR<RentCreateWithoutRenterUserInput, RentUncheckedCreateWithoutRenterUserInput> | RentCreateWithoutRenterUserInput[] | RentUncheckedCreateWithoutRenterUserInput[]
    connectOrCreate?: RentCreateOrConnectWithoutRenterUserInput | RentCreateOrConnectWithoutRenterUserInput[]
    upsert?: RentUpsertWithWhereUniqueWithoutRenterUserInput | RentUpsertWithWhereUniqueWithoutRenterUserInput[]
    createMany?: RentCreateManyRenterUserInputEnvelope
    set?: RentWhereUniqueInput | RentWhereUniqueInput[]
    disconnect?: RentWhereUniqueInput | RentWhereUniqueInput[]
    delete?: RentWhereUniqueInput | RentWhereUniqueInput[]
    connect?: RentWhereUniqueInput | RentWhereUniqueInput[]
    update?: RentUpdateWithWhereUniqueWithoutRenterUserInput | RentUpdateWithWhereUniqueWithoutRenterUserInput[]
    updateMany?: RentUpdateManyWithWhereWithoutRenterUserInput | RentUpdateManyWithWhereWithoutRenterUserInput[]
    deleteMany?: RentScalarWhereInput | RentScalarWhereInput[]
  }

  export type ReferralCodeUpdateOneWithoutUsedByNestedInput = {
    create?: XOR<ReferralCodeCreateWithoutUsedByInput, ReferralCodeUncheckedCreateWithoutUsedByInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutUsedByInput
    upsert?: ReferralCodeUpsertWithoutUsedByInput
    disconnect?: ReferralCodeWhereInput | boolean
    delete?: ReferralCodeWhereInput | boolean
    connect?: ReferralCodeWhereUniqueInput
    update?: XOR<XOR<ReferralCodeUpdateToOneWithWhereWithoutUsedByInput, ReferralCodeUpdateWithoutUsedByInput>, ReferralCodeUncheckedUpdateWithoutUsedByInput>
  }

  export type ReferralCodeUpdateOneWithoutOwnedByNestedInput = {
    create?: XOR<ReferralCodeCreateWithoutOwnedByInput, ReferralCodeUncheckedCreateWithoutOwnedByInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutOwnedByInput
    upsert?: ReferralCodeUpsertWithoutOwnedByInput
    disconnect?: ReferralCodeWhereInput | boolean
    delete?: ReferralCodeWhereInput | boolean
    connect?: ReferralCodeWhereUniqueInput
    update?: XOR<XOR<ReferralCodeUpdateToOneWithWhereWithoutOwnedByInput, ReferralCodeUpdateWithoutOwnedByInput>, ReferralCodeUncheckedUpdateWithoutOwnedByInput>
  }

  export type RewardUpdateManyWithoutUserNestedInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutUserInput | RewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutUserInput | RewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutUserInput | RewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PropertyUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PropertyCreateWithoutOwnerInput, PropertyUncheckedCreateWithoutOwnerInput> | PropertyCreateWithoutOwnerInput[] | PropertyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutOwnerInput | PropertyCreateOrConnectWithoutOwnerInput[]
    upsert?: PropertyUpsertWithWhereUniqueWithoutOwnerInput | PropertyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PropertyCreateManyOwnerInputEnvelope
    set?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    disconnect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    delete?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    update?: PropertyUpdateWithWhereUniqueWithoutOwnerInput | PropertyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PropertyUpdateManyWithWhereWithoutOwnerInput | PropertyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
  }

  export type RentUncheckedUpdateManyWithoutRenterUserNestedInput = {
    create?: XOR<RentCreateWithoutRenterUserInput, RentUncheckedCreateWithoutRenterUserInput> | RentCreateWithoutRenterUserInput[] | RentUncheckedCreateWithoutRenterUserInput[]
    connectOrCreate?: RentCreateOrConnectWithoutRenterUserInput | RentCreateOrConnectWithoutRenterUserInput[]
    upsert?: RentUpsertWithWhereUniqueWithoutRenterUserInput | RentUpsertWithWhereUniqueWithoutRenterUserInput[]
    createMany?: RentCreateManyRenterUserInputEnvelope
    set?: RentWhereUniqueInput | RentWhereUniqueInput[]
    disconnect?: RentWhereUniqueInput | RentWhereUniqueInput[]
    delete?: RentWhereUniqueInput | RentWhereUniqueInput[]
    connect?: RentWhereUniqueInput | RentWhereUniqueInput[]
    update?: RentUpdateWithWhereUniqueWithoutRenterUserInput | RentUpdateWithWhereUniqueWithoutRenterUserInput[]
    updateMany?: RentUpdateManyWithWhereWithoutRenterUserInput | RentUpdateManyWithWhereWithoutRenterUserInput[]
    deleteMany?: RentScalarWhereInput | RentScalarWhereInput[]
  }

  export type RewardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutUserInput | RewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutUserInput | RewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutUserInput | RewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutKYCStatusInput = {
    create?: XOR<UserCreateWithoutKYCStatusInput, UserUncheckedCreateWithoutKYCStatusInput> | UserCreateWithoutKYCStatusInput[] | UserUncheckedCreateWithoutKYCStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutKYCStatusInput | UserCreateOrConnectWithoutKYCStatusInput[]
    createMany?: UserCreateManyKYCStatusInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutKYCStatusInput = {
    create?: XOR<UserCreateWithoutKYCStatusInput, UserUncheckedCreateWithoutKYCStatusInput> | UserCreateWithoutKYCStatusInput[] | UserUncheckedCreateWithoutKYCStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutKYCStatusInput | UserCreateOrConnectWithoutKYCStatusInput[]
    createMany?: UserCreateManyKYCStatusInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutKYCStatusNestedInput = {
    create?: XOR<UserCreateWithoutKYCStatusInput, UserUncheckedCreateWithoutKYCStatusInput> | UserCreateWithoutKYCStatusInput[] | UserUncheckedCreateWithoutKYCStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutKYCStatusInput | UserCreateOrConnectWithoutKYCStatusInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutKYCStatusInput | UserUpsertWithWhereUniqueWithoutKYCStatusInput[]
    createMany?: UserCreateManyKYCStatusInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutKYCStatusInput | UserUpdateWithWhereUniqueWithoutKYCStatusInput[]
    updateMany?: UserUpdateManyWithWhereWithoutKYCStatusInput | UserUpdateManyWithWhereWithoutKYCStatusInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutKYCStatusNestedInput = {
    create?: XOR<UserCreateWithoutKYCStatusInput, UserUncheckedCreateWithoutKYCStatusInput> | UserCreateWithoutKYCStatusInput[] | UserUncheckedCreateWithoutKYCStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutKYCStatusInput | UserCreateOrConnectWithoutKYCStatusInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutKYCStatusInput | UserUpsertWithWhereUniqueWithoutKYCStatusInput[]
    createMany?: UserCreateManyKYCStatusInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutKYCStatusInput | UserUpdateWithWhereUniqueWithoutKYCStatusInput[]
    updateMany?: UserUpdateManyWithWhereWithoutKYCStatusInput | UserUpdateManyWithWhereWithoutKYCStatusInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutCategoryInput = {
    create?: XOR<UserCreateWithoutCategoryInput, UserUncheckedCreateWithoutCategoryInput> | UserCreateWithoutCategoryInput[] | UserUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCategoryInput | UserCreateOrConnectWithoutCategoryInput[]
    createMany?: UserCreateManyCategoryInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<UserCreateWithoutCategoryInput, UserUncheckedCreateWithoutCategoryInput> | UserCreateWithoutCategoryInput[] | UserUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCategoryInput | UserCreateOrConnectWithoutCategoryInput[]
    createMany?: UserCreateManyCategoryInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<UserCreateWithoutCategoryInput, UserUncheckedCreateWithoutCategoryInput> | UserCreateWithoutCategoryInput[] | UserUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCategoryInput | UserCreateOrConnectWithoutCategoryInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCategoryInput | UserUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: UserCreateManyCategoryInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCategoryInput | UserUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCategoryInput | UserUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<UserCreateWithoutCategoryInput, UserUncheckedCreateWithoutCategoryInput> | UserCreateWithoutCategoryInput[] | UserUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCategoryInput | UserCreateOrConnectWithoutCategoryInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCategoryInput | UserUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: UserCreateManyCategoryInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCategoryInput | UserUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCategoryInput | UserUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type WeekDayRangeCreateNestedManyWithoutPropertyInput = {
    create?: XOR<WeekDayRangeCreateWithoutPropertyInput, WeekDayRangeUncheckedCreateWithoutPropertyInput> | WeekDayRangeCreateWithoutPropertyInput[] | WeekDayRangeUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: WeekDayRangeCreateOrConnectWithoutPropertyInput | WeekDayRangeCreateOrConnectWithoutPropertyInput[]
    createMany?: WeekDayRangeCreateManyPropertyInputEnvelope
    connect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutPropertiesInput = {
    create?: XOR<UserCreateWithoutPropertiesInput, UserUncheckedCreateWithoutPropertiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPropertiesInput
    connect?: UserWhereUniqueInput
  }

  export type LayerCreateNestedManyWithoutPropertyInput = {
    create?: XOR<LayerCreateWithoutPropertyInput, LayerUncheckedCreateWithoutPropertyInput> | LayerCreateWithoutPropertyInput[] | LayerUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: LayerCreateOrConnectWithoutPropertyInput | LayerCreateOrConnectWithoutPropertyInput[]
    createMany?: LayerCreateManyPropertyInputEnvelope
    connect?: LayerWhereUniqueInput | LayerWhereUniqueInput[]
  }

  export type VertexesCreateNestedManyWithoutPropertyInput = {
    create?: XOR<VertexesCreateWithoutPropertyInput, VertexesUncheckedCreateWithoutPropertyInput> | VertexesCreateWithoutPropertyInput[] | VertexesUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: VertexesCreateOrConnectWithoutPropertyInput | VertexesCreateOrConnectWithoutPropertyInput[]
    createMany?: VertexesCreateManyPropertyInputEnvelope
    connect?: VertexesWhereUniqueInput | VertexesWhereUniqueInput[]
  }

  export type PropertyStatusCreateNestedOneWithoutPropertiesInput = {
    create?: XOR<PropertyStatusCreateWithoutPropertiesInput, PropertyStatusUncheckedCreateWithoutPropertiesInput>
    connectOrCreate?: PropertyStatusCreateOrConnectWithoutPropertiesInput
    connect?: PropertyStatusWhereUniqueInput
  }

  export type WeekDayRangeUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<WeekDayRangeCreateWithoutPropertyInput, WeekDayRangeUncheckedCreateWithoutPropertyInput> | WeekDayRangeCreateWithoutPropertyInput[] | WeekDayRangeUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: WeekDayRangeCreateOrConnectWithoutPropertyInput | WeekDayRangeCreateOrConnectWithoutPropertyInput[]
    createMany?: WeekDayRangeCreateManyPropertyInputEnvelope
    connect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
  }

  export type LayerUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<LayerCreateWithoutPropertyInput, LayerUncheckedCreateWithoutPropertyInput> | LayerCreateWithoutPropertyInput[] | LayerUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: LayerCreateOrConnectWithoutPropertyInput | LayerCreateOrConnectWithoutPropertyInput[]
    createMany?: LayerCreateManyPropertyInputEnvelope
    connect?: LayerWhereUniqueInput | LayerWhereUniqueInput[]
  }

  export type VertexesUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<VertexesCreateWithoutPropertyInput, VertexesUncheckedCreateWithoutPropertyInput> | VertexesCreateWithoutPropertyInput[] | VertexesUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: VertexesCreateOrConnectWithoutPropertyInput | VertexesCreateOrConnectWithoutPropertyInput[]
    createMany?: VertexesCreateManyPropertyInputEnvelope
    connect?: VertexesWhereUniqueInput | VertexesWhereUniqueInput[]
  }

  export type WeekDayRangeUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<WeekDayRangeCreateWithoutPropertyInput, WeekDayRangeUncheckedCreateWithoutPropertyInput> | WeekDayRangeCreateWithoutPropertyInput[] | WeekDayRangeUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: WeekDayRangeCreateOrConnectWithoutPropertyInput | WeekDayRangeCreateOrConnectWithoutPropertyInput[]
    upsert?: WeekDayRangeUpsertWithWhereUniqueWithoutPropertyInput | WeekDayRangeUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: WeekDayRangeCreateManyPropertyInputEnvelope
    set?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    disconnect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    delete?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    connect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    update?: WeekDayRangeUpdateWithWhereUniqueWithoutPropertyInput | WeekDayRangeUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: WeekDayRangeUpdateManyWithWhereWithoutPropertyInput | WeekDayRangeUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: WeekDayRangeScalarWhereInput | WeekDayRangeScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutPropertiesNestedInput = {
    create?: XOR<UserCreateWithoutPropertiesInput, UserUncheckedCreateWithoutPropertiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPropertiesInput
    upsert?: UserUpsertWithoutPropertiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPropertiesInput, UserUpdateWithoutPropertiesInput>, UserUncheckedUpdateWithoutPropertiesInput>
  }

  export type LayerUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<LayerCreateWithoutPropertyInput, LayerUncheckedCreateWithoutPropertyInput> | LayerCreateWithoutPropertyInput[] | LayerUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: LayerCreateOrConnectWithoutPropertyInput | LayerCreateOrConnectWithoutPropertyInput[]
    upsert?: LayerUpsertWithWhereUniqueWithoutPropertyInput | LayerUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: LayerCreateManyPropertyInputEnvelope
    set?: LayerWhereUniqueInput | LayerWhereUniqueInput[]
    disconnect?: LayerWhereUniqueInput | LayerWhereUniqueInput[]
    delete?: LayerWhereUniqueInput | LayerWhereUniqueInput[]
    connect?: LayerWhereUniqueInput | LayerWhereUniqueInput[]
    update?: LayerUpdateWithWhereUniqueWithoutPropertyInput | LayerUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: LayerUpdateManyWithWhereWithoutPropertyInput | LayerUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: LayerScalarWhereInput | LayerScalarWhereInput[]
  }

  export type VertexesUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<VertexesCreateWithoutPropertyInput, VertexesUncheckedCreateWithoutPropertyInput> | VertexesCreateWithoutPropertyInput[] | VertexesUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: VertexesCreateOrConnectWithoutPropertyInput | VertexesCreateOrConnectWithoutPropertyInput[]
    upsert?: VertexesUpsertWithWhereUniqueWithoutPropertyInput | VertexesUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: VertexesCreateManyPropertyInputEnvelope
    set?: VertexesWhereUniqueInput | VertexesWhereUniqueInput[]
    disconnect?: VertexesWhereUniqueInput | VertexesWhereUniqueInput[]
    delete?: VertexesWhereUniqueInput | VertexesWhereUniqueInput[]
    connect?: VertexesWhereUniqueInput | VertexesWhereUniqueInput[]
    update?: VertexesUpdateWithWhereUniqueWithoutPropertyInput | VertexesUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: VertexesUpdateManyWithWhereWithoutPropertyInput | VertexesUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: VertexesScalarWhereInput | VertexesScalarWhereInput[]
  }

  export type PropertyStatusUpdateOneRequiredWithoutPropertiesNestedInput = {
    create?: XOR<PropertyStatusCreateWithoutPropertiesInput, PropertyStatusUncheckedCreateWithoutPropertiesInput>
    connectOrCreate?: PropertyStatusCreateOrConnectWithoutPropertiesInput
    upsert?: PropertyStatusUpsertWithoutPropertiesInput
    connect?: PropertyStatusWhereUniqueInput
    update?: XOR<XOR<PropertyStatusUpdateToOneWithWhereWithoutPropertiesInput, PropertyStatusUpdateWithoutPropertiesInput>, PropertyStatusUncheckedUpdateWithoutPropertiesInput>
  }

  export type WeekDayRangeUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<WeekDayRangeCreateWithoutPropertyInput, WeekDayRangeUncheckedCreateWithoutPropertyInput> | WeekDayRangeCreateWithoutPropertyInput[] | WeekDayRangeUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: WeekDayRangeCreateOrConnectWithoutPropertyInput | WeekDayRangeCreateOrConnectWithoutPropertyInput[]
    upsert?: WeekDayRangeUpsertWithWhereUniqueWithoutPropertyInput | WeekDayRangeUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: WeekDayRangeCreateManyPropertyInputEnvelope
    set?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    disconnect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    delete?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    connect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    update?: WeekDayRangeUpdateWithWhereUniqueWithoutPropertyInput | WeekDayRangeUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: WeekDayRangeUpdateManyWithWhereWithoutPropertyInput | WeekDayRangeUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: WeekDayRangeScalarWhereInput | WeekDayRangeScalarWhereInput[]
  }

  export type LayerUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<LayerCreateWithoutPropertyInput, LayerUncheckedCreateWithoutPropertyInput> | LayerCreateWithoutPropertyInput[] | LayerUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: LayerCreateOrConnectWithoutPropertyInput | LayerCreateOrConnectWithoutPropertyInput[]
    upsert?: LayerUpsertWithWhereUniqueWithoutPropertyInput | LayerUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: LayerCreateManyPropertyInputEnvelope
    set?: LayerWhereUniqueInput | LayerWhereUniqueInput[]
    disconnect?: LayerWhereUniqueInput | LayerWhereUniqueInput[]
    delete?: LayerWhereUniqueInput | LayerWhereUniqueInput[]
    connect?: LayerWhereUniqueInput | LayerWhereUniqueInput[]
    update?: LayerUpdateWithWhereUniqueWithoutPropertyInput | LayerUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: LayerUpdateManyWithWhereWithoutPropertyInput | LayerUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: LayerScalarWhereInput | LayerScalarWhereInput[]
  }

  export type VertexesUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<VertexesCreateWithoutPropertyInput, VertexesUncheckedCreateWithoutPropertyInput> | VertexesCreateWithoutPropertyInput[] | VertexesUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: VertexesCreateOrConnectWithoutPropertyInput | VertexesCreateOrConnectWithoutPropertyInput[]
    upsert?: VertexesUpsertWithWhereUniqueWithoutPropertyInput | VertexesUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: VertexesCreateManyPropertyInputEnvelope
    set?: VertexesWhereUniqueInput | VertexesWhereUniqueInput[]
    disconnect?: VertexesWhereUniqueInput | VertexesWhereUniqueInput[]
    delete?: VertexesWhereUniqueInput | VertexesWhereUniqueInput[]
    connect?: VertexesWhereUniqueInput | VertexesWhereUniqueInput[]
    update?: VertexesUpdateWithWhereUniqueWithoutPropertyInput | VertexesUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: VertexesUpdateManyWithWhereWithoutPropertyInput | VertexesUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: VertexesScalarWhereInput | VertexesScalarWhereInput[]
  }

  export type PropertyCreateNestedManyWithoutPropertyStatusInput = {
    create?: XOR<PropertyCreateWithoutPropertyStatusInput, PropertyUncheckedCreateWithoutPropertyStatusInput> | PropertyCreateWithoutPropertyStatusInput[] | PropertyUncheckedCreateWithoutPropertyStatusInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutPropertyStatusInput | PropertyCreateOrConnectWithoutPropertyStatusInput[]
    createMany?: PropertyCreateManyPropertyStatusInputEnvelope
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
  }

  export type PropertyUncheckedCreateNestedManyWithoutPropertyStatusInput = {
    create?: XOR<PropertyCreateWithoutPropertyStatusInput, PropertyUncheckedCreateWithoutPropertyStatusInput> | PropertyCreateWithoutPropertyStatusInput[] | PropertyUncheckedCreateWithoutPropertyStatusInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutPropertyStatusInput | PropertyCreateOrConnectWithoutPropertyStatusInput[]
    createMany?: PropertyCreateManyPropertyStatusInputEnvelope
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
  }

  export type PropertyUpdateManyWithoutPropertyStatusNestedInput = {
    create?: XOR<PropertyCreateWithoutPropertyStatusInput, PropertyUncheckedCreateWithoutPropertyStatusInput> | PropertyCreateWithoutPropertyStatusInput[] | PropertyUncheckedCreateWithoutPropertyStatusInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutPropertyStatusInput | PropertyCreateOrConnectWithoutPropertyStatusInput[]
    upsert?: PropertyUpsertWithWhereUniqueWithoutPropertyStatusInput | PropertyUpsertWithWhereUniqueWithoutPropertyStatusInput[]
    createMany?: PropertyCreateManyPropertyStatusInputEnvelope
    set?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    disconnect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    delete?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    update?: PropertyUpdateWithWhereUniqueWithoutPropertyStatusInput | PropertyUpdateWithWhereUniqueWithoutPropertyStatusInput[]
    updateMany?: PropertyUpdateManyWithWhereWithoutPropertyStatusInput | PropertyUpdateManyWithWhereWithoutPropertyStatusInput[]
    deleteMany?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
  }

  export type PropertyUncheckedUpdateManyWithoutPropertyStatusNestedInput = {
    create?: XOR<PropertyCreateWithoutPropertyStatusInput, PropertyUncheckedCreateWithoutPropertyStatusInput> | PropertyCreateWithoutPropertyStatusInput[] | PropertyUncheckedCreateWithoutPropertyStatusInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutPropertyStatusInput | PropertyCreateOrConnectWithoutPropertyStatusInput[]
    upsert?: PropertyUpsertWithWhereUniqueWithoutPropertyStatusInput | PropertyUpsertWithWhereUniqueWithoutPropertyStatusInput[]
    createMany?: PropertyCreateManyPropertyStatusInputEnvelope
    set?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    disconnect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    delete?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    update?: PropertyUpdateWithWhereUniqueWithoutPropertyStatusInput | PropertyUpdateWithWhereUniqueWithoutPropertyStatusInput[]
    updateMany?: PropertyUpdateManyWithWhereWithoutPropertyStatusInput | PropertyUpdateManyWithWhereWithoutPropertyStatusInput[]
    deleteMany?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
  }

  export type PropertyCreateNestedOneWithoutLayersInput = {
    create?: XOR<PropertyCreateWithoutLayersInput, PropertyUncheckedCreateWithoutLayersInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutLayersInput
    connect?: PropertyWhereUniqueInput
  }

  export type RentCreateNestedManyWithoutLayerInput = {
    create?: XOR<RentCreateWithoutLayerInput, RentUncheckedCreateWithoutLayerInput> | RentCreateWithoutLayerInput[] | RentUncheckedCreateWithoutLayerInput[]
    connectOrCreate?: RentCreateOrConnectWithoutLayerInput | RentCreateOrConnectWithoutLayerInput[]
    createMany?: RentCreateManyLayerInputEnvelope
    connect?: RentWhereUniqueInput | RentWhereUniqueInput[]
  }

  export type RentUncheckedCreateNestedManyWithoutLayerInput = {
    create?: XOR<RentCreateWithoutLayerInput, RentUncheckedCreateWithoutLayerInput> | RentCreateWithoutLayerInput[] | RentUncheckedCreateWithoutLayerInput[]
    connectOrCreate?: RentCreateOrConnectWithoutLayerInput | RentCreateOrConnectWithoutLayerInput[]
    createMany?: RentCreateManyLayerInputEnvelope
    connect?: RentWhereUniqueInput | RentWhereUniqueInput[]
  }

  export type PropertyUpdateOneRequiredWithoutLayersNestedInput = {
    create?: XOR<PropertyCreateWithoutLayersInput, PropertyUncheckedCreateWithoutLayersInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutLayersInput
    upsert?: PropertyUpsertWithoutLayersInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutLayersInput, PropertyUpdateWithoutLayersInput>, PropertyUncheckedUpdateWithoutLayersInput>
  }

  export type RentUpdateManyWithoutLayerNestedInput = {
    create?: XOR<RentCreateWithoutLayerInput, RentUncheckedCreateWithoutLayerInput> | RentCreateWithoutLayerInput[] | RentUncheckedCreateWithoutLayerInput[]
    connectOrCreate?: RentCreateOrConnectWithoutLayerInput | RentCreateOrConnectWithoutLayerInput[]
    upsert?: RentUpsertWithWhereUniqueWithoutLayerInput | RentUpsertWithWhereUniqueWithoutLayerInput[]
    createMany?: RentCreateManyLayerInputEnvelope
    set?: RentWhereUniqueInput | RentWhereUniqueInput[]
    disconnect?: RentWhereUniqueInput | RentWhereUniqueInput[]
    delete?: RentWhereUniqueInput | RentWhereUniqueInput[]
    connect?: RentWhereUniqueInput | RentWhereUniqueInput[]
    update?: RentUpdateWithWhereUniqueWithoutLayerInput | RentUpdateWithWhereUniqueWithoutLayerInput[]
    updateMany?: RentUpdateManyWithWhereWithoutLayerInput | RentUpdateManyWithWhereWithoutLayerInput[]
    deleteMany?: RentScalarWhereInput | RentScalarWhereInput[]
  }

  export type RentUncheckedUpdateManyWithoutLayerNestedInput = {
    create?: XOR<RentCreateWithoutLayerInput, RentUncheckedCreateWithoutLayerInput> | RentCreateWithoutLayerInput[] | RentUncheckedCreateWithoutLayerInput[]
    connectOrCreate?: RentCreateOrConnectWithoutLayerInput | RentCreateOrConnectWithoutLayerInput[]
    upsert?: RentUpsertWithWhereUniqueWithoutLayerInput | RentUpsertWithWhereUniqueWithoutLayerInput[]
    createMany?: RentCreateManyLayerInputEnvelope
    set?: RentWhereUniqueInput | RentWhereUniqueInput[]
    disconnect?: RentWhereUniqueInput | RentWhereUniqueInput[]
    delete?: RentWhereUniqueInput | RentWhereUniqueInput[]
    connect?: RentWhereUniqueInput | RentWhereUniqueInput[]
    update?: RentUpdateWithWhereUniqueWithoutLayerInput | RentUpdateWithWhereUniqueWithoutLayerInput[]
    updateMany?: RentUpdateManyWithWhereWithoutLayerInput | RentUpdateManyWithWhereWithoutLayerInput[]
    deleteMany?: RentScalarWhereInput | RentScalarWhereInput[]
  }

  export type PropertyCreateNestedOneWithoutVertexesInput = {
    create?: XOR<PropertyCreateWithoutVertexesInput, PropertyUncheckedCreateWithoutVertexesInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutVertexesInput
    connect?: PropertyWhereUniqueInput
  }

  export type PropertyUpdateOneRequiredWithoutVertexesNestedInput = {
    create?: XOR<PropertyCreateWithoutVertexesInput, PropertyUncheckedCreateWithoutVertexesInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutVertexesInput
    upsert?: PropertyUpsertWithoutVertexesInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutVertexesInput, PropertyUpdateWithoutVertexesInput>, PropertyUncheckedUpdateWithoutVertexesInput>
  }

  export type UserCreateNestedOneWithoutRentInput = {
    create?: XOR<UserCreateWithoutRentInput, UserUncheckedCreateWithoutRentInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentInput
    connect?: UserWhereUniqueInput
  }

  export type LayerCreateNestedOneWithoutRentsInput = {
    create?: XOR<LayerCreateWithoutRentsInput, LayerUncheckedCreateWithoutRentsInput>
    connectOrCreate?: LayerCreateOrConnectWithoutRentsInput
    connect?: LayerWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRentNestedInput = {
    create?: XOR<UserCreateWithoutRentInput, UserUncheckedCreateWithoutRentInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentInput
    upsert?: UserUpsertWithoutRentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRentInput, UserUpdateWithoutRentInput>, UserUncheckedUpdateWithoutRentInput>
  }

  export type LayerUpdateOneRequiredWithoutRentsNestedInput = {
    create?: XOR<LayerCreateWithoutRentsInput, LayerUncheckedCreateWithoutRentsInput>
    connectOrCreate?: LayerCreateOrConnectWithoutRentsInput
    upsert?: LayerUpsertWithoutRentsInput
    connect?: LayerWhereUniqueInput
    update?: XOR<XOR<LayerUpdateToOneWithWhereWithoutRentsInput, LayerUpdateWithoutRentsInput>, LayerUncheckedUpdateWithoutRentsInput>
  }

  export type WeekDayCreateNestedOneWithoutWeekDayRangesInput = {
    create?: XOR<WeekDayCreateWithoutWeekDayRangesInput, WeekDayUncheckedCreateWithoutWeekDayRangesInput>
    connectOrCreate?: WeekDayCreateOrConnectWithoutWeekDayRangesInput
    connect?: WeekDayWhereUniqueInput
  }

  export type PropertyCreateNestedOneWithoutWeekDayRangesInput = {
    create?: XOR<PropertyCreateWithoutWeekDayRangesInput, PropertyUncheckedCreateWithoutWeekDayRangesInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutWeekDayRangesInput
    connect?: PropertyWhereUniqueInput
  }

  export type WeekDayUpdateOneRequiredWithoutWeekDayRangesNestedInput = {
    create?: XOR<WeekDayCreateWithoutWeekDayRangesInput, WeekDayUncheckedCreateWithoutWeekDayRangesInput>
    connectOrCreate?: WeekDayCreateOrConnectWithoutWeekDayRangesInput
    upsert?: WeekDayUpsertWithoutWeekDayRangesInput
    connect?: WeekDayWhereUniqueInput
    update?: XOR<XOR<WeekDayUpdateToOneWithWhereWithoutWeekDayRangesInput, WeekDayUpdateWithoutWeekDayRangesInput>, WeekDayUncheckedUpdateWithoutWeekDayRangesInput>
  }

  export type PropertyUpdateOneRequiredWithoutWeekDayRangesNestedInput = {
    create?: XOR<PropertyCreateWithoutWeekDayRangesInput, PropertyUncheckedCreateWithoutWeekDayRangesInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutWeekDayRangesInput
    upsert?: PropertyUpsertWithoutWeekDayRangesInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutWeekDayRangesInput, PropertyUpdateWithoutWeekDayRangesInput>, PropertyUncheckedUpdateWithoutWeekDayRangesInput>
  }

  export type WeekDayRangeCreateNestedManyWithoutWeekDayInput = {
    create?: XOR<WeekDayRangeCreateWithoutWeekDayInput, WeekDayRangeUncheckedCreateWithoutWeekDayInput> | WeekDayRangeCreateWithoutWeekDayInput[] | WeekDayRangeUncheckedCreateWithoutWeekDayInput[]
    connectOrCreate?: WeekDayRangeCreateOrConnectWithoutWeekDayInput | WeekDayRangeCreateOrConnectWithoutWeekDayInput[]
    createMany?: WeekDayRangeCreateManyWeekDayInputEnvelope
    connect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
  }

  export type WeekDayRangeUncheckedCreateNestedManyWithoutWeekDayInput = {
    create?: XOR<WeekDayRangeCreateWithoutWeekDayInput, WeekDayRangeUncheckedCreateWithoutWeekDayInput> | WeekDayRangeCreateWithoutWeekDayInput[] | WeekDayRangeUncheckedCreateWithoutWeekDayInput[]
    connectOrCreate?: WeekDayRangeCreateOrConnectWithoutWeekDayInput | WeekDayRangeCreateOrConnectWithoutWeekDayInput[]
    createMany?: WeekDayRangeCreateManyWeekDayInputEnvelope
    connect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
  }

  export type WeekDayRangeUpdateManyWithoutWeekDayNestedInput = {
    create?: XOR<WeekDayRangeCreateWithoutWeekDayInput, WeekDayRangeUncheckedCreateWithoutWeekDayInput> | WeekDayRangeCreateWithoutWeekDayInput[] | WeekDayRangeUncheckedCreateWithoutWeekDayInput[]
    connectOrCreate?: WeekDayRangeCreateOrConnectWithoutWeekDayInput | WeekDayRangeCreateOrConnectWithoutWeekDayInput[]
    upsert?: WeekDayRangeUpsertWithWhereUniqueWithoutWeekDayInput | WeekDayRangeUpsertWithWhereUniqueWithoutWeekDayInput[]
    createMany?: WeekDayRangeCreateManyWeekDayInputEnvelope
    set?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    disconnect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    delete?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    connect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    update?: WeekDayRangeUpdateWithWhereUniqueWithoutWeekDayInput | WeekDayRangeUpdateWithWhereUniqueWithoutWeekDayInput[]
    updateMany?: WeekDayRangeUpdateManyWithWhereWithoutWeekDayInput | WeekDayRangeUpdateManyWithWhereWithoutWeekDayInput[]
    deleteMany?: WeekDayRangeScalarWhereInput | WeekDayRangeScalarWhereInput[]
  }

  export type WeekDayRangeUncheckedUpdateManyWithoutWeekDayNestedInput = {
    create?: XOR<WeekDayRangeCreateWithoutWeekDayInput, WeekDayRangeUncheckedCreateWithoutWeekDayInput> | WeekDayRangeCreateWithoutWeekDayInput[] | WeekDayRangeUncheckedCreateWithoutWeekDayInput[]
    connectOrCreate?: WeekDayRangeCreateOrConnectWithoutWeekDayInput | WeekDayRangeCreateOrConnectWithoutWeekDayInput[]
    upsert?: WeekDayRangeUpsertWithWhereUniqueWithoutWeekDayInput | WeekDayRangeUpsertWithWhereUniqueWithoutWeekDayInput[]
    createMany?: WeekDayRangeCreateManyWeekDayInputEnvelope
    set?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    disconnect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    delete?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    connect?: WeekDayRangeWhereUniqueInput | WeekDayRangeWhereUniqueInput[]
    update?: WeekDayRangeUpdateWithWhereUniqueWithoutWeekDayInput | WeekDayRangeUpdateWithWhereUniqueWithoutWeekDayInput[]
    updateMany?: WeekDayRangeUpdateManyWithWhereWithoutWeekDayInput | WeekDayRangeUpdateManyWithWhereWithoutWeekDayInput[]
    deleteMany?: WeekDayRangeScalarWhereInput | WeekDayRangeScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutUsedReferralCodeInput = {
    create?: XOR<UserCreateWithoutUsedReferralCodeInput, UserUncheckedCreateWithoutUsedReferralCodeInput> | UserCreateWithoutUsedReferralCodeInput[] | UserUncheckedCreateWithoutUsedReferralCodeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUsedReferralCodeInput | UserCreateOrConnectWithoutUsedReferralCodeInput[]
    createMany?: UserCreateManyUsedReferralCodeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutOwnedReferralCodeInput = {
    create?: XOR<UserCreateWithoutOwnedReferralCodeInput, UserUncheckedCreateWithoutOwnedReferralCodeInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedReferralCodeInput
    connect?: UserWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutUsedReferralCodeInput = {
    create?: XOR<UserCreateWithoutUsedReferralCodeInput, UserUncheckedCreateWithoutUsedReferralCodeInput> | UserCreateWithoutUsedReferralCodeInput[] | UserUncheckedCreateWithoutUsedReferralCodeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUsedReferralCodeInput | UserCreateOrConnectWithoutUsedReferralCodeInput[]
    createMany?: UserCreateManyUsedReferralCodeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedOneWithoutOwnedReferralCodeInput = {
    create?: XOR<UserCreateWithoutOwnedReferralCodeInput, UserUncheckedCreateWithoutOwnedReferralCodeInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedReferralCodeInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateManyWithoutUsedReferralCodeNestedInput = {
    create?: XOR<UserCreateWithoutUsedReferralCodeInput, UserUncheckedCreateWithoutUsedReferralCodeInput> | UserCreateWithoutUsedReferralCodeInput[] | UserUncheckedCreateWithoutUsedReferralCodeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUsedReferralCodeInput | UserCreateOrConnectWithoutUsedReferralCodeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUsedReferralCodeInput | UserUpsertWithWhereUniqueWithoutUsedReferralCodeInput[]
    createMany?: UserCreateManyUsedReferralCodeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUsedReferralCodeInput | UserUpdateWithWhereUniqueWithoutUsedReferralCodeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUsedReferralCodeInput | UserUpdateManyWithWhereWithoutUsedReferralCodeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateOneWithoutOwnedReferralCodeNestedInput = {
    create?: XOR<UserCreateWithoutOwnedReferralCodeInput, UserUncheckedCreateWithoutOwnedReferralCodeInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedReferralCodeInput
    upsert?: UserUpsertWithoutOwnedReferralCodeInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedReferralCodeInput, UserUpdateWithoutOwnedReferralCodeInput>, UserUncheckedUpdateWithoutOwnedReferralCodeInput>
  }

  export type UserUncheckedUpdateManyWithoutUsedReferralCodeNestedInput = {
    create?: XOR<UserCreateWithoutUsedReferralCodeInput, UserUncheckedCreateWithoutUsedReferralCodeInput> | UserCreateWithoutUsedReferralCodeInput[] | UserUncheckedCreateWithoutUsedReferralCodeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUsedReferralCodeInput | UserCreateOrConnectWithoutUsedReferralCodeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUsedReferralCodeInput | UserUpsertWithWhereUniqueWithoutUsedReferralCodeInput[]
    createMany?: UserCreateManyUsedReferralCodeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUsedReferralCodeInput | UserUpdateWithWhereUniqueWithoutUsedReferralCodeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUsedReferralCodeInput | UserUpdateManyWithWhereWithoutUsedReferralCodeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateOneWithoutOwnedReferralCodeNestedInput = {
    create?: XOR<UserCreateWithoutOwnedReferralCodeInput, UserUncheckedCreateWithoutOwnedReferralCodeInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedReferralCodeInput
    upsert?: UserUpsertWithoutOwnedReferralCodeInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedReferralCodeInput, UserUpdateWithoutOwnedReferralCodeInput>, UserUncheckedUpdateWithoutOwnedReferralCodeInput>
  }

  export type UserCreateNestedOneWithoutRewardInput = {
    create?: XOR<UserCreateWithoutRewardInput, UserUncheckedCreateWithoutRewardInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardInput
    connect?: UserWhereUniqueInput
  }

  export type EnumTaskTypeFieldUpdateOperationsInput = {
    set?: $Enums.TaskType
  }

  export type UserUpdateOneRequiredWithoutRewardNestedInput = {
    create?: XOR<UserCreateWithoutRewardInput, UserUncheckedCreateWithoutRewardInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardInput
    upsert?: UserUpsertWithoutRewardInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRewardInput, UserUpdateWithoutRewardInput>, UserUncheckedUpdateWithoutRewardInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeFilter<$PrismaModel> | $Enums.TaskType
  }

  export type NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaskType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskTypeFilter<$PrismaModel>
    _max?: NestedEnumTaskTypeFilter<$PrismaModel>
  }

  export type CategoryCreateWithoutUsersInput = {
    type: string
  }

  export type CategoryUncheckedCreateWithoutUsersInput = {
    id?: number
    type: string
  }

  export type CategoryCreateOrConnectWithoutUsersInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutUsersInput, CategoryUncheckedCreateWithoutUsersInput>
  }

  export type StatusCreateWithoutUsersInput = {
    type: string
  }

  export type StatusUncheckedCreateWithoutUsersInput = {
    id?: number
    type: string
  }

  export type StatusCreateOrConnectWithoutUsersInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutUsersInput, StatusUncheckedCreateWithoutUsersInput>
  }

  export type PropertyCreateWithoutOwnerInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    noFlyZone?: boolean
    latitude: number
    longitude: number
    isActive?: boolean
    weekDayRanges?: WeekDayRangeCreateNestedManyWithoutPropertyInput
    layers?: LayerCreateNestedManyWithoutPropertyInput
    vertexes?: VertexesCreateNestedManyWithoutPropertyInput
    propertyStatus?: PropertyStatusCreateNestedOneWithoutPropertiesInput
  }

  export type PropertyUncheckedCreateWithoutOwnerInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    noFlyZone?: boolean
    latitude: number
    longitude: number
    propertyStatusId?: number
    isActive?: boolean
    weekDayRanges?: WeekDayRangeUncheckedCreateNestedManyWithoutPropertyInput
    layers?: LayerUncheckedCreateNestedManyWithoutPropertyInput
    vertexes?: VertexesUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutOwnerInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutOwnerInput, PropertyUncheckedCreateWithoutOwnerInput>
  }

  export type PropertyCreateManyOwnerInputEnvelope = {
    data: PropertyCreateManyOwnerInput | PropertyCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type RentCreateWithoutRenterUserInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    startTime: Date | string
    endTime: Date | string
    isActive?: boolean
    layer: LayerCreateNestedOneWithoutRentsInput
  }

  export type RentUncheckedCreateWithoutRenterUserInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    startTime: Date | string
    endTime: Date | string
    layerId: number
    isActive?: boolean
  }

  export type RentCreateOrConnectWithoutRenterUserInput = {
    where: RentWhereUniqueInput
    create: XOR<RentCreateWithoutRenterUserInput, RentUncheckedCreateWithoutRenterUserInput>
  }

  export type RentCreateManyRenterUserInputEnvelope = {
    data: RentCreateManyRenterUserInput | RentCreateManyRenterUserInput[]
    skipDuplicates?: boolean
  }

  export type ReferralCodeCreateWithoutUsedByInput = {
    code: string
    codeChanged?: boolean
    usedByBonusEarned?: boolean
    ownedByBonusEarned?: boolean
    ownedBy?: UserCreateNestedOneWithoutOwnedReferralCodeInput
  }

  export type ReferralCodeUncheckedCreateWithoutUsedByInput = {
    id?: number
    code: string
    codeChanged?: boolean
    usedByBonusEarned?: boolean
    ownedByBonusEarned?: boolean
    ownedBy?: UserUncheckedCreateNestedOneWithoutOwnedReferralCodeInput
  }

  export type ReferralCodeCreateOrConnectWithoutUsedByInput = {
    where: ReferralCodeWhereUniqueInput
    create: XOR<ReferralCodeCreateWithoutUsedByInput, ReferralCodeUncheckedCreateWithoutUsedByInput>
  }

  export type ReferralCodeCreateWithoutOwnedByInput = {
    code: string
    codeChanged?: boolean
    usedByBonusEarned?: boolean
    ownedByBonusEarned?: boolean
    usedBy?: UserCreateNestedManyWithoutUsedReferralCodeInput
  }

  export type ReferralCodeUncheckedCreateWithoutOwnedByInput = {
    id?: number
    code: string
    codeChanged?: boolean
    usedByBonusEarned?: boolean
    ownedByBonusEarned?: boolean
    usedBy?: UserUncheckedCreateNestedManyWithoutUsedReferralCodeInput
  }

  export type ReferralCodeCreateOrConnectWithoutOwnedByInput = {
    where: ReferralCodeWhereUniqueInput
    create: XOR<ReferralCodeCreateWithoutOwnedByInput, ReferralCodeUncheckedCreateWithoutOwnedByInput>
  }

  export type RewardCreateWithoutUserInput = {
    id?: string
    rewardId: string
    taskType: $Enums.TaskType
    point: number
    completed?: boolean
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type RewardUncheckedCreateWithoutUserInput = {
    id?: string
    rewardId: string
    taskType: $Enums.TaskType
    point: number
    completed?: boolean
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type RewardCreateOrConnectWithoutUserInput = {
    where: RewardWhereUniqueInput
    create: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput>
  }

  export type RewardCreateManyUserInputEnvelope = {
    data: RewardCreateManyUserInput | RewardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutUsersInput = {
    update: XOR<CategoryUpdateWithoutUsersInput, CategoryUncheckedUpdateWithoutUsersInput>
    create: XOR<CategoryCreateWithoutUsersInput, CategoryUncheckedCreateWithoutUsersInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutUsersInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutUsersInput, CategoryUncheckedUpdateWithoutUsersInput>
  }

  export type CategoryUpdateWithoutUsersInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUpsertWithoutUsersInput = {
    update: XOR<StatusUpdateWithoutUsersInput, StatusUncheckedUpdateWithoutUsersInput>
    create: XOR<StatusCreateWithoutUsersInput, StatusUncheckedCreateWithoutUsersInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutUsersInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutUsersInput, StatusUncheckedUpdateWithoutUsersInput>
  }

  export type StatusUpdateWithoutUsersInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyUpsertWithWhereUniqueWithoutOwnerInput = {
    where: PropertyWhereUniqueInput
    update: XOR<PropertyUpdateWithoutOwnerInput, PropertyUncheckedUpdateWithoutOwnerInput>
    create: XOR<PropertyCreateWithoutOwnerInput, PropertyUncheckedCreateWithoutOwnerInput>
  }

  export type PropertyUpdateWithWhereUniqueWithoutOwnerInput = {
    where: PropertyWhereUniqueInput
    data: XOR<PropertyUpdateWithoutOwnerInput, PropertyUncheckedUpdateWithoutOwnerInput>
  }

  export type PropertyUpdateManyWithWhereWithoutOwnerInput = {
    where: PropertyScalarWhereInput
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyWithoutOwnerInput>
  }

  export type PropertyScalarWhereInput = {
    AND?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
    OR?: PropertyScalarWhereInput[]
    NOT?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
    id?: IntFilter<"Property"> | number
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updateAt?: DateTimeFilter<"Property"> | Date | string
    title?: StringFilter<"Property"> | string
    transitFee?: StringFilter<"Property"> | string
    address?: StringFilter<"Property"> | string
    timezone?: StringFilter<"Property"> | string
    hasLandingDeck?: BoolFilter<"Property"> | boolean
    hasChargingStation?: BoolFilter<"Property"> | boolean
    hasStorageHub?: BoolFilter<"Property"> | boolean
    isFixedTransitFee?: BoolFilter<"Property"> | boolean
    isRentableAirspace?: BoolFilter<"Property"> | boolean
    ownerId?: IntFilter<"Property"> | number
    noFlyZone?: BoolFilter<"Property"> | boolean
    latitude?: FloatFilter<"Property"> | number
    longitude?: FloatFilter<"Property"> | number
    propertyStatusId?: IntFilter<"Property"> | number
    isActive?: BoolFilter<"Property"> | boolean
  }

  export type RentUpsertWithWhereUniqueWithoutRenterUserInput = {
    where: RentWhereUniqueInput
    update: XOR<RentUpdateWithoutRenterUserInput, RentUncheckedUpdateWithoutRenterUserInput>
    create: XOR<RentCreateWithoutRenterUserInput, RentUncheckedCreateWithoutRenterUserInput>
  }

  export type RentUpdateWithWhereUniqueWithoutRenterUserInput = {
    where: RentWhereUniqueInput
    data: XOR<RentUpdateWithoutRenterUserInput, RentUncheckedUpdateWithoutRenterUserInput>
  }

  export type RentUpdateManyWithWhereWithoutRenterUserInput = {
    where: RentScalarWhereInput
    data: XOR<RentUpdateManyMutationInput, RentUncheckedUpdateManyWithoutRenterUserInput>
  }

  export type RentScalarWhereInput = {
    AND?: RentScalarWhereInput | RentScalarWhereInput[]
    OR?: RentScalarWhereInput[]
    NOT?: RentScalarWhereInput | RentScalarWhereInput[]
    id?: IntFilter<"Rent"> | number
    createdAt?: DateTimeFilter<"Rent"> | Date | string
    updateAt?: DateTimeFilter<"Rent"> | Date | string
    tokenId?: StringFilter<"Rent"> | string
    startTime?: DateTimeFilter<"Rent"> | Date | string
    endTime?: DateTimeFilter<"Rent"> | Date | string
    renterId?: IntFilter<"Rent"> | number
    layerId?: IntFilter<"Rent"> | number
    isActive?: BoolFilter<"Rent"> | boolean
  }

  export type ReferralCodeUpsertWithoutUsedByInput = {
    update: XOR<ReferralCodeUpdateWithoutUsedByInput, ReferralCodeUncheckedUpdateWithoutUsedByInput>
    create: XOR<ReferralCodeCreateWithoutUsedByInput, ReferralCodeUncheckedCreateWithoutUsedByInput>
    where?: ReferralCodeWhereInput
  }

  export type ReferralCodeUpdateToOneWithWhereWithoutUsedByInput = {
    where?: ReferralCodeWhereInput
    data: XOR<ReferralCodeUpdateWithoutUsedByInput, ReferralCodeUncheckedUpdateWithoutUsedByInput>
  }

  export type ReferralCodeUpdateWithoutUsedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    codeChanged?: BoolFieldUpdateOperationsInput | boolean
    usedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    ownedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    ownedBy?: UserUpdateOneWithoutOwnedReferralCodeNestedInput
  }

  export type ReferralCodeUncheckedUpdateWithoutUsedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    codeChanged?: BoolFieldUpdateOperationsInput | boolean
    usedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    ownedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    ownedBy?: UserUncheckedUpdateOneWithoutOwnedReferralCodeNestedInput
  }

  export type ReferralCodeUpsertWithoutOwnedByInput = {
    update: XOR<ReferralCodeUpdateWithoutOwnedByInput, ReferralCodeUncheckedUpdateWithoutOwnedByInput>
    create: XOR<ReferralCodeCreateWithoutOwnedByInput, ReferralCodeUncheckedCreateWithoutOwnedByInput>
    where?: ReferralCodeWhereInput
  }

  export type ReferralCodeUpdateToOneWithWhereWithoutOwnedByInput = {
    where?: ReferralCodeWhereInput
    data: XOR<ReferralCodeUpdateWithoutOwnedByInput, ReferralCodeUncheckedUpdateWithoutOwnedByInput>
  }

  export type ReferralCodeUpdateWithoutOwnedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    codeChanged?: BoolFieldUpdateOperationsInput | boolean
    usedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    ownedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    usedBy?: UserUpdateManyWithoutUsedReferralCodeNestedInput
  }

  export type ReferralCodeUncheckedUpdateWithoutOwnedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    codeChanged?: BoolFieldUpdateOperationsInput | boolean
    usedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    ownedByBonusEarned?: BoolFieldUpdateOperationsInput | boolean
    usedBy?: UserUncheckedUpdateManyWithoutUsedReferralCodeNestedInput
  }

  export type RewardUpsertWithWhereUniqueWithoutUserInput = {
    where: RewardWhereUniqueInput
    update: XOR<RewardUpdateWithoutUserInput, RewardUncheckedUpdateWithoutUserInput>
    create: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput>
  }

  export type RewardUpdateWithWhereUniqueWithoutUserInput = {
    where: RewardWhereUniqueInput
    data: XOR<RewardUpdateWithoutUserInput, RewardUncheckedUpdateWithoutUserInput>
  }

  export type RewardUpdateManyWithWhereWithoutUserInput = {
    where: RewardScalarWhereInput
    data: XOR<RewardUpdateManyMutationInput, RewardUncheckedUpdateManyWithoutUserInput>
  }

  export type RewardScalarWhereInput = {
    AND?: RewardScalarWhereInput | RewardScalarWhereInput[]
    OR?: RewardScalarWhereInput[]
    NOT?: RewardScalarWhereInput | RewardScalarWhereInput[]
    id?: StringFilter<"Reward"> | string
    rewardId?: StringFilter<"Reward"> | string
    blockchainAddress?: StringFilter<"Reward"> | string
    taskType?: EnumTaskTypeFilter<"Reward"> | $Enums.TaskType
    point?: FloatFilter<"Reward"> | number
    completed?: BoolFilter<"Reward"> | boolean
    createdAt?: DateTimeFilter<"Reward"> | Date | string
    updateAt?: DateTimeFilter<"Reward"> | Date | string
  }

  export type UserCreateWithoutKYCStatusInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    phoneNumber: string
    totalPoint?: number
    isActive?: boolean
    category: CategoryCreateNestedOneWithoutUsersInput
    properties?: PropertyCreateNestedManyWithoutOwnerInput
    Rent?: RentCreateNestedManyWithoutRenterUserInput
    usedReferralCode?: ReferralCodeCreateNestedOneWithoutUsedByInput
    ownedReferralCode?: ReferralCodeCreateNestedOneWithoutOwnedByInput
    Reward?: RewardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutKYCStatusInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    categoryId: number
    phoneNumber: string
    totalPoint?: number
    isActive?: boolean
    usedReferralCodeId?: number | null
    ownedReferralCodeId?: number | null
    properties?: PropertyUncheckedCreateNestedManyWithoutOwnerInput
    Rent?: RentUncheckedCreateNestedManyWithoutRenterUserInput
    Reward?: RewardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutKYCStatusInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKYCStatusInput, UserUncheckedCreateWithoutKYCStatusInput>
  }

  export type UserCreateManyKYCStatusInputEnvelope = {
    data: UserCreateManyKYCStatusInput | UserCreateManyKYCStatusInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutKYCStatusInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutKYCStatusInput, UserUncheckedUpdateWithoutKYCStatusInput>
    create: XOR<UserCreateWithoutKYCStatusInput, UserUncheckedCreateWithoutKYCStatusInput>
  }

  export type UserUpdateWithWhereUniqueWithoutKYCStatusInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutKYCStatusInput, UserUncheckedUpdateWithoutKYCStatusInput>
  }

  export type UserUpdateManyWithWhereWithoutKYCStatusInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutKYCStatusInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
    username?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    blockchainAddress?: StringFilter<"User"> | string
    isAdmin?: BoolFilter<"User"> | boolean
    newsletter?: BoolFilter<"User"> | boolean
    categoryId?: IntFilter<"User"> | number
    phoneNumber?: StringFilter<"User"> | string
    totalPoint?: FloatFilter<"User"> | number
    KYCStatusId?: IntFilter<"User"> | number
    isActive?: BoolFilter<"User"> | boolean
    usedReferralCodeId?: IntNullableFilter<"User"> | number | null
    ownedReferralCodeId?: IntNullableFilter<"User"> | number | null
  }

  export type UserCreateWithoutCategoryInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    phoneNumber: string
    totalPoint?: number
    isActive?: boolean
    KYCStatus?: StatusCreateNestedOneWithoutUsersInput
    properties?: PropertyCreateNestedManyWithoutOwnerInput
    Rent?: RentCreateNestedManyWithoutRenterUserInput
    usedReferralCode?: ReferralCodeCreateNestedOneWithoutUsedByInput
    ownedReferralCode?: ReferralCodeCreateNestedOneWithoutOwnedByInput
    Reward?: RewardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCategoryInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    phoneNumber: string
    totalPoint?: number
    KYCStatusId?: number
    isActive?: boolean
    usedReferralCodeId?: number | null
    ownedReferralCodeId?: number | null
    properties?: PropertyUncheckedCreateNestedManyWithoutOwnerInput
    Rent?: RentUncheckedCreateNestedManyWithoutRenterUserInput
    Reward?: RewardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCategoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCategoryInput, UserUncheckedCreateWithoutCategoryInput>
  }

  export type UserCreateManyCategoryInputEnvelope = {
    data: UserCreateManyCategoryInput | UserCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutCategoryInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCategoryInput, UserUncheckedUpdateWithoutCategoryInput>
    create: XOR<UserCreateWithoutCategoryInput, UserUncheckedCreateWithoutCategoryInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCategoryInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCategoryInput, UserUncheckedUpdateWithoutCategoryInput>
  }

  export type UserUpdateManyWithWhereWithoutCategoryInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCategoryInput>
  }

  export type WeekDayRangeCreateWithoutPropertyInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    fromTime: number
    toTime: number
    isAvailable: boolean
    weekDay: WeekDayCreateNestedOneWithoutWeekDayRangesInput
  }

  export type WeekDayRangeUncheckedCreateWithoutPropertyInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    fromTime: number
    toTime: number
    isAvailable: boolean
    weekDayId: number
  }

  export type WeekDayRangeCreateOrConnectWithoutPropertyInput = {
    where: WeekDayRangeWhereUniqueInput
    create: XOR<WeekDayRangeCreateWithoutPropertyInput, WeekDayRangeUncheckedCreateWithoutPropertyInput>
  }

  export type WeekDayRangeCreateManyPropertyInputEnvelope = {
    data: WeekDayRangeCreateManyPropertyInput | WeekDayRangeCreateManyPropertyInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutPropertiesInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    phoneNumber: string
    totalPoint?: number
    isActive?: boolean
    category: CategoryCreateNestedOneWithoutUsersInput
    KYCStatus?: StatusCreateNestedOneWithoutUsersInput
    Rent?: RentCreateNestedManyWithoutRenterUserInput
    usedReferralCode?: ReferralCodeCreateNestedOneWithoutUsedByInput
    ownedReferralCode?: ReferralCodeCreateNestedOneWithoutOwnedByInput
    Reward?: RewardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPropertiesInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    categoryId: number
    phoneNumber: string
    totalPoint?: number
    KYCStatusId?: number
    isActive?: boolean
    usedReferralCodeId?: number | null
    ownedReferralCodeId?: number | null
    Rent?: RentUncheckedCreateNestedManyWithoutRenterUserInput
    Reward?: RewardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPropertiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPropertiesInput, UserUncheckedCreateWithoutPropertiesInput>
  }

  export type LayerCreateWithoutPropertyInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    rents?: RentCreateNestedManyWithoutLayerInput
  }

  export type LayerUncheckedCreateWithoutPropertyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    rents?: RentUncheckedCreateNestedManyWithoutLayerInput
  }

  export type LayerCreateOrConnectWithoutPropertyInput = {
    where: LayerWhereUniqueInput
    create: XOR<LayerCreateWithoutPropertyInput, LayerUncheckedCreateWithoutPropertyInput>
  }

  export type LayerCreateManyPropertyInputEnvelope = {
    data: LayerCreateManyPropertyInput | LayerCreateManyPropertyInput[]
    skipDuplicates?: boolean
  }

  export type VertexesCreateWithoutPropertyInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    latitude: number
    longitude: number
  }

  export type VertexesUncheckedCreateWithoutPropertyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    latitude: number
    longitude: number
  }

  export type VertexesCreateOrConnectWithoutPropertyInput = {
    where: VertexesWhereUniqueInput
    create: XOR<VertexesCreateWithoutPropertyInput, VertexesUncheckedCreateWithoutPropertyInput>
  }

  export type VertexesCreateManyPropertyInputEnvelope = {
    data: VertexesCreateManyPropertyInput | VertexesCreateManyPropertyInput[]
    skipDuplicates?: boolean
  }

  export type PropertyStatusCreateWithoutPropertiesInput = {
    type: string
  }

  export type PropertyStatusUncheckedCreateWithoutPropertiesInput = {
    id?: number
    type: string
  }

  export type PropertyStatusCreateOrConnectWithoutPropertiesInput = {
    where: PropertyStatusWhereUniqueInput
    create: XOR<PropertyStatusCreateWithoutPropertiesInput, PropertyStatusUncheckedCreateWithoutPropertiesInput>
  }

  export type WeekDayRangeUpsertWithWhereUniqueWithoutPropertyInput = {
    where: WeekDayRangeWhereUniqueInput
    update: XOR<WeekDayRangeUpdateWithoutPropertyInput, WeekDayRangeUncheckedUpdateWithoutPropertyInput>
    create: XOR<WeekDayRangeCreateWithoutPropertyInput, WeekDayRangeUncheckedCreateWithoutPropertyInput>
  }

  export type WeekDayRangeUpdateWithWhereUniqueWithoutPropertyInput = {
    where: WeekDayRangeWhereUniqueInput
    data: XOR<WeekDayRangeUpdateWithoutPropertyInput, WeekDayRangeUncheckedUpdateWithoutPropertyInput>
  }

  export type WeekDayRangeUpdateManyWithWhereWithoutPropertyInput = {
    where: WeekDayRangeScalarWhereInput
    data: XOR<WeekDayRangeUpdateManyMutationInput, WeekDayRangeUncheckedUpdateManyWithoutPropertyInput>
  }

  export type WeekDayRangeScalarWhereInput = {
    AND?: WeekDayRangeScalarWhereInput | WeekDayRangeScalarWhereInput[]
    OR?: WeekDayRangeScalarWhereInput[]
    NOT?: WeekDayRangeScalarWhereInput | WeekDayRangeScalarWhereInput[]
    createdAt?: DateTimeFilter<"WeekDayRange"> | Date | string
    updateAt?: DateTimeFilter<"WeekDayRange"> | Date | string
    fromTime?: FloatFilter<"WeekDayRange"> | number
    toTime?: FloatFilter<"WeekDayRange"> | number
    isAvailable?: BoolFilter<"WeekDayRange"> | boolean
    weekDayId?: IntFilter<"WeekDayRange"> | number
    propertyId?: IntFilter<"WeekDayRange"> | number
  }

  export type UserUpsertWithoutPropertiesInput = {
    update: XOR<UserUpdateWithoutPropertiesInput, UserUncheckedUpdateWithoutPropertiesInput>
    create: XOR<UserCreateWithoutPropertiesInput, UserUncheckedCreateWithoutPropertiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPropertiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPropertiesInput, UserUncheckedUpdateWithoutPropertiesInput>
  }

  export type UserUpdateWithoutPropertiesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: CategoryUpdateOneRequiredWithoutUsersNestedInput
    KYCStatus?: StatusUpdateOneRequiredWithoutUsersNestedInput
    Rent?: RentUpdateManyWithoutRenterUserNestedInput
    usedReferralCode?: ReferralCodeUpdateOneWithoutUsedByNestedInput
    ownedReferralCode?: ReferralCodeUpdateOneWithoutOwnedByNestedInput
    Reward?: RewardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPropertiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    KYCStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    Rent?: RentUncheckedUpdateManyWithoutRenterUserNestedInput
    Reward?: RewardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LayerUpsertWithWhereUniqueWithoutPropertyInput = {
    where: LayerWhereUniqueInput
    update: XOR<LayerUpdateWithoutPropertyInput, LayerUncheckedUpdateWithoutPropertyInput>
    create: XOR<LayerCreateWithoutPropertyInput, LayerUncheckedCreateWithoutPropertyInput>
  }

  export type LayerUpdateWithWhereUniqueWithoutPropertyInput = {
    where: LayerWhereUniqueInput
    data: XOR<LayerUpdateWithoutPropertyInput, LayerUncheckedUpdateWithoutPropertyInput>
  }

  export type LayerUpdateManyWithWhereWithoutPropertyInput = {
    where: LayerScalarWhereInput
    data: XOR<LayerUpdateManyMutationInput, LayerUncheckedUpdateManyWithoutPropertyInput>
  }

  export type LayerScalarWhereInput = {
    AND?: LayerScalarWhereInput | LayerScalarWhereInput[]
    OR?: LayerScalarWhereInput[]
    NOT?: LayerScalarWhereInput | LayerScalarWhereInput[]
    id?: IntFilter<"Layer"> | number
    createdAt?: DateTimeFilter<"Layer"> | Date | string
    updateAt?: DateTimeFilter<"Layer"> | Date | string
    tokenId?: StringFilter<"Layer"> | string
    propertyId?: IntFilter<"Layer"> | number
  }

  export type VertexesUpsertWithWhereUniqueWithoutPropertyInput = {
    where: VertexesWhereUniqueInput
    update: XOR<VertexesUpdateWithoutPropertyInput, VertexesUncheckedUpdateWithoutPropertyInput>
    create: XOR<VertexesCreateWithoutPropertyInput, VertexesUncheckedCreateWithoutPropertyInput>
  }

  export type VertexesUpdateWithWhereUniqueWithoutPropertyInput = {
    where: VertexesWhereUniqueInput
    data: XOR<VertexesUpdateWithoutPropertyInput, VertexesUncheckedUpdateWithoutPropertyInput>
  }

  export type VertexesUpdateManyWithWhereWithoutPropertyInput = {
    where: VertexesScalarWhereInput
    data: XOR<VertexesUpdateManyMutationInput, VertexesUncheckedUpdateManyWithoutPropertyInput>
  }

  export type VertexesScalarWhereInput = {
    AND?: VertexesScalarWhereInput | VertexesScalarWhereInput[]
    OR?: VertexesScalarWhereInput[]
    NOT?: VertexesScalarWhereInput | VertexesScalarWhereInput[]
    id?: IntFilter<"Vertexes"> | number
    createdAt?: DateTimeFilter<"Vertexes"> | Date | string
    updateAt?: DateTimeFilter<"Vertexes"> | Date | string
    latitude?: FloatFilter<"Vertexes"> | number
    longitude?: FloatFilter<"Vertexes"> | number
    propertyId?: IntFilter<"Vertexes"> | number
  }

  export type PropertyStatusUpsertWithoutPropertiesInput = {
    update: XOR<PropertyStatusUpdateWithoutPropertiesInput, PropertyStatusUncheckedUpdateWithoutPropertiesInput>
    create: XOR<PropertyStatusCreateWithoutPropertiesInput, PropertyStatusUncheckedCreateWithoutPropertiesInput>
    where?: PropertyStatusWhereInput
  }

  export type PropertyStatusUpdateToOneWithWhereWithoutPropertiesInput = {
    where?: PropertyStatusWhereInput
    data: XOR<PropertyStatusUpdateWithoutPropertiesInput, PropertyStatusUncheckedUpdateWithoutPropertiesInput>
  }

  export type PropertyStatusUpdateWithoutPropertiesInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyStatusUncheckedUpdateWithoutPropertiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyCreateWithoutPropertyStatusInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    noFlyZone?: boolean
    latitude: number
    longitude: number
    isActive?: boolean
    weekDayRanges?: WeekDayRangeCreateNestedManyWithoutPropertyInput
    owner: UserCreateNestedOneWithoutPropertiesInput
    layers?: LayerCreateNestedManyWithoutPropertyInput
    vertexes?: VertexesCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutPropertyStatusInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    ownerId: number
    noFlyZone?: boolean
    latitude: number
    longitude: number
    isActive?: boolean
    weekDayRanges?: WeekDayRangeUncheckedCreateNestedManyWithoutPropertyInput
    layers?: LayerUncheckedCreateNestedManyWithoutPropertyInput
    vertexes?: VertexesUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutPropertyStatusInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutPropertyStatusInput, PropertyUncheckedCreateWithoutPropertyStatusInput>
  }

  export type PropertyCreateManyPropertyStatusInputEnvelope = {
    data: PropertyCreateManyPropertyStatusInput | PropertyCreateManyPropertyStatusInput[]
    skipDuplicates?: boolean
  }

  export type PropertyUpsertWithWhereUniqueWithoutPropertyStatusInput = {
    where: PropertyWhereUniqueInput
    update: XOR<PropertyUpdateWithoutPropertyStatusInput, PropertyUncheckedUpdateWithoutPropertyStatusInput>
    create: XOR<PropertyCreateWithoutPropertyStatusInput, PropertyUncheckedCreateWithoutPropertyStatusInput>
  }

  export type PropertyUpdateWithWhereUniqueWithoutPropertyStatusInput = {
    where: PropertyWhereUniqueInput
    data: XOR<PropertyUpdateWithoutPropertyStatusInput, PropertyUncheckedUpdateWithoutPropertyStatusInput>
  }

  export type PropertyUpdateManyWithWhereWithoutPropertyStatusInput = {
    where: PropertyScalarWhereInput
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyWithoutPropertyStatusInput>
  }

  export type PropertyCreateWithoutLayersInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    noFlyZone?: boolean
    latitude: number
    longitude: number
    isActive?: boolean
    weekDayRanges?: WeekDayRangeCreateNestedManyWithoutPropertyInput
    owner: UserCreateNestedOneWithoutPropertiesInput
    vertexes?: VertexesCreateNestedManyWithoutPropertyInput
    propertyStatus?: PropertyStatusCreateNestedOneWithoutPropertiesInput
  }

  export type PropertyUncheckedCreateWithoutLayersInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    ownerId: number
    noFlyZone?: boolean
    latitude: number
    longitude: number
    propertyStatusId?: number
    isActive?: boolean
    weekDayRanges?: WeekDayRangeUncheckedCreateNestedManyWithoutPropertyInput
    vertexes?: VertexesUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutLayersInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutLayersInput, PropertyUncheckedCreateWithoutLayersInput>
  }

  export type RentCreateWithoutLayerInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    startTime: Date | string
    endTime: Date | string
    isActive?: boolean
    renterUser: UserCreateNestedOneWithoutRentInput
  }

  export type RentUncheckedCreateWithoutLayerInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    startTime: Date | string
    endTime: Date | string
    renterId: number
    isActive?: boolean
  }

  export type RentCreateOrConnectWithoutLayerInput = {
    where: RentWhereUniqueInput
    create: XOR<RentCreateWithoutLayerInput, RentUncheckedCreateWithoutLayerInput>
  }

  export type RentCreateManyLayerInputEnvelope = {
    data: RentCreateManyLayerInput | RentCreateManyLayerInput[]
    skipDuplicates?: boolean
  }

  export type PropertyUpsertWithoutLayersInput = {
    update: XOR<PropertyUpdateWithoutLayersInput, PropertyUncheckedUpdateWithoutLayersInput>
    create: XOR<PropertyCreateWithoutLayersInput, PropertyUncheckedCreateWithoutLayersInput>
    where?: PropertyWhereInput
  }

  export type PropertyUpdateToOneWithWhereWithoutLayersInput = {
    where?: PropertyWhereInput
    data: XOR<PropertyUpdateWithoutLayersInput, PropertyUncheckedUpdateWithoutLayersInput>
  }

  export type PropertyUpdateWithoutLayersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    weekDayRanges?: WeekDayRangeUpdateManyWithoutPropertyNestedInput
    owner?: UserUpdateOneRequiredWithoutPropertiesNestedInput
    vertexes?: VertexesUpdateManyWithoutPropertyNestedInput
    propertyStatus?: PropertyStatusUpdateOneRequiredWithoutPropertiesNestedInput
  }

  export type PropertyUncheckedUpdateWithoutLayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: IntFieldUpdateOperationsInput | number
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    propertyStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    weekDayRanges?: WeekDayRangeUncheckedUpdateManyWithoutPropertyNestedInput
    vertexes?: VertexesUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type RentUpsertWithWhereUniqueWithoutLayerInput = {
    where: RentWhereUniqueInput
    update: XOR<RentUpdateWithoutLayerInput, RentUncheckedUpdateWithoutLayerInput>
    create: XOR<RentCreateWithoutLayerInput, RentUncheckedCreateWithoutLayerInput>
  }

  export type RentUpdateWithWhereUniqueWithoutLayerInput = {
    where: RentWhereUniqueInput
    data: XOR<RentUpdateWithoutLayerInput, RentUncheckedUpdateWithoutLayerInput>
  }

  export type RentUpdateManyWithWhereWithoutLayerInput = {
    where: RentScalarWhereInput
    data: XOR<RentUpdateManyMutationInput, RentUncheckedUpdateManyWithoutLayerInput>
  }

  export type PropertyCreateWithoutVertexesInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    noFlyZone?: boolean
    latitude: number
    longitude: number
    isActive?: boolean
    weekDayRanges?: WeekDayRangeCreateNestedManyWithoutPropertyInput
    owner: UserCreateNestedOneWithoutPropertiesInput
    layers?: LayerCreateNestedManyWithoutPropertyInput
    propertyStatus?: PropertyStatusCreateNestedOneWithoutPropertiesInput
  }

  export type PropertyUncheckedCreateWithoutVertexesInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    ownerId: number
    noFlyZone?: boolean
    latitude: number
    longitude: number
    propertyStatusId?: number
    isActive?: boolean
    weekDayRanges?: WeekDayRangeUncheckedCreateNestedManyWithoutPropertyInput
    layers?: LayerUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutVertexesInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutVertexesInput, PropertyUncheckedCreateWithoutVertexesInput>
  }

  export type PropertyUpsertWithoutVertexesInput = {
    update: XOR<PropertyUpdateWithoutVertexesInput, PropertyUncheckedUpdateWithoutVertexesInput>
    create: XOR<PropertyCreateWithoutVertexesInput, PropertyUncheckedCreateWithoutVertexesInput>
    where?: PropertyWhereInput
  }

  export type PropertyUpdateToOneWithWhereWithoutVertexesInput = {
    where?: PropertyWhereInput
    data: XOR<PropertyUpdateWithoutVertexesInput, PropertyUncheckedUpdateWithoutVertexesInput>
  }

  export type PropertyUpdateWithoutVertexesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    weekDayRanges?: WeekDayRangeUpdateManyWithoutPropertyNestedInput
    owner?: UserUpdateOneRequiredWithoutPropertiesNestedInput
    layers?: LayerUpdateManyWithoutPropertyNestedInput
    propertyStatus?: PropertyStatusUpdateOneRequiredWithoutPropertiesNestedInput
  }

  export type PropertyUncheckedUpdateWithoutVertexesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: IntFieldUpdateOperationsInput | number
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    propertyStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    weekDayRanges?: WeekDayRangeUncheckedUpdateManyWithoutPropertyNestedInput
    layers?: LayerUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type UserCreateWithoutRentInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    phoneNumber: string
    totalPoint?: number
    isActive?: boolean
    category: CategoryCreateNestedOneWithoutUsersInput
    KYCStatus?: StatusCreateNestedOneWithoutUsersInput
    properties?: PropertyCreateNestedManyWithoutOwnerInput
    usedReferralCode?: ReferralCodeCreateNestedOneWithoutUsedByInput
    ownedReferralCode?: ReferralCodeCreateNestedOneWithoutOwnedByInput
    Reward?: RewardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRentInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    categoryId: number
    phoneNumber: string
    totalPoint?: number
    KYCStatusId?: number
    isActive?: boolean
    usedReferralCodeId?: number | null
    ownedReferralCodeId?: number | null
    properties?: PropertyUncheckedCreateNestedManyWithoutOwnerInput
    Reward?: RewardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRentInput, UserUncheckedCreateWithoutRentInput>
  }

  export type LayerCreateWithoutRentsInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    property: PropertyCreateNestedOneWithoutLayersInput
  }

  export type LayerUncheckedCreateWithoutRentsInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    propertyId: number
  }

  export type LayerCreateOrConnectWithoutRentsInput = {
    where: LayerWhereUniqueInput
    create: XOR<LayerCreateWithoutRentsInput, LayerUncheckedCreateWithoutRentsInput>
  }

  export type UserUpsertWithoutRentInput = {
    update: XOR<UserUpdateWithoutRentInput, UserUncheckedUpdateWithoutRentInput>
    create: XOR<UserCreateWithoutRentInput, UserUncheckedCreateWithoutRentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRentInput, UserUncheckedUpdateWithoutRentInput>
  }

  export type UserUpdateWithoutRentInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: CategoryUpdateOneRequiredWithoutUsersNestedInput
    KYCStatus?: StatusUpdateOneRequiredWithoutUsersNestedInput
    properties?: PropertyUpdateManyWithoutOwnerNestedInput
    usedReferralCode?: ReferralCodeUpdateOneWithoutUsedByNestedInput
    ownedReferralCode?: ReferralCodeUpdateOneWithoutOwnedByNestedInput
    Reward?: RewardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRentInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    KYCStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    properties?: PropertyUncheckedUpdateManyWithoutOwnerNestedInput
    Reward?: RewardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LayerUpsertWithoutRentsInput = {
    update: XOR<LayerUpdateWithoutRentsInput, LayerUncheckedUpdateWithoutRentsInput>
    create: XOR<LayerCreateWithoutRentsInput, LayerUncheckedCreateWithoutRentsInput>
    where?: LayerWhereInput
  }

  export type LayerUpdateToOneWithWhereWithoutRentsInput = {
    where?: LayerWhereInput
    data: XOR<LayerUpdateWithoutRentsInput, LayerUncheckedUpdateWithoutRentsInput>
  }

  export type LayerUpdateWithoutRentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    property?: PropertyUpdateOneRequiredWithoutLayersNestedInput
  }

  export type LayerUncheckedUpdateWithoutRentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type WeekDayCreateWithoutWeekDayRangesInput = {
    name: string
  }

  export type WeekDayUncheckedCreateWithoutWeekDayRangesInput = {
    id?: number
    name: string
  }

  export type WeekDayCreateOrConnectWithoutWeekDayRangesInput = {
    where: WeekDayWhereUniqueInput
    create: XOR<WeekDayCreateWithoutWeekDayRangesInput, WeekDayUncheckedCreateWithoutWeekDayRangesInput>
  }

  export type PropertyCreateWithoutWeekDayRangesInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    noFlyZone?: boolean
    latitude: number
    longitude: number
    isActive?: boolean
    owner: UserCreateNestedOneWithoutPropertiesInput
    layers?: LayerCreateNestedManyWithoutPropertyInput
    vertexes?: VertexesCreateNestedManyWithoutPropertyInput
    propertyStatus?: PropertyStatusCreateNestedOneWithoutPropertiesInput
  }

  export type PropertyUncheckedCreateWithoutWeekDayRangesInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    ownerId: number
    noFlyZone?: boolean
    latitude: number
    longitude: number
    propertyStatusId?: number
    isActive?: boolean
    layers?: LayerUncheckedCreateNestedManyWithoutPropertyInput
    vertexes?: VertexesUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutWeekDayRangesInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutWeekDayRangesInput, PropertyUncheckedCreateWithoutWeekDayRangesInput>
  }

  export type WeekDayUpsertWithoutWeekDayRangesInput = {
    update: XOR<WeekDayUpdateWithoutWeekDayRangesInput, WeekDayUncheckedUpdateWithoutWeekDayRangesInput>
    create: XOR<WeekDayCreateWithoutWeekDayRangesInput, WeekDayUncheckedCreateWithoutWeekDayRangesInput>
    where?: WeekDayWhereInput
  }

  export type WeekDayUpdateToOneWithWhereWithoutWeekDayRangesInput = {
    where?: WeekDayWhereInput
    data: XOR<WeekDayUpdateWithoutWeekDayRangesInput, WeekDayUncheckedUpdateWithoutWeekDayRangesInput>
  }

  export type WeekDayUpdateWithoutWeekDayRangesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WeekDayUncheckedUpdateWithoutWeekDayRangesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyUpsertWithoutWeekDayRangesInput = {
    update: XOR<PropertyUpdateWithoutWeekDayRangesInput, PropertyUncheckedUpdateWithoutWeekDayRangesInput>
    create: XOR<PropertyCreateWithoutWeekDayRangesInput, PropertyUncheckedCreateWithoutWeekDayRangesInput>
    where?: PropertyWhereInput
  }

  export type PropertyUpdateToOneWithWhereWithoutWeekDayRangesInput = {
    where?: PropertyWhereInput
    data: XOR<PropertyUpdateWithoutWeekDayRangesInput, PropertyUncheckedUpdateWithoutWeekDayRangesInput>
  }

  export type PropertyUpdateWithoutWeekDayRangesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutPropertiesNestedInput
    layers?: LayerUpdateManyWithoutPropertyNestedInput
    vertexes?: VertexesUpdateManyWithoutPropertyNestedInput
    propertyStatus?: PropertyStatusUpdateOneRequiredWithoutPropertiesNestedInput
  }

  export type PropertyUncheckedUpdateWithoutWeekDayRangesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: IntFieldUpdateOperationsInput | number
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    propertyStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    layers?: LayerUncheckedUpdateManyWithoutPropertyNestedInput
    vertexes?: VertexesUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type WeekDayRangeCreateWithoutWeekDayInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    fromTime: number
    toTime: number
    isAvailable: boolean
    property: PropertyCreateNestedOneWithoutWeekDayRangesInput
  }

  export type WeekDayRangeUncheckedCreateWithoutWeekDayInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    fromTime: number
    toTime: number
    isAvailable: boolean
    propertyId: number
  }

  export type WeekDayRangeCreateOrConnectWithoutWeekDayInput = {
    where: WeekDayRangeWhereUniqueInput
    create: XOR<WeekDayRangeCreateWithoutWeekDayInput, WeekDayRangeUncheckedCreateWithoutWeekDayInput>
  }

  export type WeekDayRangeCreateManyWeekDayInputEnvelope = {
    data: WeekDayRangeCreateManyWeekDayInput | WeekDayRangeCreateManyWeekDayInput[]
    skipDuplicates?: boolean
  }

  export type WeekDayRangeUpsertWithWhereUniqueWithoutWeekDayInput = {
    where: WeekDayRangeWhereUniqueInput
    update: XOR<WeekDayRangeUpdateWithoutWeekDayInput, WeekDayRangeUncheckedUpdateWithoutWeekDayInput>
    create: XOR<WeekDayRangeCreateWithoutWeekDayInput, WeekDayRangeUncheckedCreateWithoutWeekDayInput>
  }

  export type WeekDayRangeUpdateWithWhereUniqueWithoutWeekDayInput = {
    where: WeekDayRangeWhereUniqueInput
    data: XOR<WeekDayRangeUpdateWithoutWeekDayInput, WeekDayRangeUncheckedUpdateWithoutWeekDayInput>
  }

  export type WeekDayRangeUpdateManyWithWhereWithoutWeekDayInput = {
    where: WeekDayRangeScalarWhereInput
    data: XOR<WeekDayRangeUpdateManyMutationInput, WeekDayRangeUncheckedUpdateManyWithoutWeekDayInput>
  }

  export type UserCreateWithoutUsedReferralCodeInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    phoneNumber: string
    totalPoint?: number
    isActive?: boolean
    category: CategoryCreateNestedOneWithoutUsersInput
    KYCStatus?: StatusCreateNestedOneWithoutUsersInput
    properties?: PropertyCreateNestedManyWithoutOwnerInput
    Rent?: RentCreateNestedManyWithoutRenterUserInput
    ownedReferralCode?: ReferralCodeCreateNestedOneWithoutOwnedByInput
    Reward?: RewardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUsedReferralCodeInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    categoryId: number
    phoneNumber: string
    totalPoint?: number
    KYCStatusId?: number
    isActive?: boolean
    ownedReferralCodeId?: number | null
    properties?: PropertyUncheckedCreateNestedManyWithoutOwnerInput
    Rent?: RentUncheckedCreateNestedManyWithoutRenterUserInput
    Reward?: RewardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUsedReferralCodeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUsedReferralCodeInput, UserUncheckedCreateWithoutUsedReferralCodeInput>
  }

  export type UserCreateManyUsedReferralCodeInputEnvelope = {
    data: UserCreateManyUsedReferralCodeInput | UserCreateManyUsedReferralCodeInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutOwnedReferralCodeInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    phoneNumber: string
    totalPoint?: number
    isActive?: boolean
    category: CategoryCreateNestedOneWithoutUsersInput
    KYCStatus?: StatusCreateNestedOneWithoutUsersInput
    properties?: PropertyCreateNestedManyWithoutOwnerInput
    Rent?: RentCreateNestedManyWithoutRenterUserInput
    usedReferralCode?: ReferralCodeCreateNestedOneWithoutUsedByInput
    Reward?: RewardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnedReferralCodeInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    categoryId: number
    phoneNumber: string
    totalPoint?: number
    KYCStatusId?: number
    isActive?: boolean
    usedReferralCodeId?: number | null
    properties?: PropertyUncheckedCreateNestedManyWithoutOwnerInput
    Rent?: RentUncheckedCreateNestedManyWithoutRenterUserInput
    Reward?: RewardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnedReferralCodeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedReferralCodeInput, UserUncheckedCreateWithoutOwnedReferralCodeInput>
  }

  export type UserUpsertWithWhereUniqueWithoutUsedReferralCodeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutUsedReferralCodeInput, UserUncheckedUpdateWithoutUsedReferralCodeInput>
    create: XOR<UserCreateWithoutUsedReferralCodeInput, UserUncheckedCreateWithoutUsedReferralCodeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutUsedReferralCodeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutUsedReferralCodeInput, UserUncheckedUpdateWithoutUsedReferralCodeInput>
  }

  export type UserUpdateManyWithWhereWithoutUsedReferralCodeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsedReferralCodeInput>
  }

  export type UserUpsertWithoutOwnedReferralCodeInput = {
    update: XOR<UserUpdateWithoutOwnedReferralCodeInput, UserUncheckedUpdateWithoutOwnedReferralCodeInput>
    create: XOR<UserCreateWithoutOwnedReferralCodeInput, UserUncheckedCreateWithoutOwnedReferralCodeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedReferralCodeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedReferralCodeInput, UserUncheckedUpdateWithoutOwnedReferralCodeInput>
  }

  export type UserUpdateWithoutOwnedReferralCodeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: CategoryUpdateOneRequiredWithoutUsersNestedInput
    KYCStatus?: StatusUpdateOneRequiredWithoutUsersNestedInput
    properties?: PropertyUpdateManyWithoutOwnerNestedInput
    Rent?: RentUpdateManyWithoutRenterUserNestedInput
    usedReferralCode?: ReferralCodeUpdateOneWithoutUsedByNestedInput
    Reward?: RewardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedReferralCodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    KYCStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    properties?: PropertyUncheckedUpdateManyWithoutOwnerNestedInput
    Rent?: RentUncheckedUpdateManyWithoutRenterUserNestedInput
    Reward?: RewardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRewardInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    phoneNumber: string
    totalPoint?: number
    isActive?: boolean
    category: CategoryCreateNestedOneWithoutUsersInput
    KYCStatus?: StatusCreateNestedOneWithoutUsersInput
    properties?: PropertyCreateNestedManyWithoutOwnerInput
    Rent?: RentCreateNestedManyWithoutRenterUserInput
    usedReferralCode?: ReferralCodeCreateNestedOneWithoutUsedByInput
    ownedReferralCode?: ReferralCodeCreateNestedOneWithoutOwnedByInput
  }

  export type UserUncheckedCreateWithoutRewardInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    categoryId: number
    phoneNumber: string
    totalPoint?: number
    KYCStatusId?: number
    isActive?: boolean
    usedReferralCodeId?: number | null
    ownedReferralCodeId?: number | null
    properties?: PropertyUncheckedCreateNestedManyWithoutOwnerInput
    Rent?: RentUncheckedCreateNestedManyWithoutRenterUserInput
  }

  export type UserCreateOrConnectWithoutRewardInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRewardInput, UserUncheckedCreateWithoutRewardInput>
  }

  export type UserUpsertWithoutRewardInput = {
    update: XOR<UserUpdateWithoutRewardInput, UserUncheckedUpdateWithoutRewardInput>
    create: XOR<UserCreateWithoutRewardInput, UserUncheckedCreateWithoutRewardInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRewardInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRewardInput, UserUncheckedUpdateWithoutRewardInput>
  }

  export type UserUpdateWithoutRewardInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: CategoryUpdateOneRequiredWithoutUsersNestedInput
    KYCStatus?: StatusUpdateOneRequiredWithoutUsersNestedInput
    properties?: PropertyUpdateManyWithoutOwnerNestedInput
    Rent?: RentUpdateManyWithoutRenterUserNestedInput
    usedReferralCode?: ReferralCodeUpdateOneWithoutUsedByNestedInput
    ownedReferralCode?: ReferralCodeUpdateOneWithoutOwnedByNestedInput
  }

  export type UserUncheckedUpdateWithoutRewardInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    KYCStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    properties?: PropertyUncheckedUpdateManyWithoutOwnerNestedInput
    Rent?: RentUncheckedUpdateManyWithoutRenterUserNestedInput
  }

  export type PropertyCreateManyOwnerInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    noFlyZone?: boolean
    latitude: number
    longitude: number
    propertyStatusId?: number
    isActive?: boolean
  }

  export type RentCreateManyRenterUserInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    startTime: Date | string
    endTime: Date | string
    layerId: number
    isActive?: boolean
  }

  export type RewardCreateManyUserInput = {
    id?: string
    rewardId: string
    taskType: $Enums.TaskType
    point: number
    completed?: boolean
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type PropertyUpdateWithoutOwnerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    weekDayRanges?: WeekDayRangeUpdateManyWithoutPropertyNestedInput
    layers?: LayerUpdateManyWithoutPropertyNestedInput
    vertexes?: VertexesUpdateManyWithoutPropertyNestedInput
    propertyStatus?: PropertyStatusUpdateOneRequiredWithoutPropertiesNestedInput
  }

  export type PropertyUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    propertyStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    weekDayRanges?: WeekDayRangeUncheckedUpdateManyWithoutPropertyNestedInput
    layers?: LayerUncheckedUpdateManyWithoutPropertyNestedInput
    vertexes?: VertexesUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    propertyStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RentUpdateWithoutRenterUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    layer?: LayerUpdateOneRequiredWithoutRentsNestedInput
  }

  export type RentUncheckedUpdateWithoutRenterUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    layerId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RentUncheckedUpdateManyWithoutRenterUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    layerId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RewardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardId?: StringFieldUpdateOperationsInput | string
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    point?: FloatFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardId?: StringFieldUpdateOperationsInput | string
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    point?: FloatFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardId?: StringFieldUpdateOperationsInput | string
    taskType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    point?: FloatFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyKYCStatusInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    categoryId: number
    phoneNumber: string
    totalPoint?: number
    isActive?: boolean
    usedReferralCodeId?: number | null
    ownedReferralCodeId?: number | null
  }

  export type UserUpdateWithoutKYCStatusInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: CategoryUpdateOneRequiredWithoutUsersNestedInput
    properties?: PropertyUpdateManyWithoutOwnerNestedInput
    Rent?: RentUpdateManyWithoutRenterUserNestedInput
    usedReferralCode?: ReferralCodeUpdateOneWithoutUsedByNestedInput
    ownedReferralCode?: ReferralCodeUpdateOneWithoutOwnedByNestedInput
    Reward?: RewardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutKYCStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    properties?: PropertyUncheckedUpdateManyWithoutOwnerNestedInput
    Rent?: RentUncheckedUpdateManyWithoutRenterUserNestedInput
    Reward?: RewardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutKYCStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateManyCategoryInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    phoneNumber: string
    totalPoint?: number
    KYCStatusId?: number
    isActive?: boolean
    usedReferralCodeId?: number | null
    ownedReferralCodeId?: number | null
  }

  export type UserUpdateWithoutCategoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    KYCStatus?: StatusUpdateOneRequiredWithoutUsersNestedInput
    properties?: PropertyUpdateManyWithoutOwnerNestedInput
    Rent?: RentUpdateManyWithoutRenterUserNestedInput
    usedReferralCode?: ReferralCodeUpdateOneWithoutUsedByNestedInput
    ownedReferralCode?: ReferralCodeUpdateOneWithoutOwnedByNestedInput
    Reward?: RewardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    KYCStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    properties?: PropertyUncheckedUpdateManyWithoutOwnerNestedInput
    Rent?: RentUncheckedUpdateManyWithoutRenterUserNestedInput
    Reward?: RewardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    KYCStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WeekDayRangeCreateManyPropertyInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    fromTime: number
    toTime: number
    isAvailable: boolean
    weekDayId: number
  }

  export type LayerCreateManyPropertyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
  }

  export type VertexesCreateManyPropertyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    latitude: number
    longitude: number
  }

  export type WeekDayRangeUpdateWithoutPropertyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromTime?: FloatFieldUpdateOperationsInput | number
    toTime?: FloatFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    weekDay?: WeekDayUpdateOneRequiredWithoutWeekDayRangesNestedInput
  }

  export type WeekDayRangeUncheckedUpdateWithoutPropertyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromTime?: FloatFieldUpdateOperationsInput | number
    toTime?: FloatFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    weekDayId?: IntFieldUpdateOperationsInput | number
  }

  export type WeekDayRangeUncheckedUpdateManyWithoutPropertyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromTime?: FloatFieldUpdateOperationsInput | number
    toTime?: FloatFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    weekDayId?: IntFieldUpdateOperationsInput | number
  }

  export type LayerUpdateWithoutPropertyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    rents?: RentUpdateManyWithoutLayerNestedInput
  }

  export type LayerUncheckedUpdateWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    rents?: RentUncheckedUpdateManyWithoutLayerNestedInput
  }

  export type LayerUncheckedUpdateManyWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
  }

  export type VertexesUpdateWithoutPropertyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type VertexesUncheckedUpdateWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type VertexesUncheckedUpdateManyWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type PropertyCreateManyPropertyStatusInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    title: string
    transitFee: string
    address: string
    timezone: string
    hasLandingDeck: boolean
    hasChargingStation: boolean
    hasStorageHub: boolean
    isFixedTransitFee: boolean
    isRentableAirspace: boolean
    ownerId: number
    noFlyZone?: boolean
    latitude: number
    longitude: number
    isActive?: boolean
  }

  export type PropertyUpdateWithoutPropertyStatusInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    weekDayRanges?: WeekDayRangeUpdateManyWithoutPropertyNestedInput
    owner?: UserUpdateOneRequiredWithoutPropertiesNestedInput
    layers?: LayerUpdateManyWithoutPropertyNestedInput
    vertexes?: VertexesUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateWithoutPropertyStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: IntFieldUpdateOperationsInput | number
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    weekDayRanges?: WeekDayRangeUncheckedUpdateManyWithoutPropertyNestedInput
    layers?: LayerUncheckedUpdateManyWithoutPropertyNestedInput
    vertexes?: VertexesUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateManyWithoutPropertyStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    transitFee?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    hasLandingDeck?: BoolFieldUpdateOperationsInput | boolean
    hasChargingStation?: BoolFieldUpdateOperationsInput | boolean
    hasStorageHub?: BoolFieldUpdateOperationsInput | boolean
    isFixedTransitFee?: BoolFieldUpdateOperationsInput | boolean
    isRentableAirspace?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: IntFieldUpdateOperationsInput | number
    noFlyZone?: BoolFieldUpdateOperationsInput | boolean
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RentCreateManyLayerInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    tokenId: string
    startTime: Date | string
    endTime: Date | string
    renterId: number
    isActive?: boolean
  }

  export type RentUpdateWithoutLayerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    renterUser?: UserUpdateOneRequiredWithoutRentNestedInput
  }

  export type RentUncheckedUpdateWithoutLayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    renterId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RentUncheckedUpdateManyWithoutLayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokenId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    renterId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WeekDayRangeCreateManyWeekDayInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    fromTime: number
    toTime: number
    isAvailable: boolean
    propertyId: number
  }

  export type WeekDayRangeUpdateWithoutWeekDayInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromTime?: FloatFieldUpdateOperationsInput | number
    toTime?: FloatFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    property?: PropertyUpdateOneRequiredWithoutWeekDayRangesNestedInput
  }

  export type WeekDayRangeUncheckedUpdateWithoutWeekDayInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromTime?: FloatFieldUpdateOperationsInput | number
    toTime?: FloatFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type WeekDayRangeUncheckedUpdateManyWithoutWeekDayInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromTime?: FloatFieldUpdateOperationsInput | number
    toTime?: FloatFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyUsedReferralCodeInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    username?: string | null
    password?: string | null
    name: string
    email: string
    blockchainAddress: string
    isAdmin?: boolean
    newsletter: boolean
    categoryId: number
    phoneNumber: string
    totalPoint?: number
    KYCStatusId?: number
    isActive?: boolean
    ownedReferralCodeId?: number | null
  }

  export type UserUpdateWithoutUsedReferralCodeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: CategoryUpdateOneRequiredWithoutUsersNestedInput
    KYCStatus?: StatusUpdateOneRequiredWithoutUsersNestedInput
    properties?: PropertyUpdateManyWithoutOwnerNestedInput
    Rent?: RentUpdateManyWithoutRenterUserNestedInput
    ownedReferralCode?: ReferralCodeUpdateOneWithoutOwnedByNestedInput
    Reward?: RewardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUsedReferralCodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    KYCStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    properties?: PropertyUncheckedUpdateManyWithoutOwnerNestedInput
    Rent?: RentUncheckedUpdateManyWithoutRenterUserNestedInput
    Reward?: RewardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUsedReferralCodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    blockchainAddress?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    totalPoint?: FloatFieldUpdateOperationsInput | number
    KYCStatusId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownedReferralCodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusCountOutputTypeDefaultArgs instead
     */
    export type StatusCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropertyCountOutputTypeDefaultArgs instead
     */
    export type PropertyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropertyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropertyStatusCountOutputTypeDefaultArgs instead
     */
    export type PropertyStatusCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropertyStatusCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LayerCountOutputTypeDefaultArgs instead
     */
    export type LayerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LayerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeekDayCountOutputTypeDefaultArgs instead
     */
    export type WeekDayCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeekDayCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReferralCodeCountOutputTypeDefaultArgs instead
     */
    export type ReferralCodeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReferralCodeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusDefaultArgs instead
     */
    export type StatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropertyDefaultArgs instead
     */
    export type PropertyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropertyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropertyStatusDefaultArgs instead
     */
    export type PropertyStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropertyStatusDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LayerDefaultArgs instead
     */
    export type LayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LayerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VertexesDefaultArgs instead
     */
    export type VertexesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VertexesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RentDefaultArgs instead
     */
    export type RentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewsletterDefaultArgs instead
     */
    export type NewsletterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewsletterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeekDayRangeDefaultArgs instead
     */
    export type WeekDayRangeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeekDayRangeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeekDayDefaultArgs instead
     */
    export type WeekDayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeekDayDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReferralCodeDefaultArgs instead
     */
    export type ReferralCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReferralCodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RentalTokenDefaultArgs instead
     */
    export type RentalTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RentalTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RewardDefaultArgs instead
     */
    export type RewardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RewardDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}